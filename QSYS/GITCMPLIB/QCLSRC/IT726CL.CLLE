/*-------------------------------------------------------------------*/
/*   Copyright (C) 2006 BFC Software, Inc. - All Rights Reserved     */
/*   BFC Software, Inc.                                              */
/*   245 W. Roosevelt Rd.  Bldg 8, Suite 51                          */
/*   West Chicago, IL  60185                                         */
/*   (630) 562-0375                                                  */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*  IT726CL   FTP export item adjustments                            */
/*  04 July 1999                                                     */
/*  Dave Sommerville                                                 */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Revisions:                                                       */
/*                                                                   */
/*    09/13/00  DAS  4.14                                            */
/*      - Revised to use export script EXPFADJ instead of DEFAULT.   */
/*      - Revised to check script for *NO EXPORT*.                   */
/*                                                                   */
/*    03/07/02  DAS  4.16                                            */
/*      - Revised to see if any records were written to the export   */
/*        file. If not, member is deleted automatically.             */
/*                                                                   */
/*    07/14/06  MLB  5.10                                            */
/*      - Enh: Added client custom code support to program.          */
/*    07/14/06  MLB  5.10a                                           */
/*      - Enh: Added MONMSG's to all RMVM's at end of pgm.           */
/*    10/08/06  MLB  5.10b                                           */
/*      - Enh: Added 6 new return parms on call to FTPCRTSCRP        */
/*        program to return path statement created for export files. */
/*                                                                   */
/*    12/31/10  MLB  6.40                                            */
/*      - Enh: Added DSPJOBLOG OUTPUT(*PRINT) if export fails.       */
/*                                                                   */
/*    04/16/13  RTR  6.50a                                           */
/*      - Enh: Added adjustment license file.                        */
/*                                                                   */
/*    08/19/15  RTR  7.00a                                           */
/*      - Enh: Removed extra message when no records, added          */
/*        'adjustment' to message.                                   */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Custom mods:                                                     */
/*                                                                   */
/*    10/27/04  MLB  CTY                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFADJxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Packer's Provision                      */
/*                                                                   */
/*    06/26/06  MLB  PAK                                             */
/*      - Revised program to add member to SAPEXP file for           */
/*        SAP unique export file for purchase orders.                */
/*    10/08/06  MLB  PAKa                                            */
/*      - Revised program to use CPYTOIMPF command to send SAPEXP    */
/*        file to shared folder instead of using FTP. Messages       */
/*        will still be sent to the FTP message queues.              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: TPC                                     */
/*                                                                   */
/*    02/22/07  MLB  TPC                                             */
/*      - Revised program to call GETEXP# for use in creating        */
/*        remote export file name.                                   */
/*    04/17/07  MLB  TPCa                                            */
/*      - Revised program to copy data from EXPFADJ to and extended  */
/*        length file, EXPFADJSPK. TPC's host software, Stanpack     */
/*        requires specific length files.                            */
/*    01/29/17  MLB  TPCb                                            */
/*      - Revised program to add *MAP, *DROP to CPYF cmd to file     */
/*        EXPFADJSPK. File EXPFADJ had slot status added to file.    */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Dairyland                               */
/*                                                                   */
/*    12/31/10  MLB  DRY                                             */
/*      - Revised program to call BFCEIA01C to process exported      */
/*        item adjustments.                                          */
/*    12/31/10  MLB  DRYa                                            */
/*      - Revised mod, DRY to pass retrieved Dakota data files       */
/*        library name to Host interface program.                    */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Crumbley Paper & Foodservice            */
/*                                                                   */
/*    06/15/11  MLB  CPC                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFADJxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added CPC to CTY mod.                                      */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Fischer Foods                           */
/*                                                                   */
/*    06/15/11  MLB  FCC                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFADJxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added FFC to CTY mod.                                      */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Parameters:                                                      */
/*                                                                   */
/*    &WHSE   -  Warehouse                                           */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Notes:                                                           */
/*                                                                   */
/*   This program will create a unique member name and then create   */
/*   new members in all of the export files and in the FTP script    */
/*   and log files.                                                  */
/*                                                                   */
/*   The remote file name will start with the member name followed   */
/*   by a letter to identify it's type (H,D). The extension          */
/*   will be PO.                                                     */
/*                                                                   */
/*-------------------------------------------------------------------*/

 IT726CL:    PGM        PARM(&WHSE)

/*-------------------------------------------------------------------*/
/*  Constant declarations                                            */
/*-------------------------------------------------------------------*/

  /* Client ID's.    */                                           /* (510 A) */

             DCL        VAR(&CITYLINE) TYPE(*CHAR) LEN(8) +
                          VALUE('CITYLINE')                      /* (CTY A) */
             DCL        VAR(&CRUMBLEY) TYPE(*CHAR) LEN(10) +
                          VALUE('CRUMBLEY')                       /* (CPC A) */
             DCL        VAR(&DAIRYLAND) TYPE(*CHAR) LEN(10) +
                          VALUE('DAIRYLAND')                      /* (DRY A) */
             DCL        VAR(&PACKERS) TYPE(*CHAR) LEN(8) +
                          VALUE('PACKERS ')                       /* (PAK A) */
             DCL        VAR(&FISCHER) TYPE(*CHAR) LEN(8) +
                          VALUE('FISCHER ')                       /* (FFC A) */
             DCL        VAR(&TPC)     TYPE(*CHAR) LEN(8) +
                          VALUE('TPC')                            /* (TPC A) */

  /* Export program. */

             DCL        VAR(&EXPPGM) TYPE(*CHAR) LEN(8) +
                          VALUE(IT726)

  /* Export script */  /* 414A */

             DCL        VAR(&EXPSCRP) TYPE(*CHAR) LEN(8) +
                          VALUE(EXPFADJ)

  /* Message queues */

             DCL        VAR(&FTPMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPADJ')
             DCL        VAR(&FTPERRMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPADJERR')

  /* Import files */

             DCL        VAR(&FILE) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPFADJ')
             DCL        VAR(&FILED) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPFADJL')                       /* (650aA) */

  /* Number of 'Transfer complete' messages to look for */

             DCL        VAR(&TFRNEEDED) TYPE(*DEC) LEN(1 0) VALUE(1)

/*-------------------------------------------------------------------*/
/*  Field declarations                                               */
/*-------------------------------------------------------------------*/

             DCL        VAR(&client)     TYPE(*CHAR) LEN(10)      /* (510 A) */
             DCL        VAR(&clientloc)  TYPE(*CHAR) LEN(10)      /* (510 A) */
             DCL        VAR(&CURDTYYMD)  TYPE(*CHAR) LEN(8)       /* (PAK A) */
             DCL        VAR(&CURDTMDY)   TYPE(*CHAR) LEN(6)       /* (PAK A) */
             DCL        VAR(&CURTIME)    TYPE(*CHAR) LEN(6)       /* (PAK A) */
             DCL        VAR(&ERRCNT)     TYPE(*DEC)  LEN(1 0)
             DCL        VAR(&EXIST)      TYPE(*LGL)
             DCL        VAR(&EXPFNBR)    TYPE(*CHAR) LEN(1)       /* (TPC A) */
             DCL        VAR(&EXPTYPE)    TYPE(*CHAR) LEN(8)
             DCL        VAR(&EXPFLAG)    TYPE(*CHAR) LEN(8) /* 414A */
             DCL        VAR(&FINISHED)   TYPE(*LGL)
             DCL        VAR(&HOSTLIB)    TYPE(*CHAR) LEN(10) +
                                              VALUE('DARLIB_TST') /* (DRY A) */
             DCL        VAR(&JOB)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&LCLFILEC)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILED)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILEH)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILET)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILEE)   TYPE(*CHAR) LEN(33)      /* (510bA) */
             DCL        VAR(&LCLFILEB)   TYPE(*CHAR) LEN(33)      /* (510bA) */
             DCL        VAR(&LIBD)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBH)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBE)       TYPE(*CHAR) LEN(10)      /* (510bA) */
             DCL        VAR(&LIBC)       TYPE(*CHAR) LEN(10)      /* (510bA) */
             DCL        VAR(&LIBB)       TYPE(*CHAR) LEN(10)      /* (510bA) */
             DCL        VAR(&LIBT)       TYPE(*CHAR) LEN(10)      /* (510bA) */
             DCL        VAR(&MBR)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA)     TYPE(*CHAR) LEN(256)
             DCL        VAR(&MSGF)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB)    TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID)      TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGKEY)     TYPE(*CHAR) LEN(4)
             DCL        VAR(&NXTNUM)     TYPE(*DEC)  LEN(7)
             DCL        VAR(&NXTNUMA)    TYPE(*CHAR) LEN(7)
             DCL        VAR(&PGM)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&PATHH)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&PATHD)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&PATHC)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&PATHT)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&PATHB)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&PATHE)      TYPE(*CHAR) LEN(45)      /* (510bA) */
             DCL        VAR(&QRYSLT)     TYPE(*CHAR) LEN(2000)
             DCL        VAR(&QUOTE)      TYPE(*CHAR) LEN(1) VALUE('"')
             DCL        VAR(&RECS)       TYPE(*DEC)  LEN(10 0) /*416A*/
             DCL        VAR(&RMTFILEC)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILED)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILEH)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILET)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILEE)   TYPE(*CHAR) LEN(16)      /* (510bA) */
             DCL        VAR(&RMTFILEB)   TYPE(*CHAR) LEN(16)      /* (510bA) */
             DCL        VAR(&RTN)        TYPE(*CHAR) LEN(8)
             DCL        VAR(&RTNH)       TYPE(*CHAR) LEN(8)       /* (DRY A) */
             DCL        VAR(&RUNTIMEENV) TYPE(*CHAR) LEN(10)      /* (DRYaM) */
             DCL        VAR(&SEV)        TYPE(*DEC)  LEN(2 0)
             DCL        VAR(&SHORTNUMA)  TYPE(*CHAR) LEN(5)   /* CTY A */
             DCL        VAR(&TYPE)       TYPE(*CHAR) LEN(1)
             DCL        VAR(&USER)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&WHSE)       TYPE(*CHAR) LEN(3)
             DCL        VAR(&WHSEN)      TYPE(*DEC)  LEN(3 0)     /* (DRY A) */

             MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(GETOUT))

/* Get Client ID */                                               /* (510 A) */
             CALL       PGM(GETCLIENT) PARM(&CLIENT &CLIENTLOC)   /* (510 A) */

             CHGVAR     VAR(&ERRCNT) VALUE(0)
             CHGVAR     VAR(&EXIST) VALUE('0')
             CHGVAR     VAR(&FINISHED) VALUE('0')

/*-------------------------------------------------------------------*/
/*  Main line                                                        */
/*-------------------------------------------------------------------*/

             CHGVAR     VAR(&PGM) VALUE('IT726CL')

/* Get job information */

             RTVJOBA    JOB(&JOB) USER(&USER) TYPE(&TYPE)

/*  Get current date/time to create SAP FTP remote file name.        (PAK A) */
             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               RTVSYSVAL  SYSVAL(QDATE) RTNVAR(&CURDTMDY)         /* (PAK A) */
               RTVSYSVAL  SYSVAL(QTIME) RTNVAR(&CURTIME)          /* (PAK A) */
               CVTDAT   DATE(&CURDTMDY) TOVAR(&CURDTYYMD) +
                          FROMFMT(*MDY) TOFMT(*YYMD) TOSEP(*NONE) /* (PAK A) */
             ENDDO                                                /* (PAK A) */

/* Create member name */

             CALL       PGM(PIRFTP#) PARM(&NXTNUM)
             CHGVAR     VAR(&NXTNUMA) VALUE(&NXTNUM)
             CHGVAR     VAR(&MBR) VALUE('A' *CAT %SST(&WHSE 2 2) +
                          *CAT &NXTNUMA)

/* Create members for export files */

             ADDPFM     FILE(&FILE) MBR(&MBR)
             ADDPFM     FILE(&FILED) MBR(&MBR)                    /* (650aA) */
/*  Add members to extended length export files for TPC.             (TPCaA) */
             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               ADDPFM     FILE(EXPFADJSPK) MBR(&MBR)              /* (TPCaA) */
             ENDDO                                                /* (TPCaA) */

/* Use OPNQRYF to select and order the records we need */

             MSGBFC     MESSAGE('Selecting records to export')

             OVRDBF     FILE(ITEMADJ) SHARE(*YES)
             CHGVAR     VAR(&QRYSLT) VALUE('(IAWHSE *EQ' *BCAT &WHSE +
                          *CAT ') *AND (IAUDTE *EQ 0)')
             OPNQRYF    FILE((ITEMADJ)) OPTION(*ALL) QRYSLT(&QRYSLT) +
                          KEYFLD((IAWHSE) (IAITEM) (IADATE) (IATIME))

             RMVMSG     CLEAR(*ALL)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Exporting adjustments into +
                          member' *BCAT &MBR *TCAT ' in adj export +
                          files') TOPGMQ(*EXT) MSGTYPE(*STATUS)

/*  Create SAP Export Sales Orders file member.                      (PAK A) */
             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */

               ADDPFM     FILE(SAPEXP) MBR(&MBR)                  /* (PAK A) */
               MONMSG     MSGID(CPF7306) EXEC(DO)
/*               Ignore member not added at this time.               (PAK A) */
/*               Clrpfm file(SAPEXP) mbr(&MBR)                       (PAK A) */
               Enddo                                              /* (PAK A) */

             enddo                                                /* (PAK A) */

/*  Call program to move route to export files */

             OVRDBF     FILE(&FILE) MBR(&MBR)
             OVRDBF     FILE(&FILED) MBR(&MBR)                    /* (650aA) */
/*  Override to SAP Export file member.                              (PAK A) */
             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               OVRDBF     FILE(SAPEXP) MBR(&MBR)                  /* (PAK A) */
             ENDDO                                                /* (PAK A) */

             CALL       PGM(&EXPPGM)

             DLTOVR     FILE(&FILE)
             DLTOVR     FILE(&FILED)                              /* (650aA) */
             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               dltovr     FILE(SAPEXP)                            /* (PAK A) */
             enddo                                                /* (PAK A) */

/* If no records were exported, delete member and get out */ /* 416A */

             RTVMBRD    FILE(&FILE) MBR(&MBR) NBRCURRCD(&RECS)

             IF         COND(&RECS = 0) THEN(DO)

             RMVM       FILE(&FILE) MBR(&MBR)
             RMVM       FILE(&FILED) MBR(&MBR)               /* (650aA) */
             RMVMSG     CLEAR(*ALL)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) MSGDTA('No adjustment +
                          records to export in member' *BCAT &MBR) +
                          TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)          /* (700aM) */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) MSGDTA('No adjustment +
                          records to export in member' *BCAT &MBR) +
                          MSGTYPE(*INFO) KEYVAR(&MSGKEY)           /* (700aM) */

          /* SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO) (700aD) */

          /* SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) MSGTYPE(*INFO) KEYVAR(&MSGKEY)  (700aD) */

             DLTOVR     FILE(*ALL)
             CHGVAR     VAR(&RTN) VALUE('*OK')
             RETURN

             ENDDO

             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               CPYF       FROMFILE(&FILE) TOFILE(EXPFADJSPK) +
                            FROMMBR(&MBR) TOMBR(&MBR) +
                            MBROPT(*REPLACE) FMTOPT(*MAP *DROP)   /* (TPCbM) */
             enddo                                                /* (TPCaA) */

/* Check if we should export file to host system */  /* 414 A */

             OVRDBF     FILE(FTPEXPDFT) MBR(&EXPSCRP)
             CALL       PGM(FTPCHKSCR) PARM(&EXPFLAG)
             DLTOVR     FILE(FTPEXPDFT)
             IF         COND(&EXPFLAG = '*NOEXP') THEN(GOTO SKIPFTP)

/* Create members for ftp files */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Creating export script from +
                          member' *BCAT &MBR) TOPGMQ(*EXT) +
                          MSGTYPE(*STATUS)

             ADDPFM     FILE(FTPEXPLOG) MBR(&MBR)
             CPYSRCF    FROMFILE(FTPEXPDFT) TOFILE(FTPEXPSCRP) +
                          FROMMBR(&EXPSCRP) TOMBR(&MBR)    /* 414 M */
                       /* FROMMBR(DEFAULT) TOMBR(&MBR)  */ /* 414 D */

/* Retrieve library names for files */

             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               RTVMBRD    FILE(SAPEXP) MBR(&MBR) RTNLIB(&LIBH)    /* (PAK A) */
             ENDDO                                                /* (PAK A) */
             ELSE       CMD(DO)                                   /* (PAK A) */
             RTVMBRD    FILE(&FILE) MBR(&MBR) RTNLIB(&LIBH)
             RTVMBRD    FILE(&FILED) MBR(&MBR) RTNLIB(&LIBD)      /* (650aA) */
             ENDDO                                                /* (PAK A) */

/* Create FTP local and remote file names */

             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                            '/SAPEXP.' *CAT &MBR)                 /* (PAK A) */
             ENDDO                                                /* (PAK A) */
             Else if cond(&client = &TPC) THEN(DO)                /* (TPCaA) */
               CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                            '/EXPFADJSPK.' *CAT &MBR)             /* (TPCaA) */
             ENDDO                                                /* (TPCaA) */
             Else if cond(&client = &CITYLINE) THEN(DO)           /* (CTY A) */
             CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                          '/EXPFADJ.' *CAT &MBR)

             CHGVAR     VAR(&SHORTNUMA) VALUE(%SST(&NXTNUMA 3 5)) /* +
                          CTY A */
             ENDDO                                                /* (CTY A) */
             else cmd(DO)                                         /* (PAK A) */
             CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                          '/EXPFADJ.' *CAT &MBR)
             ENDDO                                                /* (PAK A) */

    /*       CHGVAR     VAR(&RMTFILEH) VALUE(&MBR *TCAT '.Adj')  */

             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               CHGVAR     VAR(&RMTFILEH) VALUE(&CURDTYYMD *CAT &CURTIME)
                                                                  /* (PAK A) */
             ENDDO                                                /* (PAK A) */

             Else if cond(&client = &TPC) THEN(DO)                /* (TPC A) */
               CALL       PGM(GETEXP#) PARM('*ADJ' &EXPFNBR)      /* (TPC A) */
               CHGVAR     VAR(&RMTFILEH) VALUE('wmah' *CAT &expfnbr) +
                                                                  /* (TPC A) */
             ENDDO                                                /* (TPC A) */
/*           Else if cond(&client = &CITYLINE) THEN(DO)           /* (CPC D) */
             ELSE       CMD(IF COND(&CLIENT = &CITYLINE +
                               *OR  &CLIENT = &FISCHER +
                               *OR  &CLIENT = &CRUMBLEY) THEN(DO)) /* (FFC M) */
    /*       CHGVAR     VAR(&RMTFILEH) VALUE('EXPFADJ' *CAT +
                          %SST(&WHSE 2 2) *CAT '.Txt')            (CTY D) */
             CHGVAR     VAR(&RMTFILEH) VALUE('EXPFADJ' *CAT &SHORTNUMA +
                          *TCAT '.Txt')                        /* (CTY M) */
             ENDDO                                                /* (CTY A) */

             else cmd(DO)                                         /* (PAK A) */

             CHGVAR     VAR(&RMTFILEH) VALUE('EXPFADJ' *CAT +
                          %SST(&WHSE 2 2) *CAT '.Txt')
             CHGVAR     VAR(&RMTFILED) VALUE('EXPFADJL' *CAT +
                          %SST(&WHSE 2 2) *CAT '.Txt')            /* (650aA) */
      ENDDO                                                       /* (PAK A) */

/* Call program to create script */

             CHGVAR     VAR(&EXPTYPE) VALUE('*ADJ')
             OVRDBF     FILE(FTPEXPSCRP) MBR(&MBR)

/*           CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +            */
/*                        &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +          */
/*                        &RMTFILED &RMTFILEC &RMTFILET)             (510bD) */
             CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +
                          &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +
                          &RMTFILED &RMTFILEC &RMTFILET &LCLFILEB +
                          &RMTFILEB &LCLFILEE &RMTFILEE &PATHH +
                          &PATHD &PATHC &PATHT &PATHB &PATHE)     /* (510bM) */

             DLTOVR     FILE(FTPEXPSCRP)

             RMVMSG     CLEAR(*ALL)

/* Execute FTP */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export files using FTP for +
                          member' *BCAT &MBR) TOPGMQ(*EXT) +
                          MSGTYPE(*STATUS)

             IF         COND(&CLIENT *EQ &PACKERS) THEN(DO)       /* (PAKaA) */

/*             Send file to IFS instead of using FTP.                (PAKaA) */
               CPYTOIMPF  FROMFILE(*LIBL/SAPEXP &MBR) +
                            TOSTMF(&PATHH) MBROPT(*REPLACE) +
                            STMFCODPAG(*PCASCII) RCDDLM(*CRLF) +
                            DTAFMT(*FIXED)                        /* (PAKaA) */
               MONMSG     MSGID(CPF2817) EXEC(DO)                 /* (PAKaA) */
                 CHGVAR     VAR(&RTN) VALUE('*PGMQ')              /* (PAKaA) */
               ENDDO                                              /* (PAKaA) */

             ENDDO                                                /* (PAKaA) */

             ELSE       CMD(DO)                                   /* (PAKaA) */

             OVRDBF     FILE(INPUT) TOFILE(*LIBL/FTPEXPSCRP) MBR(&MBR)
             OVRDBF     FILE(OUTPUT) TOFILE(*LIBL/FTPEXPLOG) MBR(&MBR)

             FTP        RMTSYS(DUMMYSYSTEM)

             DLTOVR     FILE(INPUT OUTPUT)

/* Now check FTP log file for errors */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Checking FTP log for errors') +
                          TOPGMQ(*EXT) MSGTYPE(*STATUS)

             OVRDBF     FILE(FTPEXPLOG) MBR(&MBR)

             CALL       PGM(FTPCHKLOG) PARM(&TFRNEEDED &MBR &PGM +
                          &RTN &MSGKEY)

             DLTOVR     FILE(FTPEXPLOG)

             ENDDO                                                /* (PAKaA) */

/* If there was an error, just return */

             IF         COND(&RTN = '*PGMQ') THEN(GOTO GETOUT)

/* This is the place to skip to if script had *NO EXPORT* */ /* 414A */

SKIPFTP:

/* We finished without error */

             CHGVAR     VAR(&FINISHED) VALUE('1')
             CHGVAR     VAR(&RTN) VALUE('*OK')

             SELECT                                               /* (DRY A) */
             WHEN       COND(&CLIENT = &DAIRYLAND) THEN(DO)       /* (DRY A) */

               RTVMBRD    FILE(&FILE) MBR(&MBR) RTNLIB(&RUNTIMEENV) /*(DRYaM)*/

/*           Call Dairyland Interface Pgm.                           (DRY A) */
               CHGVAR     VAR(&WHSEN) VALUE(&WHSE)                /* (DRY A) */
               CALL       PGM(&HOSTLIB/BFCEIA01C) PARM(&WHSEN +
                            &MBR &RUNTIMEENV &RTNH)               /* (DRY A) */
               MONMSG     MSGID(CPF0001) EXEC(CHGVAR VAR(&FINISHED) +
                            VALUE('0'))                           /* (DRY A) */
               SELECT                                             /* (DRY A) */
/*             Set flag for export mbr cleanup.                      (DRY A) */
               When       COND(&RTNH *EQ '*OK') THEN(DO)          /* (DRY A) */
                 CHGVAR     VAR(&EXPFLAG) VALUE(&RTNH)            /* (DRY A) */
               ENDDO                                              /* (DRY A) */

/*             Set flag for export failure, leave mbrs behind.       (DRY A) */
               When       COND(&RTNH *NE '*OK') THEN(DO)          /* (DRY A) */
                 CHGVAR     VAR(&FINISHED) VALUE('0')             /* (DRY A) */
               ENDDO                                              /* (DRY A) */
               ENDSELECT                                          /* (DRY A) */

             ENDDO                                                /* (DRY A) */
             ENDSELECT                                            /* (DRY A) */

/*  Clean up before leaving */

             DLTOVR     FILE(*ALL)

/* If we skipped FTP then don't delete members */  /* 414 A */

             IF         COND(&EXPFLAG = '*NOEXP') THEN(GOTO SKIPFTP2)

             RMVM       FILE(&FILE) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (510aA) */
             RMVM       FILE(&FILED) MBR(&MBR)                    /* (650aA) */
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (650aA) */
             IF         COND(&client *eq &packers) THEN(DO)       /* (PAK A) */
               rmvm     FILE(SAPEXP) mbr(&mbr)                    /* (PAK A) */
               MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                            CPF3273 CPF7301 CPF7310)              /* (PAK A) */
             enddo                                                /* (PAK A) */
             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               rmvm     FILE(EXPFADJSPK) mbr(&mbr)                /* (TPCaA) */
               MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                            CPF3273 CPF7301 CPF7310)              /* (TPCaA) */
             enddo                                                /* (TPCaA) */
             RMVM       FILE(FTPEXPSCRP) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (510aA) */
             RMVM       FILE(FTPEXPLOG) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (510aA) */

SKIPFTP2:                                                /* 414A */

             RMVMSG     CLEAR(*ALL)

/*  Send Successful message */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) MSGTYPE(*INFO) KEYVAR(&MSGKEY)

             RETURN

/*  Receive any messages and pass them on  */

 GETOUT:

             CHGVAR     VAR(&ERRCNT) VALUE(&ERRCNT + 1)
             IF COND(&ERRCNT = 3) THEN(GOTO CMDLBL(BOTTOM))

             IF COND(&FINISHED = '0') THEN(DO)
             CHGVAR     VAR(&RTN) VALUE('*PGMQ')
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          TOMSGQ(&FTPERRMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          MSGTYPE(*INFO) KEYVAR(&MSGKEY)
             OVRPRTF    FILE(QPJOBLOG) OUTQ(BFCEXCP)              /* (640 A) */
             DSPJOBLOG  OUTPUT(*PRINT)                            /* (640 A) */
             ENDDO

 NEXTMSG:    DO
             RCVMSG     PGMQ(*SAME *) MSGQ(*PGMQ) MSGDTA(&MSGDTA) +
                          MSGID(&MSGID) SEV(&SEV) +
                          MSGF(&MSGF) MSGFLIB(&MSGFLIB)
             IF         COND(&MSGID *EQ ' ') THEN(GOTO CMDLBL(NOMSG))

               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) MSGTYPE(*COMP)

               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) TOMSGQ(&FTPMSGQ) MSGTYPE(*COMP)

             IF COND(&FINISHED = '0') THEN(DO)
               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) TOMSGQ(&FTPERRMSGQ) +
                          MSGTYPE(*COMP)
             ENDDO

             GOTO       CMDLBL(NEXTMSG)
             ENDDO
 NOMSG:

 BOTTOM:

             IF COND(&TYPE = '0') THEN(DO)

               RCLRSC     LVL(*CALLER)

        /*  Send '*Escape' message to caller */

               IF COND(&FINISHED = '0') THEN(DO)
                 SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Error Occured Processing Member' +
                          *BCAT &MBR) MSGTYPE(*ESCAPE)
               ENDDO

             ENDDO

             ENDPGM
