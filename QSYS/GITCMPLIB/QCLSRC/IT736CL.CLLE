/*-------------------------------------------------------------------*/
/*                                                                   */
/*  IT736CL   FTP export item quantities                             */
/*  06 July 1999                                                     */
/*  Dave Sommerville                                                 */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Revisions:                                                       */
/*                                                                   */
/*    09/13/00  DAS  4.14                                            */
/*      - Revised to use export script EXPFADJ instead of DEFAULT.   */
/*      - Revised to check script for *NO EXPORT*.                   */
/*                                                                   */
/*    12/06/07  MLB  5.10                                            */
/*      - Enh: Added client custom code support to program.          */
/*                                                                   */
/*    01/14/11  MLB  6.40                                            */
/*      - Enh: Added MONMSG's to all RMVM's at end of pgm.           */
/*    08/19/11  MLB  6.40a  P#01049                                  */
/*      - Enh: Revised program to add new export file, EXPFLCNS      */
/*        to export license, lot code information to Host.           */
/*                                                                   */
/*    01/31/13  MLB  6.50                                            */
/*      - Enh: Added 6 new return parms on call to FTPCRTSCRP        */
/*        program to return path statement created for export files. */
/*    02/07/13  MLB  6.50a                                           */
/*      - Enh: Revised program to set TFRNEEDED parm to 1 and add    */
/*        client code for EI to set code to 2.                       */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: City Line                               */
/*                                                                   */
/*    11/02/04  MLB  CTY                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*    12/16/04  MLB  CTYa                                            */
/*      - Revised program to add call to SL726CL to create slot      */
/*        export file SLOT001.csv. This file is then exported        */
/*        back to the host.                                          */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: TPC                                     */
/*                                                                   */
/*    12/06/07  MLB  TPC                                             */
/*      - Revised program to call GETEXP# for use in creating        */
/*        remote export file name.                                   */
/*    12/06/07  MLB  TPCa                                            */
/*      - Revised program to copy data from EXPFQTY TO extended      */
/*        length file, EXPFQTYSPK. Stanpack requires specific        */
/*        length files.                                              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Halsey Foodservice                      */
/*                                                                   */
/*    10/22/09  MLB  HAL                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added Halsey to CTY mod.                                   */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Capitol City Produce                    */
/*                                                                   */
/*    04/27/10  MLB  CCP                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added Capitol to CTY mod.                                  */
/*    05/08/10  MLB  CCPa  per Roxanne.                              */
/*      - Revised program to add call to qry, SLOTTOTAL just         */
/*        before export data file member is removed.                 */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Dairyland                               */
/*                                                                   */
/*    01/14/11  MLB  DRY                                             */
/*      - Revised program to call BFCEIQ01C to process exported      */
/*        warehouse item quantities.                                 */
/*    01/14/11  MLB  DRYa                                            */
/*      - Revised mod, DRY to pass retrieved Dakota data files       */
/*        library name to Host interface program.                    */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: European Imports                        */
/*                                                                   */
/*    07/16/11  MLB  EI                                              */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added EI to CTY mod.                                       */
/*    02/07/13  MLB  EIa                                             */
/*      - Revised program to set TFRNEEDED parm to 2 from 1          */
/*        since EI is exporting both EXPFQTY, EXPFLCNS.              */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Stern Produce                           */
/*                                                                   */
/*    12/07/12  MLB  SPI                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added SPI to CTY mod.                                      */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Get Fresh Sales                         */
/*                                                                   */
/*    01/31/13  MLB  GFS                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added GFS to CTY mod.                                      */
/*    01/31/13  MLB  GFSa                                            */
/*      - Revised program to loop two times. First time, look for    */
/*        items that start with Gxxxxxxxx. Second time, will be to   */
/*        look for items that start with Fxxxxxxxx. The export files */
/*        will be placed into a separate folder for each company.    */
/*        BFCExpPrd/G01 or BFCExpPrd/F02 for production or           */
/*        BFCExpTst/G01 or BFCExpTst/F02 for test.                   */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Cashwa                                  */
/*                                                                   */
/*    02/18/13  LMC  CWD                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added CWD to CTY mod.                                      */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: H&M Wagner                              */
/*                                                                   */
/*    08/25/15  RTR  HMWa                                            */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added CWD to CTY mod.                                      */
/*    12/08/15  RTR  HMWb                                            */
/*      - Revised to NOT have unique file name, and lowercase txt.   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: S.Bertram                               */
/*                                                                   */
/*    09/04/15  RTR  SBR                                             */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added to CTY mod.                                          */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Foods Galore                            */
/*                                                                   */
/*    04/06/16  RTR  FGLa                                            */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*      - Added to CTY mod.                                          */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Colony Foods                            */
/*                                                                   */
/*    04/24/18  RTR  CFIa                                            */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTY.txt.                             */
/*      - Added to CTY mod.                                          */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Accardi Foods                           */
/*                                                                   */
/*    09/06/18  RTR  ACCa                                            */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTY.txt.                             */
/*      - Added to CTY mod.                                          */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Presto Foods                            */
/*                                                                   */
/*    04/01/16  RTR  PFCa                                            */
/*      - Revised program to create remote file name in the          */
/*        following format: EXPFQTYxxxxx.txt where xxxxx is          */
/*        a unique number.                                           */
/*-------------------------------------------------------------------*/
/*  Parameters:                                                      */
/*                                                                   */
/*    &WHSE   -  Warehouse                                           */
/*    &WHDP   -  Warehouse department                                */
/*    &SECTN  -  Section type (F,P,B)                                */
/*    &INCL   -  Include Contract items                              */
/*    &RFLAG  -  Reduce Base item qtys with Contract qtys            */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Notes:                                                           */
/*                                                                   */
/*   This program will create a unique member name and then create   */
/*   new members in all of the export files and in the FTP script    */
/*   and log files.                                                  */
/*                                                                   */
/*   The remote file name will start with the member name and        */
/*   have an extension of QTY.                                       */
/*                                                                   */
/*-------------------------------------------------------------------*/

 IT723CL:    PGM        PARM(&WHSE &WHDP &SECTN &INCL &RFLAG)

/*-------------------------------------------------------------------*/
/*  Constant declarations                                            */
/*-------------------------------------------------------------------*/

  /* Client ID's.    */                                           /* (510 A) */

             DCL        VAR(&CAPITOLCTY) TYPE(*CHAR) LEN(10) +
                          VALUE('CAPITOLCTY')                     /* (CCP A) */
             DCL        VAR(&CITYLINE) TYPE(*CHAR) LEN(8) +
                          VALUE('CITYLINE')                       /* (CTY A) */
             DCL        VAR(&DAIRYLAND) TYPE(*CHAR) LEN(10) +
                          VALUE('DAIRYLAND')                      /* (DRY A) */
             DCL        VAR(&EuroImport) TYPE(*CHAR) LEN(10) +
                          VALUE('EI')                             /* (EI  A) */
             DCL        VAR(&GETFRESH) TYPE(*CHAR) LEN(10) +
                          VALUE('GETFRESH')                       /* (GFS A) */
             DCL        VAR(&HALSEY) TYPE(*CHAR) LEN(10) +
                          VALUE('HALSEY')                         /* (HAL A) */
             DCL        VAR(&STERN)   TYPE(*CHAR) LEN(10) +
                          VALUE('STERN')                          /* (SPI A) */
             DCL        VAR(&TPC)     TYPE(*CHAR) LEN(8) +
                          VALUE('TPC')                            /* (TPC A) */
             DCL        VAR(&CASHWA)  TYPE(*CHAR) LEN(10) +
                          VALUE('CASHWA')                         /* (CWD A) */
             DCL        VAR(&HMWAGNER) TYPE(*CHAR) LEN(10) +
                          VALUE('HMWAGNER')                       /* (HMWaA) */
             DCL        VAR(&SBERTRAM)  TYPE(*CHAR) LEN(10) +
                          VALUE('SBERTRAM')                       /* (SBR A) */
             DCL        VAR(&FOODSGAL) TYPE(*CHAR) LEN(10) +
                          VALUE('FOODSGALOR')                     /* (FGLaA) */
             DCL        VAR(&COLONY) TYPE(*CHAR) LEN(10) +
                          VALUE('COLONYFOOD')                     /* (CFIaA) */
             DCL        VAR(&ACCARDI) TYPE(*CHAR) LEN(10) +
                          VALUE('ACCARDI')                        /* (ACCaA) */
             DCL        VAR(&PRESTO)  TYPE(*CHAR) LEN(10) +
                          VALUE('PRESTOFOOD')                     /* (PFCaA) */

  /* Export program. */

             DCL        VAR(&EXPPGM) TYPE(*CHAR) LEN(8) +
                          VALUE(IT736)
             DCL        VAR(&EXPCSV) TYPE(*CHAR) LEN(8) +
                          VALUE(IT741CL)                          /* (HMWaA) */

  /* Export script */  /* 414A */

             DCL        VAR(&EXPSCRP) TYPE(*CHAR) LEN(8) +
                          VALUE(EXPFQTY)

  /* Messag queues */

             DCL        VAR(&FTPMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPQTY')
             DCL        VAR(&FTPERRMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPQTYERR')

  /* Import files */

             DCL        VAR(&FILE) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPFQTY')
             DCL        VAR(&FILED) TYPE(*CHAR) LEN(10) +
                          VALUE('EXPFLCNS')                       /* (640aA) */

  /* Number of 'Transfer complete' messages to look for */

/*           DCL        VAR(&TFRNEEDED) TYPE(*DEC) LEN(1 0) VALUE(1)   (640aD)*/
/*           DCL        VAR(&TFRNEEDED) TYPE(*DEC) LEN(1 0) VALUE(2) /*(650aD)*/
             DCL        VAR(&TFRNEEDED) TYPE(*DEC) LEN(1 0) VALUE(1) /*(650aM)*/

/*-------------------------------------------------------------------*/
/*  Field declarations                                               */
/*-------------------------------------------------------------------*/

             DCL        VAR(&client)     TYPE(*CHAR) LEN(10)      /* (500 A) */
             DCL        VAR(&clientloc)  TYPE(*CHAR) LEN(10)      /* (500 A) */
             DCL        VAR(&CmpId)      TYPE(*CHAR) LEN(1) +
                                              VALUE('G')          /* (GFSaA) */
             DCL        VAR(&CmpNbr)     TYPE(*CHAR) LEN(2) +
                                              VALUE('01')         /* (GFSaA) */
             DCL        VAR(&ERRCNT)     TYPE(*DEC)  LEN(1 0)
             DCL        VAR(&EXIST)      TYPE(*LGL)
             DCL        VAR(&EXPFNBR)    TYPE(*CHAR) LEN(1)       /* (TPC A) */
             DCL        VAR(&EXPFLAG)    TYPE(*CHAR) LEN(8) /* 414A */
             DCL        VAR(&EXPTYPE)    TYPE(*CHAR) LEN(8)
             DCL        VAR(&FINISHED)   TYPE(*LGL)
             DCL        VAR(&HOSTLIB)    TYPE(*CHAR) LEN(10) +
                                              VALUE('DARLIB_TST') /* (DRY A) */
             DCL        VAR(&INCL)       TYPE(*CHAR) LEN(1)
             DCL        VAR(&JOB)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&LCLFILEC)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILED)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILEH)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILET)   TYPE(*CHAR) LEN(33)
             DCL        VAR(&LCLFILEB)   TYPE(*CHAR) LEN(33)      /* (640aA) */
             DCL        VAR(&LCLFILEE)   TYPE(*CHAR) LEN(33)      /* (640aA) */
             DCL        VAR(&LCLFILEL)   TYPE(*CHAR) LEN(33)      /* (640aA) */
             DCL        VAR(&LCLFILEP)   TYPE(*CHAR) LEN(33)      /* (640aA) */
             DCL        VAR(&LCLFILEA)   TYPE(*CHAR) LEN(33)      /* (640aA) */
             DCL        VAR(&LCLFILEF)   TYPE(*CHAR) LEN(33)      /* (650 A) */
             DCL        VAR(&LIBC)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBD)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBH)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&LIBT)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBB)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBE)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBL)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBP)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&LIBA)       TYPE(*CHAR) LEN(10)      /* (640aA) */
             DCL        VAR(&Loop)       TYPE(*DEC)  LEN(2 0) +
                                              VALUE(01)           /* (GFSaA) */
             DCL        VAR(&MBR)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA)     TYPE(*CHAR) LEN(256)
             DCL        VAR(&MSGF)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB)    TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID)      TYPE(*CHAR) LEN(7)
             DCL        VAR(&MSGKEY)     TYPE(*CHAR) LEN(4)
             DCL        VAR(&NXTNUM)     TYPE(*DEC)  LEN(7)
             DCL        VAR(&NXTNUMA)    TYPE(*CHAR) LEN(7)
             DCL        VAR(&PGM)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&PATHH)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHD)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHC)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHT)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHB)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHE)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHL)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHP)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHA)      TYPE(*CHAR) LEN(45)      /* (640aA) */
             DCL        VAR(&PATHF)      TYPE(*CHAR) LEN(45)      /* (650 A) */
             DCL        VAR(&QRYSLT)     TYPE(*CHAR) LEN(2000)
             DCL        VAR(&QUOTE)      TYPE(*CHAR) LEN(1) VALUE('"')
             DCL        VAR(&RFLAG)      TYPE(*CHAR) LEN(1)
             DCL        VAR(&RMTFILEC)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILED)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILEH)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILET)   TYPE(*CHAR) LEN(16)
             DCL        VAR(&RMTFILEB)   TYPE(*CHAR) LEN(16)      /* (640aA) */
             DCL        VAR(&RMTFILEE)   TYPE(*CHAR) LEN(16)      /* (640aA) */
             DCL        VAR(&RMTFILEL)   TYPE(*CHAR) LEN(16)      /* (640aA) */
             DCL        VAR(&RMTFILEP)   TYPE(*CHAR) LEN(16)      /* (640aA) */
             DCL        VAR(&RMTFILEA)   TYPE(*CHAR) LEN(20)      /* (640aA) */
             DCL        VAR(&RMTFILEF)   TYPE(*CHAR) LEN(33)      /* (650 A) */
             DCL        VAR(&RTN)        TYPE(*CHAR) LEN(8)
             DCL        VAR(&RTNH)       TYPE(*CHAR) LEN(8)       /* (DRY A) */
             DCL        VAR(&RUNTIMEENV) TYPE(*CHAR) LEN(10)      /* (DRYaM) */
             DCL        VAR(&SECTN)      TYPE(*CHAR) LEN(1)
             DCL        VAR(&SEV)        TYPE(*DEC)  LEN(2 0)
             DCL        VAR(&SHORTNUMA)  TYPE(*CHAR) LEN(5)       /* (CTY A) */
             DCL        VAR(&TYPE)       TYPE(*CHAR) LEN(1)
             DCL        VAR(&USER)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&WHDP)       TYPE(*CHAR) LEN(5)
             DCL        VAR(&WHSE)       TYPE(*CHAR) LEN(3)
             DCL        VAR(&WHSEN)      TYPE(*DEC)  LEN(3 0)     /* (DRY A) */

             MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(GETOUT))

/* Get Client ID */                                               /* (510 A) */
             CALL       PGM(GETCLIENT) PARM(&CLIENT &CLIENTLOC)   /* (510 A) */

             CHGVAR     VAR(&ERRCNT) VALUE(0)
             CHGVAR     VAR(&EXIST) VALUE('0')
             CHGVAR     VAR(&FINISHED) VALUE('0')

/*-------------------------------------------------------------------*/
/*  Main line                                                        */
/*-------------------------------------------------------------------*/

             CHGVAR     VAR(&PGM) VALUE('IT736CL')

/* Get job information */

             RTVJOBA    JOB(&JOB) USER(&USER) TYPE(&TYPE)

/* Create slot export file SLOT001.csv and FTP file to host.      /* (CTYaA) */

             IF         COND(&CLIENT *EQ &CITYLINE) THEN(DO)      /* (CTYaA) */
               CALL       PGM(SL726CL) PARM('001')                /* (CTYaA) */
             ENDDO                                                /* (CTYaA) */

/* Create member name */

             CALL       PGM(PIRFTP#) PARM(&NXTNUM)
             CHGVAR     VAR(&NXTNUMA) VALUE(&NXTNUM)
             CHGVAR     VAR(&MBR) VALUE('Q' *CAT %SST(&WHSE 2 2) +
                          *CAT &NXTNUMA)

/* Create members for export files */

             ADDPFM     FILE(&FILE) MBR(&MBR)
/*  Add member to extended length export file for TPC.               (TPCaA) */
             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               ADDPFM     FILE(EXPFQTYSPK) MBR(&MBR)              /* (TPCaA) */
             ENDDO                                                /* (TPCaA) */
             ADDPFM     FILE(&FILED) MBR(&MBR)                    /* (640aA) */

             RMVMSG     CLEAR(*ALL)

SELECTRCDS:
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Exporting quantities into +
                          member' *BCAT &MBR *TCAT ' in qty export +
                          files') TOPGMQ(*EXT) MSGTYPE(*STATUS)


/*  Call program to move route to export files */

             OVRDBF     FILE(&FILE) MBR(&MBR)
             OVRDBF     FILE(&FILED) MBR(&MBR)                    /* (640aA) */
             IF         COND(&CLIENT = &GETFRESH) THEN(DO)        /* (GFS A) */
               CALL       PGM(&EXPPGM) PARM(&WHSE &WHDP &SECTN &INCL &RFLAG +
                                            &CMPID)               /* (GFS A) */
             ENDDO                                                /* (GFS A) */
             ELSE       CMD(DO)                                   /* (GFS A) */

             CALL       PGM(&EXPPGM) PARM(&WHSE &WHDP &SECTN &INCL &RFLAG)
             ENDDO                                                /* (GFS A) */

     /* For HM Wagner, export as CSV */  /* HMWa */
         /*  IF         COND(&CLIENT *EQ &HMWAGNER) THEN(DO)      /* (HMWaA) */
         /*    CALL       PGM(&EXPCSV) PARM(&WHSE)                /* (HMWaA) */
         /*  ENDDO                                                /* (HMWaA) */

             DLTOVR     FILE(&FILE)
             DLTOVR     FILE(&FILED)                              /* (640aA) */

             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               CPYF       FROMFILE(&FILE) TOFILE(EXPFQTYSPK) +
                            FROMMBR(&MBR) TOMBR(&MBR) +
                            MBROPT(*REPLACE) FMTOPT(*MAP)         /* (TPCaA) */
               MONMSG     MSGID(CPF2869 CPF2817)                  /* (TPCaA) */
             enddo                                                /* (TPCaA) */

/* Check if we should export file to host system */  /* 414 A */

             OVRDBF     FILE(FTPEXPDFT) MBR(&EXPSCRP)
             CALL       PGM(FTPCHKSCR) PARM(&EXPFLAG)
             DLTOVR     FILE(FTPEXPDFT)
             IF         COND(&EXPFLAG = '*NOEXP') THEN(GOTO SKIPFTP)

/* Create members for ftp files */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Creating export script from +
                          member' *BCAT &MBR) TOPGMQ(*EXT) +
                          MSGTYPE(*STATUS)

             ADDPFM     FILE(FTPEXPLOG) MBR(&MBR)
             MONMSG     MSGID(CPF7306) EXEC(DO)                   /* (GFS A) */
               CLRPFM     FILE(FTPEXPLOG) MBR(&MBR)               /* (GFS A) */
             ENDDO                                                /* (GFS A) */
             CPYSRCF    FROMFILE(FTPEXPDFT) TOFILE(FTPEXPSCRP) +
                          FROMMBR(DEFAULT) TOMBR(&MBR)

/* Retrieve library names for files */

             RTVMBRD    FILE(&FILE) MBR(&MBR) RTNLIB(&LIBH)
             RTVMBRD    FILE(&FILED) MBR(&MBR) RTNLIB(&LIBD)      /* (640aA) */

/* Create FTP local and remote file names */

             if cond(&client = &TPC) THEN(DO)                     /* (TPCaA) */
               CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                            '/EXPFQTYSPK.' *CAT &MBR)             /* (TPCaA) */
             ENDDO                                                /* (TPCaA) */
             else cmd(DO)                                         /* (TPCaA) */

             CHGVAR     VAR(&LCLFILEH) VALUE(&LIBH *TCAT +
                          '/EXPFQTY.' *CAT &MBR)
             CHGVAR     VAR(&LCLFILED) VALUE(&LIBH *TCAT +
                          '/EXPFLCNS.' *CAT &MBR)                 /* (640aA) */
             ENDDO                                                /* (TPCaA) */

    /*       CHGVAR     VAR(&RMTFILEH) VALUE(&MBR *TCAT '.Qty')  */

             IF COND(&CLIENT *EQ &CITYLINE +
                 *OR &CLIENT *EQ &CAPITOLCTY +
                 *OR &CLIENT *EQ &EUROIMPORT +
                 *OR &CLIENT *EQ &STERN +
                 *OR &CLIENT *EQ &GETFRESH +
                 *OR &CLIENT *EQ &CASHWA +
                 *OR &CLIENT *EQ &SBERTRAM +
                 *OR &CLIENT *EQ &FOODSGAL +
                 *OR &CLIENT *EQ &PRESTO +
                 *OR &CLIENT *EQ &HALSEY) THEN(DO)                /* (GFS M) */
               CHGVAR     VAR(&SHORTNUMA) VALUE(%SST(&NXTNUMA 4 4)) +
                                                                  /* (CTY A) */
               CHGVAR     VAR(&RMTFILEH) VALUE('EXPFQTY' *CAT &SHORTNUMA +
                                                 *Tcat '.TXT')    /* (CTY A) */
               CHGVAR     VAR(&RMTFILED) VALUE('EXPFLCNS' *CAT &SHORTNUMA +
                                                 *Tcat '.TXT')    /* (640aA) */
             ENDDO                                                /* (CTY A) */

             ELSE       CMD(IF COND(&CLIENT *EQ &TPC) THEN(DO))   /* (TPC M) */
               CALL       PGM(GETEXP#) PARM('*INVCNT' &EXPFNBR)   /* (TPC A) */
               CHGVAR     VAR(&RMTFILEH) VALUE('wmid' *CAT &expfnbr) +
                                                                  /* (TPC A) */
             ENDDO                                                /* (TPC A) */
             else cmd(DO)                                         /* (TPC A) */

             CHGVAR     VAR(&RMTFILEH) VALUE('EXPFQTY' *CAT +
                          %SST(&WHSE 2 2) *CAT '.Txt')
             CHGVAR     VAR(&RMTFILED) VALUE('EXPFLCNS' *CAT +
                          %SST(&WHSE 2 2) *CAT '.Txt')            /* (640aA) */
             ENDDO                                                /* (TPC A) */

             IF COND(&CLIENT *EQ &COLONY) THEN(DO)                /* (CFIaA) */
               CHGVAR     VAR(&RMTFILEH) VALUE('EXPFQTY' *CAT '.TXT')
                                                                  /* (CFIaA) */
             ENDDO                                                /* (CFIaA) */

             IF COND(&CLIENT *EQ &HMWAGNER) THEN(DO)              /* (HMWbA) */
             CHGVAR     VAR(&RMTFILEH) VALUE('EXPFQTY.txt')       /* (HMWbA) */
             CHGVAR     VAR(&RMTFILED) VALUE('EXPFLCNS.txt')      /* (HMWbA) */
             ENDDO                                                /* (HMWbA) */

             IF COND(&CLIENT *EQ &ACCARDI) THEN(DO)               /* (ACCaA) */
               CHGVAR     VAR(&RMTFILEH) VALUE('EXPFQTY' *CAT '.TXT')
                                                                  /* (ACCaA) */
             ENDDO                                                /* (ACCaA) */

/* Call program to create script */

             CHGVAR     VAR(&EXPTYPE) VALUE('*QTY')
             OVRDBF     FILE(FTPEXPSCRP) MBR(&MBR)

             SELECT                                               /* (GFSaA) */
             WHEN       COND(&CLIENT = &GETFRESH) THEN(DO)        /* (GFSaA) */
               CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +
                            &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +
                            &RMTFILED &RMTFILEC &RMTFILET &LCLFILEB +
                            &RMTFILEB &LCLFILEE &RMTFILEE &PATHH +
                            &PATHD &PATHC &PATHT &PATHB &PATHE +
                            &LCLFILEL &RMTFILEL &PATHL +
                            &LCLFILEP &RMTFILEP &PATHP +
                            &LCLFILEA &RMTFILEA &PATHA +
                            &LCLFILEF &RMTFILEF &PATHF +
                            &Cmpid &CmpNbr)                       /* (GFSaA) */
             enddo                                                /* (GFSaA) */
             OTHERWISE  CMD(DO)                                   /* (GFSaA) */
/*           CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +
                          &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +
                          &RMTFILED &RMTFILEC &RMTFILET)             (640aD) */
/*           CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +
                          &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +
                          &RMTFILED &RMTFILEC &RMTFILET &LCLFILEB +
                          &RMTFILEB &LCLFILEE &RMTFILEE &PATHH +
                          &PATHD &PATHC &PATHT &PATHB &PATHE +
                          &LCLFILEL &RMTFILEL &PATHL +
                          &LCLFILEP &RMTFILEP &PATHP +
                          &LCLFILEA &RMTFILEA &PATHA)             /* (650 D) */
               CALL       PGM(FTPCRTSCRP) PARM(&EXPTYPE &LCLFILEH +
                            &LCLFILED &LCLFILEC &LCLFILET &RMTFILEH +
                            &RMTFILED &RMTFILEC &RMTFILET &LCLFILEB +
                            &RMTFILEB &LCLFILEE &RMTFILEE &PATHH +
                            &PATHD &PATHC &PATHT &PATHB &PATHE +
                            &LCLFILEL &RMTFILEL &PATHL +
                            &LCLFILEP &RMTFILEP &PATHP +
                            &LCLFILEA &RMTFILEA &PATHA +
                            &LCLFILEF &RMTFILEF &PATHF)           /* (650 M) */
             ENDDO                                                /* (GFSaA) */
             ENDSELECT                                            /* (GFSaA) */

             DLTOVR     FILE(FTPEXPSCRP)

             RMVMSG     CLEAR(*ALL)

/* Execute FTP */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export files using FTP for +
                          member' *BCAT &MBR) TOPGMQ(*EXT) +
                          MSGTYPE(*STATUS)

             OVRDBF     FILE(INPUT) TOFILE(*LIBL/FTPEXPSCRP) MBR(&MBR)
             OVRDBF     FILE(OUTPUT) TOFILE(*LIBL/FTPEXPLOG) MBR(&MBR)

             FTP        RMTSYS(DUMMYSYSTEM)

             DLTOVR     FILE(INPUT OUTPUT)

/* Now check FTP log file for errors */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Checking FTP log for errors') +
                          TOPGMQ(*EXT) MSGTYPE(*STATUS)

             OVRDBF     FILE(FTPEXPLOG) MBR(&MBR)

             IF         COND(&CLIENT = &EuroImport) THEN(DO)      /* (EIb A) */
               CHGVAR     VAR(&TFRNEEDED) VALUE(2)                /* (EIb A) */
             Enddo                                                /* (EIb A) */
             CALL       PGM(FTPCHKLOG) PARM(&TFRNEEDED &MBR &PGM +
                          &RTN &MSGKEY)

             DLTOVR     FILE(FTPEXPLOG)

/* If there was an error, just return */

             IF         COND(&RTN = '*PGMQ') THEN(GOTO GETOUT)

/* This is the place to skip to if script had *NO EXPORT* */ /* 414A */

             SELECT                                               /* (GFSaA) */
             WHEN       COND(&CLIENT = &Getfresh) THEN(DO)        /* (GFSaA) */

               CHGVAR     VAR(&LOOP) VALUE(&Loop + 1)             /* (GFSaA) */
               Select                                             /* (GFSaA) */
               When       COND(&LOOP = 2) THEN(DO)                /* (GFSaA) */
                 CLOF       OPNID(PIRITEM)                        /* (GFSaA) */
                 MONMSG     MSGID(CPF4519 CPF4520)                /* (GFSaA) */
                 CLOF       OPNID(PIRITEM1)                       /* (GFSaA) */
                 MONMSG     MSGID(CPF4519 CPF4520)                /* (GFSaA) */

                 CLRPFM     FILE(&FILE) MBR(&MBR)                 /* (GFSaA) */

                 CHGVAR     VAR(&CMPID) VALUE('F')                /* (GFSaA) */
                 CHGVAR     VAR(&CMPNBR) VALUE('02')              /* (GFSaA) */
                 GOTO       CMDLBL(SELECTRCDS)                    /* (GFSaA) */
               ENDDO                                              /* (GFSaA) */
               ENDSELECT                                          /* (GFSaA) */
             ENDDO                                                /* (GFSaA) */
             ENDSELECT                                            /* (GFSaA) */

SKIPFTP:

/* We finished without error */

             CHGVAR     VAR(&FINISHED) VALUE('1')
             CHGVAR     VAR(&RTN) VALUE('*OK')

             SELECT                                               /* (DRY A) */
             WHEN       COND(&CLIENT = &DAIRYLAND) THEN(DO)       /* (DRY A) */

               RTVMBRD    FILE(&FILE) MBR(&MBR) RTNLIB(&RUNTIMEENV) /*(DRYaM)*/

/*           Call Dairyland Interface Pgm.                           (DRY A) */
               CHGVAR     VAR(&WHSEN) VALUE(&WHSE)                /* (DRY A) */
               CALL       PGM(&HOSTLIB/BFCEIQ01C) PARM(&WHSEN +
                            &MBR &RUNTIMEENV &RTNH)               /* (DRY A) */
               MONMSG     MSGID(CPF0001) EXEC(CHGVAR VAR(&FINISHED) +
                            VALUE('0'))                           /* (DRY A) */
               SELECT                                             /* (DRY A) */
/*             Set flag for export mbr cleanup.                      (DRY A) */
               When       COND(&RTNH *EQ '*OK') THEN(DO)          /* (DRY A) */
                 CHGVAR     VAR(&EXPFLAG) VALUE(&RTNH)            /* (DRY A) */
               ENDDO                                              /* (DRY A) */

/*             Set flag for export failure, leave mbrs behind.       (DRY A) */
               When       COND(&RTNH *NE '*OK') THEN(DO)          /* (DRY A) */
                 CHGVAR     VAR(&FINISHED) VALUE('0')             /* (DRY A) */
               ENDDO                                              /* (DRY A) */
               ENDSELECT                                          /* (DRY A) */

             ENDDO                                                /* (DRY A) */
             ENDSELECT                                            /* (DRY A) */
/*                                                                   (CCPaA) */
             IF         COND(&CLIENT = &CAPITOLCTY) THEN(DO)      /* (CCPaA) */
               OVRDBF     FILE(&FILE) MBR(&MBR)                   /* (CCPaA) */
               RUNQRY     QRY(EXPITEMTOT)                         /* (CCPaA) */
             Enddo                                                /* (CCPaA) */

/*  Clean up before leaving */

             DLTOVR     FILE(*ALL)

/* If we skipped FTP then don't delete members */  /* 414 A */

             IF         COND(&EXPFLAG = '*NOEXP') THEN(GOTO SKIPFTP2)

             RMVM       FILE(&FILE) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (TPCaA) */
             RMVM       FILE(&FILED) MBR(&MBR)                    /* (640aA) */
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (640aA) */
             IF         COND(&client *eq &TPC) THEN(DO)           /* (TPCaA) */
               rmvm     FILE(EXPFQTYSPK) mbr(&mbr)                /* (TPCaA) */
               MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                            CPF3273 CPF7301 CPF7310)              /* (TPCaA) */
             enddo                                                /* (TPCaA) */
             RMVM       FILE(FTPEXPSCRP) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (640 A) */
             RMVM       FILE(FTPEXPLOG) MBR(&MBR)
             MONMSG     MSGID(CPF320A CPF320B CPF3203 CPF3220 +
                          CPF3273 CPF7301 CPF7310)                /* (640 A) */

SKIPFTP2:                                                /* 414A */

             RMVMSG     CLEAR(*ALL)

/*  Send Successful message */

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export successful for member' +
                          *BCAT &MBR) MSGTYPE(*INFO) KEYVAR(&MSGKEY)

             RETURN

/*  Receive any messages and pass them on  */

 GETOUT:

             CHGVAR     VAR(&ERRCNT) VALUE(&ERRCNT + 1)
             IF COND(&ERRCNT = 3) THEN(GOTO CMDLBL(BOTTOM))

             IF COND(&FINISHED = '0') THEN(DO)
             CHGVAR     VAR(&RTN) VALUE('*PGMQ')
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          TOMSGQ(&FTPERRMSGQ) MSGTYPE(*INFO)

             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Export FAILED, see following +
                          messages. Member' *BCAT &MBR *TCAT '.') +
                          MSGTYPE(*INFO) KEYVAR(&MSGKEY)
             ENDDO

 NEXTMSG:    DO
             RCVMSG     PGMQ(*SAME *) MSGQ(*PGMQ) MSGDTA(&MSGDTA) +
                          MSGID(&MSGID) SEV(&SEV) +
                          MSGF(&MSGF) MSGFLIB(&MSGFLIB)
             IF         COND(&MSGID *EQ ' ') THEN(GOTO CMDLBL(NOMSG))

               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) MSGTYPE(*COMP)

               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) TOMSGQ(&FTPMSGQ) MSGTYPE(*COMP)

             IF COND(&FINISHED = '0') THEN(DO)
               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) TOMSGQ(&FTPERRMSGQ) +
                          MSGTYPE(*COMP)
             ENDDO

             GOTO       CMDLBL(NEXTMSG)
             ENDDO
 NOMSG:

 BOTTOM:

             IF COND(&TYPE = '0') THEN(DO)

               RCLRSC     LVL(*CALLER)

        /*  Send '*Escape' message to caller */

               IF COND(&FINISHED = '0') THEN(DO)
                 SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Error Occured Processing Member' +
                          *BCAT &MBR) MSGTYPE(*ESCAPE)
               ENDDO

             ENDDO

             ENDPGM
