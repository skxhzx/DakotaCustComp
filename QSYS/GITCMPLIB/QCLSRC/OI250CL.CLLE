/*-------------------------------------------------------------------*/
/*   Copyright (C) 2006 BFC Software, Inc. - All Rights Reserved     */
/*   BFC Software, Inc.                                              */
/*   245 W. Roosevelt Rd.  Bldg 8, Suite 51                          */
/*   West Chicago, IL  60185                                         */
/*   (630) 562-0375                                                  */
/*-------------------------------------------------------------------*/
/*                                                                   */
/*  OI250CL   Import FTP orders                                      */
/*  26 February 1999                                                 */
/*  Dave Sommerville                                                 */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Revisions:                                                       */
/*                                                                   */
/*    05/19/00  DAS  4.14                                            */
/*      - Added &RTID field definition.                              */
/*      - Added &RTID to the following:                              */
/*          - OI255/RH220 program calls                              */
/*                                                                   */
/*    06/05/02  DAS  4.16                                            */
/*      - Added *SINGLE orders.                                      */
/*                                                                   */
/*    06/13/02  DAS  4.16a                                           */
/*      - Revised to allow up to 10 route id's to be passed back     */
/*        by OR255 for willcall routes. This allows multiplet orders */
/*        to be sent and picked separately.                          */
/*      - Created willcall loop to call RH220.                       */
/*                                                                   */
/*    09/29/05  MLB  5.00                                            */
/*      - Enh: Revised program to remove ovrprtf cmd to file         */
/*        oi255pr. Override will be processed from within OI255.     */
/*    02/24/06  MLB  5.00a                                           */
/*      - Enh: Added new file, IMPFORDM to program.                  */
/*                                                                   */
/*    06/09/06  MLB  5.10                                            */
/*      - Enh: Added new file, IMPFORDHM to program. This file will  */
/*        be treated as an optional file.                            */
/*    06/24/06  MLB  5.10a                                           */
/*      - Enh: Add client custom code support to program.            */
/*                                                                   */
/*    10/30/09  MLB  5.30                                            */
/*      - Enh: Added DSPJOBLOG *PRINT when Finished = '0' so we      */
/*        have a more complete picture of all the error messages.    */
/*                                                                   */
/*    01/31/13  RBD  6.50                                            */
/*      - Enh: Added new file, IMPFORSF to program. This file will  */
/*        be treated as an optional file.                            */
/*                                                                   */
/*    12/11/19  RTR  7.30a                                           */
/*      - Enh: Changed to do conversion to Staging.                  */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Packer's Provision                      */
/*                                                                   */
/*  06/24/06  MLB  PAK                                               */
/*    - Revised program to add parm on call to OI255 to test         */
/*      whether purchase orders should be extracted and imported     */
/*      into Dakota. When delivery type=ZPLF the order is also       */
/*      converted to purchase order.                                 */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Client Custom Revisions: Glazier Foods                           */
/*                                                                   */
/*  07/05/10  MLB  GLZ                                               */
/*    - Revised program to process new order type *IWT.              */
/*      Modified to process order all the way to label               */
/*      printing.                                                    */
/*    - Mod was not wrapped around client code because no other      */
/*      will send the *IWT code.                                     */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Parameters:                                                      */
/*                                                                   */
/*    &MBR   -  Member to create. Must start with alpha character.   */
/*    &OTYPE -  *ROUTE  Route of customer orders                     */
/*              *WILL   Willcall order                               */
/*              *SINGLE Single order           4.16A                 */
/*    &RUN   -  *INTER  Run interactively                            */
/*              *JOBQ   Run on Jobq                                  */
/*    &OUTQ  -  Printer output queue (Default is *JOB)               */
/*    &FORM  -  Printer form (Default is *STD)                       */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  FTP command sequence                                             */
/*                                                                   */
/*    PUT localordh PIRFTPF/IMPFORDH.N123456789                      */
/*    PUT localordd PIRFTPF/IMPFORDHM.N123456789             (510 A) */
/*    PUT localordd PIRFTPF/IMPFORDD.N123456789                      */
/*    PUT localordd PIRFTPF/IMPFORDM.N123456789              (500aA) */
/*    PUT localordd PIRFTPF/IMPFORSF.N123456789              (650 A) */
/*    QUOTE RCMD PIRFTP/FTPLIBL *PROD                                */
/*    QUOTE RCMD OI250CL (R123456789 *ROUTE *INTER *JOB *STD)        */
/*                                                                   */
/*     where R123456789 is the unique member name                    */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Member name notes                                                */
/*                                                                   */
/*   - Member name must be unique for each PUT operation.  If not,   */
/*     PUT will delete any existing information and replace it       */
/*     with the new information.                                     */
/*                                                                   */
/*   - The first character of the member name must be an alpha       */
/*     character.  It is suggested that 'R' be used for a normal     */
/*     route of orders and 'W' be used for a will call order.        */
/*                                                                   */
/*   - Do not use date and/or time to make the member name unique.   */
/*     There is always a possibility that two terminals processing   */
/*     will call orders will generate the same date/time.            */
/*                                                                   */
/*-------------------------------------------------------------------*/
/*  Notes:                                                           */
/*                                                                   */
/*   A single member should contain either one route for a single    */
/*   warehouse or one will call order.                               */
/*                                                                   */
/*   FTP orders are sent into a special FTP import file.  Unlike     */
/*   the normal import where everything goes into a single member,   */
/*   the FTP import files contain multiple members.  The member      */
/*   that is used for a particular session is sent in as a           */
/*   parameter.                                                      */
/*                                                                   */
/*   This is designed to be called from the command line or as a     */
/*   remote command using the FTP Quote command. When called from    */
/*   the command line the user will be prompted for the necessary    */
/*   parameters.  When called as a remote command, the necessary     */
/*   parameters are passed in.                                       */
/*                                                                   */
/*   Normally this program is called as a remote FTP command after   */
/*   the data has been sent.  The option to call this from the       */
/*   command line is mainly for testing and the instances when       */
/*   something goes wrong with the import process.                   */
/*                                                                   */
/*   When called as a remote FTP command the job 'Type' is '0'       */
/*   which means it looks like a batch jobe.                         */
/*                                                                   */
/*-------------------------------------------------------------------*/

 OI250CL:    PGM        PARM(&MBR &OTYPE &RUN &OUTQ &FORM)

/*-------------------------------------------------------------------*/
/*  Constant declarations                                            */
/*-------------------------------------------------------------------*/

  /* Name of this program. */

             DCL        VAR(&SBMPGM) TYPE(*CHAR) LEN(10) +
                          VALUE(OI250CL)

  /* Option program. */

             DCL        VAR(&OPTPGM) TYPE(*CHAR) LEN(8) +
                          VALUE(OI250)

  /* Report program and printer file names. */

         /*  DCL        VAR(&RPTPGM) TYPE(*CHAR) LEN(8) +
                          VALUE(OI255)                               (730aD) */
             DCL        VAR(&RPTPGM) TYPE(*CHAR) LEN(8) +
                          VALUE(OI257)                            /* (730aM) */
             DCL        VAR(&PRTF) TYPE(*CHAR) LEN(10) +
                          VALUE(OI255PR)

  /* Client ID's.                                                    (510aA) */

             DCL        VAR(&Glazier) TYPE(*CHAR) LEN(10) +
                          VALUE(GLAZIER)                          /* (GLZ A) */
             DCL        VAR(&packers) TYPE(*CHAR) LEN(10) +
                          VALUE(PACKERS)                          /* (PAK A) */

  /* Informational messages */

             DCL        VAR(&CANCELMSG) TYPE(*CHAR) LEN(60) +
                          VALUE('Import/pick FTP orders')
             DCL        VAR(&WORKINGMSG) TYPE(*CHAR) LEN(60) +
                          VALUE('Importing/Picking FTP orders')

  /* Message queues */

             DCL        VAR(&FTPMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPORD')
             DCL        VAR(&FTPERRMSGQ) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPORDERR')

  /* Import files */

             DCL        VAR(&FILEH) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPFORDH')
             DCL        VAR(&FILEHM) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPFORDHM')                      /* (510 A) */
             DCL        VAR(&FILED) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPFORDD')
             DCL        VAR(&FILEM) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPFORDM')                       /* (500aA) */
             DCL        VAR(&FILESF) TYPE(*CHAR) LEN(10) +
                          VALUE('IMPFORSF')                       /* (650 A) */

/*-------------------------------------------------------------------*/
/*  Field declarations                                               */
/*-------------------------------------------------------------------*/

             DCL        VAR(&client)     TYPE(*CHAR) LEN(10)      /* (510aA) */
             DCL        VAR(&clientloc)  TYPE(*CHAR) LEN(10)      /* (510aA) */
             DCL        VAR(&cmd)        TYPE(*char) LEN(10)      /* (PAK A) */
             DCL        VAR(&COUNT)      TYPE(*DEC)  LEN(2 0)  /* 416aA */
             DCL        VAR(&ERRCNT)     TYPE(*DEC)  LEN(1 0)
             DCL        VAR(&EXIST)      TYPE(*LGL)
             DCL        VAR(&FINISHED)   TYPE(*LGL)
             DCL        VAR(&FORM)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&import_po)  TYPE(*CHAR) LEN(04)      /* (PAK A) */
             DCL        VAR(&JOB)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&MBR)        TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGDTA)     TYPE(*CHAR) LEN(256)
             DCL        VAR(&MSGF)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGFLIB)    TYPE(*CHAR) LEN(10)
             DCL        VAR(&MSGID)      TYPE(*CHAR) LEN(7)
             DCL        VAR(&ORDTYPE)    TYPE(*CHAR) LEN(1)
             DCL        VAR(&OTYPE)      TYPE(*CHAR) LEN(8)
             DCL        VAR(&OUTQ)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&RUN)        TYPE(*CHAR) LEN(8)
             DCL        VAR(&RETURN)     TYPE(*CHAR) LEN(8)
             DCL        VAR(&RTID)       TYPE(*CHAR) LEN(5)    /* 414 A */
             DCL        VAR(&RTID01)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID02)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID03)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID04)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID05)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID06)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID07)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID08)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID09)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&RTID10)     TYPE(*CHAR) LEN(5)    /* 416aA */
             DCL        VAR(&SEV)        TYPE(*DEC)  LEN(2 0)
             DCL        VAR(&TRUCK)      TYPE(*CHAR) LEN(10)
             DCL        VAR(&TYPE)       TYPE(*CHAR) LEN(1)
             DCL        VAR(&USER)       TYPE(*CHAR) LEN(10)
             DCL        VAR(&WHSE)       TYPE(*DEC)  LEN(15 5)
             DCL        VAR(&WHSEN)      TYPE(*DEC)  LEN(3 0)     /* (730aA) */
             DCL        VAR(&WHSEA)      TYPE(*CHAR) LEN(3)       /* (730aA) */

 /****       MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(GETOUT)) ***/
             CHGVAR     VAR(&ERRCNT) VALUE(0)
             CHGVAR     VAR(&EXIST) VALUE('0')
             CHGVAR     VAR(&FINISHED) VALUE('0')

/*  Get client code                                                  (510aA) */

             CALL       PGM(GETCLIENT) PARM(&CLIENT)              /* (510aA) */


/*-------------------------------------------------------------------*/
/*  Main line                                                        */
/*-------------------------------------------------------------------*/

/* Get job information */

             RTVJOBA    JOB(&JOB) USER(&USER) TYPE(&TYPE)
             CHGJOB     LOGCLPGM(*YES)

/* See if user wants to run from Jobq. */

             IF (&RUN = '*JOBQ') THEN(DO)
               CHGVAR VAR(&RETURN) VALUE('*JOBQ')
               GOTO CMDLBL(SKIP1)
             ENDDO

/* Don't get options if being run from JOBQ. */

             IF ((&TYPE = '0') *OR (&MBR *NE ' ')) THEN(GOTO REPORT)

/*  Get report options. */

             CALL       PGM(&OPTPGM) PARM(&RETURN &MBR &OTYPE &OUTQ +
                          &FORM)

/*  See if user wants to proceed. */

             IF         COND((&RETURN *EQ '*CANCEL') *OR (&RETURN +
                          *EQ '*EXIT')) THEN(DO)
               SNDPGMMSG  MSGID(PIR9801) MSGF(PIRMSGF) +
                          MSGDTA(&CANCELMSG) MSGTYPE(*INFO)
               RETURN
             ENDDO

 SKIP1:

/*  Make sure members exist                                          */

             CHKOBJ     OBJ(&FILEH) OBJTYPE(*FILE) MBR(&MBR)
             CHKOBJ     OBJ(&FILED) OBJTYPE(*FILE) MBR(&MBR)
             CHGVAR     VAR(&EXIST) VALUE('1')

/*  See if user wants to put report on JOBQ. */

             IF (&RETURN *EQ '*JOBQ') THEN(DO)
               SBMJOB  CMD(CALL PGM(&SBMPGM) PARM(&MBR &OTYPE '*JOBQ2' +
                          &OUTQ &FORM)) JOB(&SBMPGM)
               RMVMSG     CLEAR(*ALL)
               CHGVAR  VAR(&FINISHED) VALUE('1')
               GOTO    CMDLBL(GETOUT)
             ENDDO

/*  Otherwise, run program. */

 REPORT:

/*  Make sure members exist                                          */

             CHKOBJ     OBJ(&FILEH) OBJTYPE(*FILE) MBR(&MBR)
             CHKOBJ     OBJ(&FILED) OBJTYPE(*FILE) MBR(&MBR)
             CHGVAR     VAR(&EXIST) VALUE('1')

/* Convert &OTYPE code into &ORDTYPE code */

               CHGVAR VAR(&ORDTYPE) VALUE(' ')
               IF (&OTYPE *EQ '*WILL') +
                 THEN(CHGVAR VAR(&ORDTYPE) VALUE('W'))
               IF (&OTYPE *EQ '*SINGLE') +
                 THEN(CHGVAR VAR(&ORDTYPE) VALUE('S'))  /* 4.16A */

/* Make sure &DEV and &FORM are not blank */

               IF (&OUTQ = ' ') +
                 THEN(CHGVAR VAR(&OUTQ) VALUE('*JOB'))
               IF (&FORM = ' ') +
                 THEN(CHGVAR VAR(&FORM) VALUE('*STD'))

/* Clear any existing messages and display working message. */

             RMVMSG     CLEAR(*ALL)
             MSGBFC     MESSAGE(&WORKINGMSG)

/* Override printer file */

/*           OVRPRTF    FILE(&PRTF) OUTQ(&OUTQ) FORMTYPE(&FORM)      (500 D) */

/* Override import files to correct member */

             OVRDBF     FILE(&FILEH) TOFILE(*FILE) MBR(&MBR)
             OVRDBF     FILE(&FILEHM) TOFILE(*FILE) MBR(&MBR)     /* (510 A) */
             OVRDBF     FILE(&FILED) TOFILE(*FILE) MBR(&MBR)
             OVRDBF     FILE(&FILEM) TOFILE(*FILE) MBR(&MBR)      /* (500aA) */
             OVRDBF     FILE(&FILESF) TOFILE(*FILE) MBR(&MBR)     /* (650 A) */

/* Import orders */

             CHGVAR     VAR(&WHSEN) VALUE(&WHSE)                  /* (730aA) */
             CHGVAR     VAR(&WHSEA) VALUE(&WHSEN)                 /* (730aA) */
        /*   CALL       PGM(&RPTPGM) PARM(&ORDTYPE &WHSE &TRUCK)         414D*/
        /*   CALL       PGM(&RPTPGM) PARM(&ORDTYPE &WHSE &TRUCK &RTID)  416aD*/
        /*   CALL       PGM(&RPTPGM) PARM(&ORDTYPE &WHSE &TRUCK +
                              &RTID01 &RTID02 &RTID03 &RTID04 &RTID05 +
                              &RTID06 &RTID07 &RTID08 &RTID09 &RTID10) /*PAK D*/
        /*   CALL       PGM(&RPTPGM) PARM(&ORDTYPE &WHSE &TRUCK +
                              &RTID01 &RTID02 &RTID03 &RTID04 &RTID05 +
                              &RTID06 &RTID07 &RTID08 &RTID09 &RTID10 +
                              &import_po)                              /*730aD*/
             CALL       PGM(&RPTPGM) PARM(&WHSEA &RETURN)         /* (730aM) */

/* Allocate, pick and print Interwarehouse Transfer Order.        /* (GLZ A) */
             IF (&OTYPE *EQ '*IWT') THEN(DO)                      /* (GLZ A) */
               CALL    PGM(HRH220) PARM(&WHSE &TRUCK &TYPE &SBMPGM +
                            &RTID01 &RETURN)                      /* (GLZ A) */
             ENDDO                                                /* (GLZ A) */

/* Allocate, pick and print will call orders. */

             IF (&OTYPE *EQ '*WILL') THEN(DO)
             CHGVAR     VAR(&COUNT) VALUE(0)                           /*416aA*/
 WLOOP:                                                                /*416aA*/
             CHGVAR     VAR(&COUNT) VALUE(&COUNT + 1)                  /*416aA*/
             IF (&COUNT *GT 10) THEN(GOTO FINISHED)                    /*416aA*/
             IF (&COUNT *EQ 1) THEN(CHGVAR VAR(&RTID) VALUE(&RTID01))  /*416aA*/
             IF (&COUNT *EQ 2) THEN(CHGVAR VAR(&RTID) VALUE(&RTID02))  /*416aA*/
             IF (&COUNT *EQ 3) THEN(CHGVAR VAR(&RTID) VALUE(&RTID03))  /*416aA*/
             IF (&COUNT *EQ 4) THEN(CHGVAR VAR(&RTID) VALUE(&RTID04))  /*416aA*/
             IF (&COUNT *EQ 5) THEN(CHGVAR VAR(&RTID) VALUE(&RTID05))  /*416aA*/
             IF (&COUNT *EQ 6) THEN(CHGVAR VAR(&RTID) VALUE(&RTID06))  /*416aA*/
             IF (&COUNT *EQ 7) THEN(CHGVAR VAR(&RTID) VALUE(&RTID07))  /*416aA*/
             IF (&COUNT *EQ 8) THEN(CHGVAR VAR(&RTID) VALUE(&RTID08))  /*416aA*/
             IF (&COUNT *EQ 9) THEN(CHGVAR VAR(&RTID) VALUE(&RTID09))  /*416aA*/
             IF (&COUNT *EQ 10) THEN(CHGVAR VAR(&RTID) VALUE(&RTID10)) /*416aA*/
             IF (&RTID *EQ ' ') THEN(GOTO FINISHED)                    /*416aA*/
          /*   CALL  PGM(RH220) PARM(&WHSE &TRUCK &TYPE &SBMPGM &RETURN) 414D*/
             CALL    PGM(RH220) PARM(&WHSE &TRUCK &TYPE &SBMPGM +
                          &RTID &RETURN)                               /*414M*/
             GOTO WLOOP                                                /*416aA*/
             ENDDO

 FINISHED:                                                             /*416aA*/

/* For Packer's SAP interface, extract purchase orders.           /* (PAK A) */

             IF (&client *eq &packers) THEN(DO)                   /* (PAK A) */
               IF (&import_po *eq '*YES') THEN(DO)                /* (PAK A) */
                 CHGVAR     VAR(&CMD) VALUE('*IMPZPLF  ')         /* (PAK A) */
                 CALL       PGM(SPI260CL) PARM(&CMD &MBR &OTYPE &RUN +
                                               &OUTQ &FORM)       /* (PAK A) */
               enddo                                              /* (PAK A) */
             enddo                                                /* (PAK A) */

             CHGVAR     VAR(&FINISHED) VALUE('1')

/*  Clean up before leaving */

             DLTOVR     FILE(*ALL)
             RMVM       FILE(&FILEH) MBR(&MBR)
             RMVM       FILE(&FILEHM) MBR(&MBR)                   /* (510 A) */
             MONMSG     MSGID(CPF7301 CPF320A CPF320B CPF3203 +
                          CPF3220 CPF3273 CPF7301 CPF7310 CPF0001) +
                                                                  /* (510 A) */
             RMVM       FILE(&FILED) MBR(&MBR)
             RMVM       FILE(&FILEM) MBR(&MBR)                    /* (500aA) */
             MONMSG     MSGID(CPF7301 CPF320A CPF320B CPF3203 +
                          CPF3220 CPF3273 CPF7301 CPF7310 CPF0001) +
                                                                  /* (500aA) */
             RMVM       FILE(&FILESF) MBR(&MBR)                   /* (650 A) */
             MONMSG     MSGID(CPF7301 CPF320A CPF320B CPF3203 +
                          CPF3220 CPF3273 CPF7301 CPF7310 CPF0001) +
                                                                  /* (650 A) */
             RMVMSG     CLEAR(*ALL)

/*  Send 'Successful message */

             IF COND(&FINISHED = '1') THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Import successful for' *BCAT &MBR +
                          *TCAT '/' *CAT &OTYPE *TCAT '/' *CAT &RUN +
                          *TCAT '/' *CAT &JOB *TCAT '/' *CAT &USER) +
                          TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)
             ENDDO

/*  Receive any messages and pass them on  */

 GETOUT:

             CHGVAR     VAR(&ERRCNT) VALUE(&ERRCNT + 1)
             IF COND(&ERRCNT = 3) THEN(GOTO CMDLBL(BOTTOM))

             IF COND(&FINISHED = '0') THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Import FAILED, see following +
                          message(s):' *BCAT &MBR *TCAT '/' *CAT +
                          &OTYPE *TCAT '/' *CAT &RUN *TCAT '/' *CAT +
                          &JOB *TCAT '/' *CAT &USER) +
                          TOMSGQ(&FTPMSGQ) MSGTYPE(*INFO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Import FAILED, see following +
                          message(s):' *BCAT &MBR *TCAT '/' *CAT +
                          &OTYPE *TCAT '/' *CAT &RUN *TCAT '/' *CAT +
                          &JOB *TCAT '/' *CAT &USER) +
                          TOMSGQ(&FTPERRMSGQ) MSGTYPE(*INFO)
               OVRPRTF    FILE(QPJOBLOG) OUTQ(QEZJOBLOG)          /* (530 A) */
               DSPJOBLOG  OUTPUT(*PRINT)                          /* (530 A) */
             ENDDO

 NEXTMSG:    DO
             RCVMSG     PGMQ(*SAME *) MSGQ(*PGMQ) MSGDTA(&MSGDTA) +
                          MSGID(&MSGID) SEV(&SEV) +
                          MSGF(&MSGF) MSGFLIB(&MSGFLIB)
             IF         COND(&MSGID *EQ ' ') THEN(GOTO CMDLBL(NOMSG))

             IF COND(&TYPE = '1') THEN(DO)
               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) MSGTYPE(*COMP)
             ENDDO

               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                     MSGDTA(&MSGDTA) TOMSGQ(&FTPMSGQ) MSGTYPE(*COMP)

             IF COND(&FINISHED = '0') THEN(DO)
               SNDPGMMSG  MSGID(&MSGID) MSGF(&MSGFLIB/&MSGF) +
                          MSGDTA(&MSGDTA) TOMSGQ(&FTPERRMSGQ) +
                          MSGTYPE(*COMP)
             ENDDO

             GOTO       CMDLBL(NEXTMSG)
             ENDDO
 NOMSG:

 BOTTOM:

               RCLRSC     LVL(*CALLER)

/*  Send '*Escape' message to caller */

             IF COND(&FINISHED = '0') THEN(DO)
             SNDPGMMSG  MSGID(CPF9898) MSGF(QSYS/QCPFMSG) +
                          MSGDTA('Error Occured Processing Member' +
                          *BCAT &MBR) MSGTYPE(*ESCAPE)
             ENDDO

             ENDPGM
