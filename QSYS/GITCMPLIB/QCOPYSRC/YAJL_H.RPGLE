     /*
      * Copyright (c) 2007-2020, Lloyd Hilaiel <lloyd@hilaiel.com>,
      *    Florian Forster  <ff at octo.it>,
      *    Scott Klement <yajl@scottklement.com>
      *
      * Permission to use, copy, modify, and/or distribute this
      * software for any purpose with or without fee is hereby
      * granted, provided that the above copyright notice and this
      * permission notice appear in all copies.
      *
      * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
      * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
      * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
      * THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
      * CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
      * FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
      * CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
      * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
      */

      /if defined(YAJL_H_DEFINED)
      /eof
      /endif
      /define YAJL_H_DEFINED

      *--------------------------------------------------------------
      * yajl_alloc_funcs_t:
      *
      *   this is used when providing custom subprocedures for memory
      *   allocation. You can set each of the pointers, below, to any
      *   memory function of your choice, then pass this structure
      *   to yajl_gen_alloc.
      *
      *   these procedures must have the following parameters and
      *   return values:
      *
      *   D alloc_proc      pr
      *   D   ctx                           *   value
      *   D   size                        10u 0 value
      *
      *   D free_proc       pr
      *   D   ctx                           *   value
      *   D   ptr                           *   value
      *
      *   D realloc_proc    pr
      *   D   ctx                           *   value
      *   D   ptr                           *   value
      *   D   size                        10u 0 value
      *--------------------------------------------------------------
     D yajl_alloc_funcs_t...
     D                 ds                  qualified
     D                                     based(Template)
     D   alloc                         *   procptr
     D   realloc                       *   procptr
     D   free                          *   procptr



      *--------------------------------------------------------------
      * yajl_callbacks_t:  Structure to contain the callbacks for the
      *                    various YAJL parsing events (in "SAX" mode)
      *
      *   Each procptr is called with a specific parameter list,
      *   shown below:
      *
      *    D yajl_null       pr            10i 0
      *    D   ctx                           *   value
      *    D yajl_boolean    pr            10i 0
      *    D   ctx                           *   value
      *    D   boolVal                     10i 0 value
      *    D yajl_integer    pr            10i 0
      *    D   ctx                           *   value
      *    D   intVal                      20i 0 value
      *    D yajl_double     pr            10i 0
      *    D   ctx                           *   value
      *    D   floatVal                     8f   value
      *    D yajl_number     pr            10i 0
      *    D   ctx                           *   value
      *    D   numVal                        *   value
      *    D   numLen                      10u 0 value
      *    D yajl_string     pr            10i 0
      *    D   ctx                           *   value
      *    D   strVal                        *   value
      *    D   strLen                      10u 0 value
      *    D yajl_str_map    pr            10i 0
      *    D   ctx                           *   value
      *    D yajl_map_key    pr            10i 0
      *    D   ctx                           *   value
      *    D   keyVal                        *   value
      *    D   keyLen                      10u 0 value
      *    D yajl_end_map    pr            10i 0
      *    D   ctx                           *   value
      *    D yajl_str_arr    pr            10i 0
      *    D   ctx                           *   value
      *    D yajl_end_arr    pr            10i 0
      *    D   ctx                           *   value
      *
      * ctx = this is context information defined by your program,
      *       and supplied to yajl via yajl_alloc. This is for your
      *       program to use to pass around context information.
      *
      *  boolVal = boolean value, 1=true, 0=false.
      *   intVal = 64-bit integer value (see "NOTE" below)
      * floatVal = floating pt value (see "NOTE" below)
      *   numVal = pointer to UTF-8 numeric val (see "NOTE" below)
      *   numLen = length of 'numVal'
      *   strVal = pointer to UTF-8 string value
      *   strLen = length of 'strVal'
      *   keyVal = pointer to UTF-8 string for the key name
      *   keyLen = length of 'keyVal'
      *
      * Return values:  All of these routines are expected to
      *   return 0 upon error, or a positive number to indicate
      *   that they were successful.  Returning zero will cause
      *   the parser status to change to 'yajl_status_client_canceled'
      *
      *  NOTE: if yajl_number is not *NULL, all numeric values
      *        are returned as character strings in the UTF-8
      *        encoding. This is useful because not all JSON numbers
      *        fit into the "integer" or "float" mold.  However,
      *        if yajl_number is *NULL (but one/both of yajl_integer
      *        or yajl_double are not) then YAJL will attempt to
      *        convert numbers to the appropriate int/double format.
      *        Since RPG can convert numbers easily, it's recommended
      *        to stick to yajl_number.
      *--------------------------------------------------------------
     D yajl_callbacks_t...
     D                 ds                  qualified
     D                                     based(Template)
     D   yajl_null                     *   procptr
     D   yajl_boolean                  *   procptr
     D   yajl_integer                  *   procptr
     D   yajl_double                   *   procptr
     D   yajl_number                   *   procptr
     D   yajl_string                   *   procptr
     D   yajl_str_map                  *   procptr
     D   yajl_map_key                  *   procptr
     D   yajl_end_map                  *   procptr
     D   yajl_str_arr                  *   procptr
     D   yajl_end_arr                  *   procptr

      *--------------------------------------------------------------
      *  handles used in this copybook.
      *   yajl_gen    = handle to JSON generator
      *   yajl_handle = handle to JSON stream parser
      *   yajl_val    = handle to JSON value
      *--------------------------------------------------------------
     D yajl_gen        s               *   based(Template)
     D yajl_handle     s               *   based(Template)
     D yajl_val        s               *   based(Template)
     D yajl_iconv      s               *   based(Template)


      *--------------------------------------------------------------
      * These are the status codes known to the YAJL JSON generator
      *--------------------------------------------------------------
     D yajl_gen_status_ok...
     D                 c                   const(0)
     D yajl_gen_keys_must_be_strings...
     D                 c                   const(1)
     D yajl_max_depth_exceeded...
     D                 c                   const(2)
     D yajl_gen_in_error_state...
     D                 c                   const(3)
     D yajl_gen_generation_complete...
     D                 c                   const(4)
     D yajl_gen_invalid_number...
     D                 c                   const(5)
     D yajl_gen_no_buf...
     D                 c                   const(6)
     D yajl_gen_invalid_string...
     D                 c                   const(7)
     D yajl_gen_iconv_error...
     D                 c                   const(1000000)
     D yajl_gen_open_fail...
     D                 c                   const(1000001)
     D yajl_gen_write_fail...
     D                 c                   const(1000002)

      *--------------------------------------------------------------
      * These are the status codes known to the YAJL JSON parser
      *--------------------------------------------------------------
     D yajl_status_ok...
     D                 c                   const(0)
     D yajl_status_client_canceled...
     D                 c                   const(1)
     D yajl_status_Error...
     D                 c                   const(2)


      *--------------------------------------------------------------
      * Error status codes reported to DATA-INTO
      *--------------------------------------------------------------
     D yajl_di_status_no_memory...
     D                 c                   const(1001)
     D yajl_di_status_json_parse...
     D                 c                   const(1002)
     D yajl_di_status_map_error...
     D                 c                   const(1003)
     D yajl_di_status_option_invalid...
     D                 c                   const(1004)

      *--------------------------------------------------------------
      * Config options for the YAJL JSON generator
      *--------------------------------------------------------------
     D yajl_gen_beautify...
     D                 c                   const(1)
     D yajl_gen_indent_string...
     D                 c                   const(2)
     D yajl_gen_print_callback...
     D                 c                   const(4)
     D yajl_gen_print_validate_utf8...
     D                 c                   const(8)
     D yajl_gen_escape_solidus...
     D                 c                   const(16)


      *--------------------------------------------------------------
      * Config options for the YAJL stream parser
      *--------------------------------------------------------------
     D yajl_allow_comments...
     D                 c                   const(1)
     D yajl_dont_validate_strings...
     D                 c                   const(2)
     D yajl_allow_trailing_garbage...
     D                 c                   const(4)
     D yajl_allow_multiple_values...
     D                 c                   const(8)
     D yajl_allow_partial_values...
     D                 c                   const(16)


      *--------------------------------------------------------------
      * Data types that a yajl_val_t can hold (tree parser)
      *--------------------------------------------------------------
     D yajl_t_string...
     D                 c                   const(1)
     D yajl_t_number...
     D                 c                   const(2)
     D yajl_t_object...
     D                 c                   const(3)
     D yajl_t_array...
     D                 c                   const(4)
     D yajl_t_true...
     D                 c                   const(5)
     D yajl_t_false...
     D                 c                   const(6)
     D yajl_t_null...
     D                 c                   const(7)

      *--------------------------------------------------------------
      * YAJL event parser, event keys.
      *--------------------------------------------------------------
     D YAJL_EVENT_NULL...
     D                 c                   1
     D YAJL_EVENT_BOOL...
     D                 c                   2
     D YAJL_EVENT_NUMBER...
     D                 c                   3
     D YAJL_EVENT_STRING...
     D                 c                   4
     D YAJL_EVENT_STRMAP...
     D                 c                   5
     D YAJL_EVENT_MAPKEY...
     D                 c                   6
     D YAJL_EVENT_ENDMAP...
     D                 c                   7
     D YAJL_EVENT_STRARR...
     D                 c                   8
     D YAJL_EVENT_ENDARR...
     D                 c                   9

     D  yajl_eventmap  ds
     D                                6a   inz('Null')
     D                                6a   inz('Bool')
     D                                6a   inz('Number')
     D                                6a   inz('String')
     D                                6a   inz('StrMap')
     D                                6a   inz('MapKey')
     D                                6a   inz('EndMap')
     D                                6a   inz('StrArr')
     D                                6a   inz('EndArr')
     D  yajl_event                    6a   dim(9)
     D                                     overlay(yajl_eventmap:1)


      /if defined(YAJL_C_PROTOTYPES)

      *--------------------------------------------------------------
      *  yajl_gen_alloc(): Allocate a new YAJL JSON generator
      *
      *    allocFuncs = (input) data structure containing memory
      *                 allocation routines. You may pass *OMIT to
      *                 use the default routines.
      *
      *  Returns a new generator handle.
      *--------------------------------------------------------------
     D yajl_gen_alloc...
     D                 pr                  like(yajl_gen)
     D                                     extproc('yajl_gen_alloc')
     D   allocFuncs                        likeds(yajl_alloc_funcs_t)
     D                                     options(*omit)
     D                                     const


      *--------------------------------------------------------------
      *  yajl_gen_config(): Set a config option in a generator
      *
      *    handle = (input) generator to set option in.
      *       opt = (input) option to set (see config options, above)
      *       val = (input) value of option.
      *
      *  Returns a new generator handle.
      *--------------------------------------------------------------
     D yajl_gen_config...
     D                 pr            10i 0 extproc('yajl_gen_config')
     D   handle                            like(yajl_gen) value
     D   opt                         10i 0 value
     D   val                         10i 0 value options(*nopass)
     D yajl_gen_config_cb...
     D                 pr            10i 0 extproc('yajl_gen_config')
     D   handle                            like(yajl_gen) value
     D   opt                         10i 0 value
     D   val                           *   procptr value
     D                                     options(*nopass)
     D yajl_gen_config_str...
     D                 pr            10i 0 extproc('yajl_gen_config')
     D   handle                            like(yajl_gen) value
     D   opt                         10i 0 value
     D   val                           *   value options(*string:*nopass)

      *--------------------------------------------------------------
      * yajl_gen_free(): Free up memory used by YAJL JSON generator
      *
      *  handle = (input) handle to generator to deallocate
      *--------------------------------------------------------------
     D yajl_gen_free...
     D                 pr                  extproc('yajl_gen_free')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      * yajl_gen_string(): Generate a string value in JSON data from
      *        an RPG string.
      *
      *  handle = (input) handle to generator to use
      *  string = (input) the string
      *  len    = (input) length of the preceding string
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_string...
     D                 pr            10i 0 extproc('yajl_gen_string')
     D   handle                            like(yajl_gen) value
     D   string                        *   value options(*string)
     D   len                         10u 0 value


      *--------------------------------------------------------------
      * yajl_gen_number(): Generate a numeric value in JSON data from
      *        an RPG string. (use %CHAR or %EDITC to make the string)
      *
      *  handle = (input) handle to generator to use
      *  number = (input) the string containing the number
      *  len    = (input) length of the preceding string
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_number...
     D                 pr            10i 0 extproc('yajl_gen_number')
     D   handle                            like(yajl_gen) value
     D   number                        *   value options(*string)
     D   len                         10u 0 value


      *--------------------------------------------------------------
      * yajl_gen_null(): Generate a null value in JSON data
      *
      *  handle = (input) handle to generator to use
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_null...
     D                 pr            10i 0 extproc('yajl_gen_null')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      * yajl_gen_bool(): Generate a boolean value in JSON data
      *
      *   handle = (input) handle to generator to use
      *  boolean = (ihput) integer to represent true/false
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_bool...
     D                 pr            10i 0 extproc('yajl_gen_bool')
     D   handle                            like(yajl_gen) value
     D   boolean                     10i 0 value


      *--------------------------------------------------------------
      * yajl_gen_map_open(): Start a new object/map level
      *
      *   handle = (input) handle to generator to use
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_map_open...
     D                 pr            10i 0 extproc('yajl_gen_map_open')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      * yajl_gen_map_close(): End the current object/map level
      *
      *   handle = (input) handle to generator to use
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_map_close...
     D                 pr            10i 0 extproc('yajl_gen_map_close')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      * yajl_gen_array_open(): Start a new array
      *
      *   handle = (input) handle to generator to use
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_array_open...
     D                 pr            10i 0 extproc('yajl_gen_array_open')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      * yajl_gen_array_close(): End the current array
      *
      *   handle = (input) handle to generator to use
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_array_close...
     D                 pr            10i 0 extproc('yajl_gen_array_close')
     D   handle                            like(yajl_gen) value



      *--------------------------------------------------------------
      * yajl_gen_get_buf(): Get a pointer to YAJL's generation buffer
      *
      *    NOTE: This gives you a direct pointer to the buffer that
      *          YAJL is working with, not a copy. Please do not
      *          modify the data, or deallocate the pointer. To clear
      *          the buffer, call yajl_gen_clear().
      *
      *   handle = (input) handle to generator to use
      *      buf = (output) pointer to YAJL's buffer
      *     size = (output) size of YAJL's buffer.
      *
      * returns the status of the generator (see status codes, above)
      *--------------------------------------------------------------
     D yajl_gen_get_buf...
     D                 pr            10i 0 extproc('yajl_gen_get_buf')
     D   handle                            like(yajl_gen) value
     D   buf                           *
     D   size                        10u 0


      *--------------------------------------------------------------
      * yajl_gen_clear(): Clears all data from the generator's
      *                   output buffer.  Note that this does
      *                   not reset the generator's state, it
      *                   merely wipes out the output -- it is
      *                   intended for incremental outputs.
      *
      *   handle = (input) handle to generator to use
      *--------------------------------------------------------------
     D yajl_gen_clear...
     D                 pr                  extproc('yajl_gen_clear')
     D   handle                            like(yajl_gen) value


      *--------------------------------------------------------------
      *  yajl_iconv_t:  Data structure to keep track of the state
      *                 of the yajl_iconv routines, below.
      *--------------------------------------------------------------
     D yajl_iconv_t    ds                  qualified
     D                                     based(yajl_iconv)
     D    rCCSID                     10i 0
     D    lCCSID                     10i 0
     D    toRem                      52a
     D    toLoc                      52a


      *--------------------------------------------------------------
      * yajl_iconv_init():  Intialize an iconv translator
      *
      *   rCCSID = (input) remote CCSID / CCSID used for json file
      *                for JSON data, this would normally be 1208
      *   lCCSID = (input) local CCSID / CCSID of your program.
      *                this can be 0=job CCSID, or 1200 for UTF-16
      *
      *  returns a pointer to a yajl_iconv_t structure
      *       or *NULL upon failure.
      *--------------------------------------------------------------
     D yajl_iconv_init...
     D                 pr                  extproc('yajl_iconv_init')
     D                                     like(yajl_iconv)
     D    rCCSID                     10i 0 value
     D    lCCSID                     10i 0 value


      *--------------------------------------------------------------
      * yajl_iconv_dyn():  Convert data to dynamic buffer
      *
      *     ic = (input) toRem or toLoc struct from yajl_iconv_t
      * inpstr = (input) input string to translate
      * inplen = (input) length of input string in bytes
      * outlen = (output) length of output string in bytes
      *
      * returns a pointer to a dynamically allocated output buffer
      *         that should be freed up by the caller.
      *         or *NULL upon failure.
      *--------------------------------------------------------------
     D yajl_iconv_dyn...
     D                 pr              *   extproc('yajl_iconv_dyn')
     D    ic                         52a   value
     D    inpstr                       *   value
     D    inplen                     10i 0 value
     D    outlen                     10i 0


      *--------------------------------------------------------------
      * yajl_iconv_toRemote(): Convert data to remote CCSID
      *
      *    res = (input) result of yajl_iconv_init
      *   data = (input) data to translate (null-terminated)
      *
      * returns a pointer to a dynamically allocated null-terminated
      *     string.  This should be freed up by the caller.
      *--------------------------------------------------------------
     D yajl_iconv_toRemote...
     D                 pr              *   extproc('yajl_iconv_toRemote')
     D   res                               like(yajl_iconv) value
     D   data                          *   value options(*string)


      *--------------------------------------------------------------
      * yajl_iconv_toLocal(): Convert data to local CCSID
      *
      *    res = (input) result of yajl_iconv_init
      *   data = (input) data to translate (null-terminated)
      *
      * returns a pointer to a dynamically allocated null-terminated
      *     string.  This should be freed up by the caller.
      *--------------------------------------------------------------
     D yajl_iconv_toLocal...
     D                 pr              *   extproc('yajl_iconv_toLocal')
     D   res                               like(yajl_iconv) value
     D   data                          *   value options(*string)


      *--------------------------------------------------------------
      * yajl_iconv_string_free(): Free up string that was alloc
      *  y yajl_iconv_dyn, yajl_iconv_toLocal or yajl_iconv_toRemote
      *
      *    str = (input) ptr to string to free.
      *--------------------------------------------------------------
     D yajl_iconv_string_free...
     D                 pr                  extproc('yajl_iconv_string_free')
     D   str                           *   value


      *--------------------------------------------------------------
      * yajl_iconv_free(): Free up memory used by yajl_iconv_t struct
      *
      *    res = (input) yajl_iconv_t structure to free up.
      *--------------------------------------------------------------
     D yajl_iconv_free...
     D                 pr              *   extproc('yajl_iconv_free')
     D   res                               like(yajl_iconv) value


      *--------------------------------------------------------------
      * yajl_alloc(): Allocate a new YAJL JSON parser
      *
      *   callbacks = (input) pointer to yajl_callbacks_t structure
      *                or *OMIT for verify-only mode.
      *  allocFuncs = (input) pointer to yajl_alloc_funcs_t struct,
      *                or *OMIT to use default functions.
      *         ctx = (input) pointer to any context you'd like to
      *                have passed to each of the callbacks.  This is
      *                for your program's purposes, to keep track of
      *                context of each parser. YAJL does not know or
      *                care what this pointer is set to.
      *
      * returns a newly allocated parser handle.
      *--------------------------------------------------------------
     D yajl_alloc...
     D                 PR                  like(yajl_handle)
     D                                     extproc('yajl_alloc')
     D   callbacks                         likeds(yajl_callbacks_t)
     D                                     const
     D                                     options(*omit)
     D   allocFuncs                        likeds(yajl_alloc_funcs_t)
     D                                     const
     D                                     options(*omit)
     D   ctx                           *   value


      *--------------------------------------------------------------
      * yajl_config(): Set a config option in the YAJL stream parser
      *
      *   handle = (input) handle to parser to configure
      *      opt = (input) option to set in parser (see constants,
      *              above.)
      *      val = (input) 1=enable option, 0=disable option
      *
      * returns 0 if the option was unrecognized, or
      *       a positive number if the option was set
      *--------------------------------------------------------------
     D yajl_config...
     D                 PR            10i 0 extproc('yajl_config')
     D    handle                           like(yajl_handle) value
     D    opt                        10i 0 value
     D    val                        10i 0 value options(*nopass)


      *--------------------------------------------------------------
      * yajl_parse(): Parse a partial stream of JSON data
      *
      *    handle = (input) handle to parser to use
      *  jsonText = (input) JSON text in UTF-8 format
      *   jsonLen = (input) length of jsonText in bytes.
      *
      * returns status of YAJL stream parser.
      *--------------------------------------------------------------
     D yajl_parse...
     D                 PR            10i 0 extproc('yajl_parse')
     D    handle                           like(yajl_handle) value
     D    jsonText                     *   value
     D    jsonLen                    10u 0 value


      *--------------------------------------------------------------
      * yajl_complete_parse(): Finish parsing JSON stream.
      *
      *  Call this after you've called yajl_parse with all fragments
      *  of your input data.
      *
      *    handle = (input) handle to parser to use.
      *
      * returns the status of YAJL stream parser.
      *--------------------------------------------------------------
     D yajl_complete_parse...
     D                 PR            10i 0 extproc('yajl_complete_parse')
     D    handle                           like(yajl_handle) value


      *--------------------------------------------------------------
      * yajl_free(): Free up the resources created by the
      *              yajl_alloc() routine.
      *
      *   handle = (input) handle of parser data to free up.
      *--------------------------------------------------------------
     D yajl_free       PR                  extproc('yajl_free')
     D    handle                           like(yajl_handle) value


      *--------------------------------------------------------------
      * yajl_get_error(): Get an error string describing the state of
      *                   the parse.
      *
      *    handle = (input) handle to parser to use.
      *   verbose = (input) 1=return verbose message, 0=don't.
      *  jsonText = (input) jsonText you were parsing.
      *  jsonLen  = (input) length of 'jsonText' in bytes.
      *
      * returns a pointer to a null-terminated error string.
      *       you should call yajl_free_error to release the
      *       memory used by this error string when you're done.
      *--------------------------------------------------------------
     D yajl_get_error...
     D                 PR              *   extproc('yajl_get_error')
     D    handle                           like(yajl_handle) value
     D    verbose                    10i 0 value
     D    jsonText                     *   value
     D    jsonLen                    10u 0 value

      *--------------------------------------------------------------
      * yajl_get_bytes_consumed: Get the number of bytes that were
      *    used before an error (or end-of-document) was reached.
      *
      *    handle = (input) handle to parser to use
      *
      * returns the number of bytes consumed.
      *--------------------------------------------------------------
     D yajl_get_bytes_consumed...
     D                 PR            10u 0 extproc('yajl_get_bytes_consumed')
     D    handle                           like(yajl_handle) value


      *--------------------------------------------------------------
      * yajl_free_error(): Free up error string returned by
      *     the yajl_get_error routine.
      *
      *    handle = (input) handle to parser to use
      *       str = (input) pointer to the error string
      *--------------------------------------------------------------
     D yajl_free_error...
     D                 PR                  extproc('yajl_free_error')
     D    handle                           like(yajl_handle) value
     D    str                          *   value


      *--------------------------------------------------------------
      * yajl_val_t():  This structure represents one value in the
      *    yajl_tree.  Not recommended to use directly from RPG!
      *--------------------------------------------------------------
     D yajl_tree_number_t...
     D                 ds                  qualified
     D                                     based(template)
     D   i                           20i 0
     D   d                            8f
     D   r                             *
     D   flags                       10u 0

     D yajl_tree_object_t...
     D                 ds                  qualified
     D                                     based(template)
     D   keys                          *
     D   values                        *
     D   len                         10i 0

     D yajl_tree_array_t...
     D                 ds                  qualified
     D                                     based(template)
     D   values                        *
     D   len                         10i 0

     D yajl_val_t      ds                  qualified
     D                                     based(yajl_val)
     D   type                         3i 0
     D                               15a
     D   union
     D     string                      *   overlay(union:1)
     D     number                          likeds(yajl_tree_number_t)
     D                                     overlay(union:1)
     D     object                          likeds(yajl_tree_object_t)
     D                                     overlay(union:1)
     D     array                           likeds(yajl_tree_array_t)
     D                                     overlay(union:1)


      *--------------------------------------------------------------
      * yajl_tree_parse():  Parse JSON data into a tree in memory
      *
      *   input = (input) null-terminated string containing
      *             JSON data in UTF-8 format.
      *   error_buf = (output) error message
      *   error_len = (input) length of 'error_buf'
      *
      * Returns a pointer to the outermost JSON object
      *    that encapsulates the tree, or *NULL upon failure.
      *--------------------------------------------------------------
     D yajl_tree_parse...
     D                 PR                  extproc('yajl_tree_parse')
     D                                     like(yajl_val)
     D    input                        *   value options(*string)
     D    error_buf               65535a   options(*varsize)
     D    error_len                  10u 0 value


      *--------------------------------------------------------------
      *  yajl_tree_parse_file():  Same as yajl_tree_parse, but gets
      *    it's input from a stream file in the IFS.
      *
      *    stmf = (input) path name of stream file in IFS
      *             to read from.
      *   error_buf = (output) error message
      *   error_len = (input) length of 'error_buf'
      *
      * Returns a pointer to the outermost JSON object
      *    that encapsulates the tree, or *NULL upon failure.
      *--------------------------------------------------------------
     D yajl_tree_parse_file...
     D                 PR                  extproc('yajl_tree_parse_file')
     D                                     like(yajl_val)
     D    stmf                         *   value options(*string)
     D    error_buf               65535a   options(*varsize)
     D    error_len                  10u 0 value

      *--------------------------------------------------------------
      * yajl_obj_get():  Retrieve an object nested within an outer
      *                    YAJL object.
      *
      *   node = (input) YAJL object to search within
      *    key = (input) YAJL key to search for
      *
      * returns a pointer to the inner YAJL object if found
      *      or *NULL if not found.
      *--------------------------------------------------------------
     D yajl_obj_get...
     D                 PR                  extproc('yajl_obj_get')
     D                                     like(yajl_val)
     D   node                              like(yajl_val) value
     D   key                           *   value options(*string)

      *--------------------------------------------------------------
      * yajl_tree_free():  Free up the memory associated with the
      *        YAJL tree (value returned from yajl_tree_parse or
      *        yajl_tree_parse_Stmf)
      *
      *    val = (input) YAJL tree to free
      *--------------------------------------------------------------
     D yajl_tree_free...
     D                 PR                  extproc('yajl_tree_free')
     D   val                               like(yajl_val) value

      /endif

      /if not defined(YAJL_C_PROTOTYPES)

      * NOTE: This is a workaround for the fact that RPGers don't
      *       always want/need to bind to the C routines. When C
      *       protos are not defined, this will run an RPG wrapper in
      *       YAJLR4 for yajl_tree_free()

      *--------------------------------------------------------------
      * yajl_tree_free():  Free up the memory associated with the
      *        YAJL tree (value returned from yajl_tree_parse or
      *        yajl_tree_parse_Stmf)
      *
      *    val = (input) YAJL tree to free
      *--------------------------------------------------------------
     D yajl_tree_free...
     D                 PR                  extproc('YAJL_TREE_FREE_RPG')
     D   val                               like(yajl_val) value

      /endif

      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_buf_parse(): Parse JSON data from an EBCDIC string
      *
      *   inpBuf (input)  = pointer to buffer/variable with JSON
      *                      data in EBCDIC representation
      *  inpSize (input)  = size/length of data in inpBuf
      *  handler (input)  = procedure pointer to the handler
      *                      procedure that will handle JSON events
      *   usrdta (input)  = pointer to any user data ("communication
      *                      area) that you'd like to have passed
      *                      to your handler.
      *   errMsg (output) = error message (upon failure)
      *
      * returns        yajl_status_ok = parsed successfully
      *             yajl_status_error = error detected (see errMsg)
      *  yajl_status_client_cancelled = canceled by handler.
      *
      * Handler should be prototyped as follows:
      *
      *    D MyHandler       pr            10i 0
      *    D   usrdta                        *   value
      *    D   event                       10i 0 value
      *    D   key                         50a   varying const
      *    D   value                         *   value
      *    D   valLen                      10i 0 value
      *
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_buf_parse...
     D                 pr            10i 0
     D   inpBuf                        *   value
     D   inpSize                     10i 0 value
     D   handler                       *   value procptr
     D   usrdta                        *   value
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_stmf_parse(): Parse JSON data from an IFS stream file
      *
      *     stmf (input)  = IFS path name to JSON file.
      *  handler (input)  = procedure pointer to the handler
      *                      procedure that will handle JSON events
      *   usrdta (input)  = pointer to any user data ("communication
      *                      area) that you'd like to have passed
      *                      to your handler.
      *   errMsg (output) = error message (upon failure)
      *
      * returns        yajl_status_ok = parsed successfully
      *             yajl_status_error = error detected (see errMsg)
      *  yajl_status_client_cancelled = canceled by handler.
      *
      * Handler should be prototyped as follows:
      *
      *    D MyHandler       pr            10i 0
      *    D   usrdta                        *   value
      *    D   event                       10i 0 value
      *    D   key                         50a   varying const
      *    D   value                         *   value
      *    D   valLen                      10i 0 value
      *
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_stmf_parse...
     D                 PR            10i 0
     D   stmf                      5000a   varying const
     D   handler                       *   value procptr
     D   usrdta                        *   value
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_buf_load_tree(): Load JSON data from a buffer/variable
      *                       into a tree structure.
      *
      *   inpBuf (input)  = pointer to buffer/variable with JSON
      *                      data in EBCDIC representation
      *  inpSize (input)  = size/length of data in inpBuf
      *   errMsg (output) = error message (if any)
      *
      * returns a YAJL node representing the tree structure
      *      or *NULL upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_buf_load_tree...
     D                 pr                  like(yajl_val)
     D   inpBuf                        *   value
     D   inpSize                     10i 0 value
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_stmf_load_tree(): Load JSON data from a stream file
      *                        into a tree structure.
      *
      *     stmf (input)  = IFS path name to JSON file.
      *   errMsg (output) = error message (if any)
      *
      * returns a YAJL node representing the tree structure
      *      or *NULL upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_stmf_load_tree...
     D                 pr                  like(yajl_val)
     D   stmf                      5000a   varying const
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_IS_xxx(): Determine whether a YAJL tree node is a
      *                of a particular JSON data type or not.
      *     node = (input) YAJL node to check
      *  returns *ON if it's that data type, *OFF otherwise
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_IS_STRING  PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_NUMBER  PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_OBJECT  PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_ARRAY   PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_TRUE    PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_FALSE   PR             1N
     D   node                              like(yajl_val) value
     D YAJL_IS_NULL    PR             1N
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_GET_STRING(): Rerieves a string from a yajl tree node
      *                    if that node is a string node.
      *
      *   node = (input) YAJL tree node
      *
      * returns the string, or '' if not a string
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_GET_STRING...
     D                 PR         65535a   varying
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_SAVE_STRING_STMF(): Saves a string from a yajl tree node
      *       to a stream file in the IFS.
      *
      *   node = (input) YAJL tree node (must be string)
      *   stmf = (input) IFS path to stream file to write/replace
      * errMsg = (output) error message returned when writing file
      *
      * returns yajl_status_ok or yajl_status_error
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_SAVE_STRING_STMF...
     D                 PR            10i 0
     D   node                              like(yajl_val) value
     D   stmf                      5000a   varying const options(*trim)
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_GET_NUMBER(): Retrieves a number from a numeric YAJL tree
      *                      node.
      *   node = (input) node to retrieve from
      *
      * returns the number, or 0 if not numeric
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_GET_NUMBER...
     D                 PR            30p 9
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_ARRAY_SIZE(): Returns the number of elements in a YAJL
      *                     node that represents a JSON array.
      *
      *   node = (input) the array node.
      *
      *  returns the number of elements, or -1 if not an array
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_ARRAY_SIZE...
     D                 PR            10i 0
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_ARRAY_ELEM():  Returns one element of a JSON array from
      *                      a YAJL tree node.
      *
      *  node = (input) array node to retrieve from
      *   idx = (input) array index of node to retrieve
      *
      * returns the node of the array element, or *null if not found
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_ARRAY_ELEM...
     D                 PR                  like(yajl_val)
     D   node                              like(yajl_val) value
     D   idx                         10i 0 value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_ARRAY_LOOP(): Iterate through all objects in JSON array
      *                      represented by a YAJL tree node
      *
      *   dow YAJL_ARRAY_LOOP( myArray: i: val );
      *     // handle array element here
      *   enddo;
      *
      *  node = (input)  array node to retrieve from
      *   idx = (in/out) array index of node. Pass zero to start loop,
      *            this number will be incremented on each call.
      *   val = (output) YAJL node representing array element value
      *
      * returns the node of the array element, or *null if not found
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_ARRAY_LOOP...
     D                 PR             1n
     D   node                              like(yajl_val) value
     D   idx                         10i 0
     D   val                               like(yajl_val)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_OBJECT_SIZE(): Returns the number of items in a JSON object
      *                     represented by a YAJL tree node
      *
      *   node = (input) node to retrieve from
      *
      * returns the number of items, or -1 if not an object node
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_OBJECT_SIZE...
     D                 PR            10i 0
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_OBJECT_ELEM(): Retrieve one item from a JSON object
      *                     represented by YAJL tree node.
      *
      *  node = (input)  YAJL node to retrieve from
      *   idx = (input)  item number within the node
      *   key = (output) key value of the item retrieved
      *
      * returns a the value as a YAJL tree node, or *NULL upon failure
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_OBJECT_ELEM...
     D                 PR                  like(yajl_val)
     D   node                              like(yajl_val) value
     D   idx                         10i 0 value
     D   key                         50a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_OBJECT_LOOP(): Routine used to iterate through all items
      *                     in a JSON object inside a loop.
      *
      *    dow YAJL_OBJECT_LOOP(myNode: i: key: val);
      *       // handle key/val here.
      *    enddo;
      *
      *   node = (input)  YAJL node representing a JSON object
      *    idx = (in/out) variable to use as loop index. You should
      *                    set this to zero to begin the loop. It
      *                    will be incremented each time through.
      *    key = (output) key name of YAJL item
      *    val = (output) yajl node representing the value of item
      *
      * returns *ON if new key/val loaded, or *OFF otherwise.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_OBJECT_LOOP...
     D                 PR             1n
     D   node                              like(yajl_val) value
     D   idx                         10i 0
     D   key                         50a   varying
     D   val                               like(yajl_val)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_OBJECT_FIND(): Locate a particular key inside an object
      *
      *   node = (input) YAJL tree node representing JSON object
      *    key = (input) key to look for.
      *
      * returns the YAJL node representing the key value,
      *      or *NULL if not found
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_OBJECT_FIND...
     D                 PR                  like(yajl_val)
     D   node                              like(yajl_val) value
     D   key                         50a   varying const


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_genOpen(): Open a YAJL JSON generator
      *
      *   pretty = (input) If *ON, YAJL will insert line breaks and
      *                    indent code for readability. Otherwise,
      *                    JSON code will be as compact as possible.
      *
      *   escSolidus = (input/optional)  If *ON, YAJL will escape
      *                    solidus (aka forward slash) characters.
      *                    default is *OFF.
      *
      * returns yajl_gen_status_ok if successful
      *      or yajl_gen_open_fail upon error.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_genOpen    pr            10i 0
     D   pretty                       1n   const
     D   escSolidus                   1n   const options(*nopass)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_genClose(): Close the open YAJL generator
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_genClose   pr


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_beginObj(): Begin a new YAJL object
      *
      *  objName = (input/optional) if given, this is the property name
      *             of the object being added.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_beginObj   pr            10i 0
     D   objName                  65535a   varying
     D                                     const options(*nopass:*varsize)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_endObj(): End the object that's being generated.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_endObj     pr            10i 0


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_beginArray(): Begin a new YAJL array
      *
      *  arrName = (input/optional) if given, this is the property name
      *             of the array being added.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_beginArray...
     D                 pr            10i 0
     D   arrName                  65535a   varying
     D                                     const options(*nopass:*varsize)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_endArray(): End the array that's being generated
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_endArray   pr            10i 0


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addChar(): Add a character value to the JSON data stream
      *
      * if one parameter:
      *   val (input) = character string to add to JSON stream
      *
      * if two parameters:
      *   val (input) = key of property to add to object
      *  val2 (input) = character string to set as property value
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addChar    PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize)
     D   val2                     65535a   varying const
     D                                     options(*varsize:*nopass:*omit)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addUtf16(): Add a UTF-16 (Unicode) string to a JSON stream
      *
      * if one parameter:
      *   val (input) = character string to add to JSON stream
      *
      * if two parameters:
      *   val (input) = key of property to add to object
      *  val2 (input) = character string to set as property value
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addUtf16   PR            10i 0
     D   val                      32764c   varying
     D                                     const options(*varsize)
     D   val2                     32764c   varying const
     D                                     options(*varsize:*nopass:*omit)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addCharPtr(): Add a character value to the JSON data stream
      *                    from a pointer to an EBCDIC string buffer
      *
      * if two parameters:
      *   val (input) = key of property to add (or *OMIT if not in an obj)
      *  val2 (input) = character string in buffer to set as prop value
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addCharPtr...
     D                 PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize:*omit)
     D   val2                          *   value
     D   val2len                     10i 0 value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addCharEx(): Add a character value to the JSON data stream
      *                    from an 'expanding buffer' (created with the
      *                    yajl_exbuf routines below).
      *
      *   This is to allow for very large string sizes, even on older
      *   RPG versions, or when you don't know how big the data needs
      *   to be, etc.
      *
      * if two parameters:
      *   val (input) = key of property to add (or *OMIT if not in an obj)
      *  val2 (input) = character string in an expanding buffer to set as
      *                    property value
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addCharEx  PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize:*omit)
     D   val2                              likeds(yajl_exbuf_t) const


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addCharStmf(): Add character from an IFS stream file
      *
      *   name (input) = key of property to add (or *OMIT if not in an obj)
      *   stmf (input) = pathname of stream file to add to JSON document
      * errMsg (output) = error message if error occurs opening file
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addCharStmf...
     d                 PR            10i 0
     D   name                       256a   varying const options(*omit)
     d   stmf                      5000a   varying const
     D                                     options(*trim)
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addNum(): Add a numeric value to the JSON data stream
      *
      * if one parameter:
      *   val (input) = number to add to JSON stream (in' string form)
      *
      * if two parameters:
      *   val (input) = key of property to add to object
      *  val2 (input) = number to set as property value (in string form)
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addNum     PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize)
     D   val2                     65535a   varying const
     D                                     options(*varsize:*nopass:*omit)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addBool(): Add a boolean value to the JSON data stream
      *
      * if one parameter:
      *   val (input) = RPG indicator, where *ON=true, *OFF=false
      *                 to add to JSON data stream
      *
      * if two parameters:
      *   val (input) = key of property to add to object
      *  val2 (input) = RPG indicator to set as a boolean value.
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addBool    PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize)
     D   val2                         1n   const options(*nopass)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addNull(): Add a null value to a JSON data stream
      *
      * if no parameters:
      *   a null value is added to JSON stream.
      *
      * if one parameter:
      *   val (input) = key of property to add to object
      *   value of 'val' will be set to null.
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addNull    PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize:*nopass)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_getBuf(): Returns a pointer to YAJL's internal buffer
      *                  where JSON data is stored.
      *
      *    rtnptr = (output) pointer to YAJL's generator buffer
      *    rtnlen = (output) length of returned buffer in bytes
      *
      *  returns the YAJL generator status.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_getBuf     PR            10i 0
     D   rtnptr                        *
     D   rtnlen                      10u 0


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_copyBuf():  Copy YAJL generator buffer to the caller's
      *                  variable or buffer.
      *
      *     ccsid = (input) CCSID to convert data to. 0=job CCSID.
      *   jsonBuf = (input) Pointer to variable or buffer to copy
      *                     the data to.
      *  jsonSize = (input) Size of the jsonBuf buffer (in bytes)
      *    rtnLen = (output) length of data placed in buffer
      *
      *  returns the YAJL generator status.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_copyBuf    PR            10i 0
     D   ccsid                       10i 0 value
     D   jsonBuf                       *   value
     D   jsonSize                    10i 0 value
     D   rtnlen                      10i 0


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_saveBuf():  Copy YAJL generator buffer to IFS
      *
      *    stmf = (input) path to stream file in IFS to save to
      *  errMsg = (output) error that occcured (if any)
      *
      *  returns the YAJL generator status.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_saveBuf    PR            10i 0
     D   stmf                      5000a   varying const
     D   errMsg                     500a   varying

      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_stdin_load_tree(): Load JSON data from stdin (Apache)
      *                         into a tree structure.
      *
      *     is_utf8 (input) = *ON=data is already UTF-8.
      *                       *OFF=data is in EBCDIC
      *     errMsg (output) = error message (if any)
      * saveToStmf (input)  = if an IFS path/file name is provided
      *                       YAJLR4 will save a copy of the JSON.
      *                       If not provided, no copy is saved.
      *
      * returns a YAJL node representing the tree structure
      *      or *NULL upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     d yajl_stdin_load_tree...
     D                 pr                  like(yajl_val)
     D   is_utf8                      1n   const
     D   errMsg                     500a   varying
     D   saveToStmf                5000a   varying const
     D                                     options(*nopass: *omit: *trim)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_writeStdout(): Copy YAJL generator buffer to Apache via
      *                     stdout (with headers)
      *
      *  status = (input) HTTP status code (200=OK, 500=Error)
      *  errMsg = (output) error that occcured (if any)
      *
      *  returns the YAJL generator status.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_writeStdout...
     D                 PR            10i 0
     D   status                       3p 0 const
     D   errMsg                     500a   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_exbuf_t: Used to keep track of expanding buffer data in
      *               the routines below. This allows you to store data
      *               in strings up to (approx) 16mb.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_exbuf_t    ds                  qualified
     D                                     based(Template)
     D   ptr                           *
     D   size                        10u 0
     D   len                         10u 0
     D   chunk                       10u 0
     D   ccsid                       10i 0


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_exbuf_new():  Allocate an expanding buffer
      *
      *    initSize = (input) initial size of expanding buffer
      *       ccsid = (input) CCSID of data you will place in buffer
      *                   if unpassed or set to 0, defaults to job CCSID
      *
      * Returns expanding buffer handle.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     d yajl_exbuf_new  PR                  likeds(yajl_exbuf_t)
     d   initSize                    10i 0 value
     D   ccsid                       10i 0 value options(*nopass)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_exbuf_concat_ptr(): Concatenate data onto an expanding buffer
      *                            using a pointer
      *
      *    buf = (i/o) expanding buffer to concatenate to
      *   data = (input) pointer to data to concatenate
      *    len = (input) length of data to concatenate
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_exbuf_concat_ptr...
     D                 PR
     D   buf                               likeds(yajl_exbuf_t)
     D   data                          *   value
     D   len                         10i 0 value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_exbuf_concat(): Concatenate string onto an expanding buffer
      *
      *    buf = (i/o) expanding buffer to concatenate to
      *    str = (input) string to concatenate
      *
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_exbuf_concat...
     D                 PR
     D   buf                               likeds(yajl_exbuf_t)
     D   str                      65535a   varying const
     D                                     options(*varsize)

      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_exbuf_free():  Free up the memory of an expanding buffer
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_exbuf_free...
     d                 PR
     d   buf                               likeds(yajl_exbuf_t)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_GET_STRING_UTF8(): Retrieve a pointer to the raw UTF-8
      *                         data for a YAJL string
      *
      *   node = (input) YAJL tree node
      *
      * returns a pointer to a C-style, zero-terminated string
      *      or *NULL if the node is not a string
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_GET_STRING_UTF8...
     D                 PR              *
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_GET_STRING_BUF(): Convert JSON string to EBCDIC and place
      *                        it into a buffer
      *
      *    node = (input) YAJL tree node
      *     buf = (input) pointer to buffer to load
      * bufsize = (input) size of buffer to load
      *
      * returns length of string, 0 is returned if no string available
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_GET_STRING_BUF...
     D                 PR            10u 0
     D   node                              like(yajl_val) value
     D   buf                           *   value
     D   bufSize                     10u 0 value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_stringify(): Dump the contents of a node (and any child
      *    nodes) to a JSON string.
      *
      *    node = (input) node to stringify
      *     buf = (input) pointer to buffer to place string into
      * bufSize = (input) maximum length of data to put into buffer
      *   ccsid = (input/optional) CCSID of buffer data default=job
      *
      * returns the length of the data placed in the buffer
      *              or -1 upon failure
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_stringify...
     D                 PR            10i 0
     D   node                              like(yajl_val) value
     D   buf                           *   value
     D   bufSize                     10u 0 value
     D   ccsid                        5u 0 const options(*nopass:*omit)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_copyBufStr(): Copy the JSON generator buffer to a string
      *  (same as YAJL_copyBuf, but without pointers -- limited)
      *
      *  NOTE: This is limited to 2 million characters due to the
      *        fact that it copies this string around and uses a lot
      *        of memory. If you need a larger string, use YAJL_copyBuf.
      *
      *  returns the string, or '' upon failure
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_copyBufStr...
     D                 PR              C   len(2000000) varying
     D                                     ccsid(1200)


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_stringifyStr(): Dump the contents of a node (and any child
      *    nodes) to a Unicode JSON string.
      *
      * NOTE: This differs from YAJL_stringify() in that it outputs a
      *       string (rather than a pointer). Since it uses a lot of
      *       memory the output is limited to 2 million chars.
      *
      *    node = (input) node to stringify
      *
      * returns the JSON string or '' upon failure
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_stringifyStr...
     D                 PR              C   len(2000000) varying
     D                                     ccsid(1200)
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_string_load_tree(): Load JSON data from a string
      *                          into a tree structure.
      *
      *  NOTE: This is the same as yajl_buf_load_tree, except it
      *        uses a string as input. Due to memory considerations
      *        the string is limited to 2 million chars. For larger
      *        JSON documents use yajl_buf_load_tree().
      *
      *   inpStr (input)  = JSON string to parse
      *   errMsg (output) = error message (if any)
      *
      * returns a YAJL node representing the tree structure
      *      or *NULL upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_string_load_tree...
     D                 pr                  like(yajl_val)
     D   inpStr                        A   len(2000000) varying
     D                                     const options(*varsize)
     D   errMsg                     500A   varying


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_genFromNode(): Generate JSON output from a given tree
      *                     structure (including all sub-elements)
      *
      *    name = (input) name of new node to generate
      *    node = (input) node pointer to a tree structure containing
      *                   data of node to generate
      *
      * returns the YAJL generator status
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_genFromNode...
     D                 PR            10i 0
     D   name                     65535a   varying
     D                                     const options(*varsize:*omit)
     D   node                              like(yajl_val) value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_createRpgFromNode(): Attempts to create an RPG definition
      *                           that matches a given JSON node
      *
      *      name = Name of RPG definition to create
      *      node = pointer to a JSON node in a YAJL Tree structure
      *              to generate RPG defintion from
      *  saveCode = pointer to a subprocedure used to save the
      *              resulting code. It must have the following
      *              parameters/return value:
      *
      *             dcl-pr saveCode int(10);
      *               code varchar(4096) const;
      *             end-pr;
      *
      *             - return value should be a YAJL status code
      *             - code = source code to write
      *
      * Returns YAJL status code
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_createRpgFromNode...
     D                 PR            10i 0
     D   name                      4096a   varying const
     D   node                              like(yajl_val) value
     D   saveCode                      *   procptr value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * YAJL_GET_STRING_UTF16(): Returns a string from a yajl tree node
      *                          in UTF-16 encoding.
      *
      *   node = (input) YAJL tree node
      *
      * returns the string, or '' if not a string
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D YAJL_GET_STRING_UTF16...
     D                 PR         65535c   varying ccsid(1200)
     D   node                              like(yajl_val) value



      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_case_convert_name():  Convert a field name to the same
      *                            name that DATA-INTO/XML-INTO option
      *                            case=convert would use
      *
      *   keyName = (input) original key name (from JSON)
      *
      * Returns the name normalized like case=convert would've done
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_case_convert_name...
     D                 PR          4096a   varying
     D   keyName                   4096a   varying const


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addPreformattedPtr(): Insert preformatted data into the JSON
      *                         data stream. (It is up to you to ensure
      *                         that this data is valid JSON data.)
      *
      *   val (input) = key of property to add (or *OMIT if not in an obj)
      *  val2 (input) = JSON object string in buffer to set as prop value
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addPreformattedPtr...
     D                 PR            10i 0
     D   val                      65535a   varying
     D                                     const options(*varsize:*omit)
     D   val2                          *   value
     D   val2len                     10i 0 value


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_clearBuf():  Clear the YAJL generator output buffer
      *
      * NOTE: This does not reset the generator state, it merely wipes
      *       out the output. It is intended to be used for generating
      *       incremental outputs.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_clearBuf   PR


      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * yajl_addNumf(): Format and add a numeric value to the JSON data
      *                 stream. This is similar to yajl_addNum, except
      *                 it does not require the number to be formatted
      *                 in character beforehand.
      *
      *   name (input) = key ("name of field") to use if adding to
      *                  a JSON object.  Pass *OMIT if not adding to
      *                  an object.
      *
      *    val (input) = value of numeric field to add to object
      *
      * returns yajl_gen_status_ok upon success,
      *         or generator status code upon failure.
      *+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     D yajl_addNumf    PR            10i 0
     D   name                     65535a   varying
     D                                     const options(*varsize:*omit)
     D   val                         63p15 value

