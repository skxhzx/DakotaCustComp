     F*----------------------------------------------------------------
     F*   Copyright (C) 2020 BFC Software, Inc. - All Rights Reserved
     F*   BFC Software, Inc.
     F*   P.O. Box 1957
     F*   Batavia, IL 601510
     F*   (630) 562-0375
     F*----------------------------------------------------------------
     F*
     F*  ADJQTY    Adjust quantity in ITEMQTY file.
     F*  19 August 1994
     F*  Dave Sommerville
     F*
     F*----------------------------------------------------------------
     F*  Revisions
     F*
     F*    03/31/95  DAS  2.10
     F*      - Revised STOCK to get item at top of routine.
     F*      - Revised STOCK to "up" stock qty for command *STOCK.
     F*
     F*    04/12/95  DAS  2.10
     F*      - Revised AVAIL to only update return qtys for cmd *AVAIL
     F*      - Revised STOCK to get available qty before uping qty.
     F*
     F*    09/05/95  DAS  2.10
     F*      - Revised STOCK to make sure a breakdown quantiy is
     F*        not negative.
     F*
     F*    06/16/99  DAS  4.11
     F*      - Revised AVAIL routine to check for negative stock qty.
     F*      - Revised STOCK routine to check for negative stock qty.
     F*
415 AF*    12/19/00  RH   4.15
     F*      - Write record to ITEMZRO file when warehouse qty = 0.
415 AF*    12/22/00  RH   4.15
     F*      - Chain to ITEMZRO rec to avoid writing duplocate record.
     F*
415aAF*    01/08/01  MLb  4.15a
     F*      - Revised STOCK routine to allow stock qty to go negative
     F*        when processing the *UNSTOCK command.
     F*
415bAF*    02/28/01  DAS  4.15b
     F*      - Created new gateway for STOCK routine in order to do
     F*        special handling of negative numbers.
     F*      - Removed 411 change in STOCK routine that checked for
     F*        negative numbers for command *STOCK.
     F*      - Revised *UNSTOCK always make breakdown 1 & 2 quantities
     F*        positive at the expense of normal qty going negative.
     F*
510 AF*    04/09/07  MLB  5.10
     F*      - Enh: Added client custom code support to program.
     F*
520aAF*    10/07/08  DAS  5.20a  P#00140
     F*      - Added new commands *ALLOCN/1/2, *UNALOCN/1/2, *HOLDN/1/2,
     F*        *RELEASN/1/2, *STOCKN/1/2 and *UNSTCKN/1/2.
     F*        These commands are used from Truck Builder to indicate
     F*        the label qty type. If 'N', then breakdown qty cannot be
     F*        taken. If '1', once we run out of cases, we can look at
     F*        available breakdown 1 qty.
530aAF*    08/09/10  RH   5.30a
     F*      - FIX: Change RELESN/1/2 to allow hold quantity to go     ,
     F*        negative.  Was causing error in ITEMQTY if XDK item
     F*        was closed BEFORE receiving or adjusting quantity into
     F*        XDK slot.
650aAF*    07/08/13  RH   6.50a
     F*      - FIX: Change ALLOCN to do nothing if available qty is    ,
     F*        less than 0 so nothing can be allocated.
     F*        Was clearing existing IQALC1 field when none could be
     F*        allocated.
     F*
740 AF*    04/18/20  MLB  7.40
     F*      - Fix: Revised 4.15 12/22/00 mod to unlock ITEMZRO
     F*        record to release rcd lock. Was causing unable to allocate
     F*        rcd lock error in OR610 via ADJQTY.
     F*
     F*----------------------------------------------------------------
     F*  Client Custom Revisions: City Line Distributors
     F*
CLD AF*    12/23/04  MLB  CLD
     F*      - Revised pgm to receive new parm *ALLOCFR - Force entire
     F*        qty to be allocated.
     F*
     F*----------------------------------------------------------------
MJK1 F*  Client Custom Revisions: MJ Kellner
MJK1AF*    01/11/09  MLB  MJK1
     F*      - Revised pgm to receive new parm *ALLOCFR - Force entire
     F*        qty to be allocated.
     F*
     F*----------------------------------------------------------------
     F*  Client Custom Revisions: VIP Foodservice
     F*
VIP AF*    04/09/07  MLB  VIP
     F*      - Added VIP to CLD mod adding new parm *ALLOCFR - Force
     F*        entire qty to be allocated.
     F*
415aAF*----------------------------------------------------------------
415aAF* Notes:
415aAF*
415aAF*       The modification described in 4.15a is a departure from our
415aAF*       philosophy to not allow negative values in any of the ware-
415aAF*       values.  This change was required due to modifications in
415aAF*       program LT105 that allows a user to close Letdown trans-
415aAF*       actions (generated by picking) to zero qty. Even if this
415aAF*       would leave a negative available qty in the To Slot. This
415aAF*       change will help ensure that the slot quantities will match
415aAF*       the quantities in the warehouse.
415aAF*
     F*----------------------------------------------------------------
     F*  File Specs
     F*
     FITEMQTY UF  E           K        DISK
415 AFITEMZRO UF  E           K        DISK                      A
     FPIRITEM IF  E           K        DISK
     E*----------------------------------------------------------------
     E*  Table and array definitions
     E*
     E                    $MD       128  1
510 AI*----------------------------------------------------------------
510 AI*  Customer id
510 AI*
510 AI              'GETCLIENT'           C         @GETCL
510 AI*
CLD A /COPY QCOPYSRC,IL#CITYLIN
MJK A /COPY QCOPYSRC,IL#MJKELLN
VIP A /COPY QCOPYSRC,IL#VIP
510 AI*
     I*----------------------------------------------------------------
     I*  Error message parameter
     I*
     I$PERM       DS
     I                                        1  60 XXERM
     I                                        1   4 $PMSG
     I*----------------------------------------------------------------
     I*  Data structure for error message parameters
     I*
     I$MDT        DS
     I                                        1  50 ERRMSG
     I*
     I                                        1  10 ERORIG
     I                                       11  20 ERAVAL
     I                                       21  30 ERACTU
     I            DS
     I                                    P   1   20$EC
     I*----------------------------------------------------------------
     I*  Message control
     I*
     I              'PIRMSGF   '          C         #MSGF
     I*
     I            DS
     I                                        1 128 #MSGDT
     I                                        1 128 $MD
415 AI*----------------------------------------------------------------
415 AI*  Called programs
415 AI*
415 AI              'CVTDTE'              C         @CVTDT
415 AI*
415 AI$CVTDT      DS
415 AI                                        1   8 $CVCMD
415 AI                                        9  18 $CVPRG
415 AI                                       19  24 $CVD6I
415 AI                                       25  32 $CVD8I
415 AI                                       33  380$CVD6O
415 AI                                       39  460$CVD8O
415 AI                                       47  64 $CVSTO
415 AI                                       65  72 $CVRTN
415 AI                                       73 132 $CVERM
415 AI                                       73  76 $CVMSG
     I*----------------------------------------------------------------
     I*  Program info data structure
     I*
     I           SDS
     I                                     *PROGRAM #PROG
     I                                      244 253 #JOB
     I                                      254 263 #USER
     I                                      264 269 #JOBN
     I                                      276 2810#JOBDT
     I                                      282 2870#JOBTM
     C*----------------------------------------------------------------
     C*  Parameters
     C*
     C*    Input Parameters
     C*      $PCMD   *STOCK    -  Add to stock quantity.
520aAC*              *STOCKN   -  Add to stock quantity.
520aAC*                             Selection label is for Normal qty.
520aAC*              *STOCK1   -  Add to stock quantity.
520aAC*                             Selection label is for Brkdn l qty.
520aAC*              *STOCK2   -  Add to stock quantity.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*              *UNSTOCK  -  Subtract from stock quantity.
520aAC*              *UNSTCKN  -  Subtract from stock quantity.
520aAC*                             Selection label is for Normal qty.
520aAC*              *UNSTCK1  -  Subtract from stock quantity.
520aAC*                             Selection label is for Brkdn l qty.
520aAC*              *UNSTCK2  -  Subtract from stock quantity.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*              *ALLOC    -  Add to allocated quantity.
CLD AC*              *ALLOCFR  -  Force entire qty to be allocated.
520aAC*              *ALLOCN   -  Add to allocated quantity.
520aAC*                             Selection label is for Normal qty.
520aAC*              *ALLOC1   -  Add to allocated quantity.
520aAC*                             Selection label is for Brkdn 1 qty.
520aAC*              *ALLOC2   -  Add to allocated quantity.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*              *UNALLOC  -  Subtract from allocated quantity.
520aAC*              *UNALOCN  -  Subtract from allocated quantity.
520aAC*                             Selection label is for Normal qty.
520aAC*              *UNALOC1  -  Subtract from allocated quantity.
520aAC*                             Selection label is for Brkdn 1 qty.
520aAC*              *UNALOC2  -  Subtract from allocated quantity.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*              *PICK     -  Subtract from stock and allocated qty
     C*              *PICKSPC  -  Subtract from stock and hold qty.
     C*              *AVAIL    -  Calculate available quantity.
     C*              *HOLD     -  Put a quantity on hold.
520aAC*              *HOLDN    -  Put a quantity on hold.
520aAC*                             Selection label is for Normal qty.
520aAC*              *HOLD1    -  Put a quantity on hold.
520aAC*                             Selection label is for Brkdn 1 qty.
520aAC*              *HOLD2    -  Put a quantity on hold.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*              *RELEASE  -  Release a held quantity.
520aAC*              *RELEASN  -  Release a held quantity.
520aAC*                             Selection label is for Normal qty.
520aAC*              *RELEAS1  -  Release a held quantity.
520aAC*                             Selection label is for Brkdn 1 qty.
520aAC*              *RELEAS2  -  Release a held quantity.
520aAC*                             Selection label is for Brkdn 2 qty.
     C*      $PPRG   Program message queue to send messages back to.
     C*      $PTYPE  *INTER    - Interactive, use program msg queue.
     C*              *BATCH    - Batch, send error code.
     C*      $PWHSE  Warehouse number.
     C*      $PITEM  Item number.
     C*      $PQTY1  Normal quantity.
     C*      $PQTY2  Breakdown quantity 1.
     C*      $PQTY3  Breakdown quantity 2.
     C*
     C*    Returned Parameters
     C*      $PRTQ1  Returned normal quantity.
     C*      $PRTQ2  Returned breakdown quantity 1.
     C*      $PRTQ3  Returned breakdown quantity 2.
     C*      $PRTN   blank    - No problem encountered.
     C*              *PGMQ    - Error occured. Message sent to pgmq.
     C*              *LOCKED  - ITEMQTY record is locked.
     C*              *NOTEXST - ITEMQTY record does not exist.
     C*              *PRTALC  - Qty only partially allocated.
     C*      $PERM   Error message or pointer to message in pgmq.
     C*
     C*----------------------------------------------------------------
     C*  Let the show begin .....
     C*
     C           *ENTRY    PLIST
     C                     PARM           $PCMD   8
     C                     PARM           $PPRG  10
     C                     PARM           $PTYPE  8
     C                     PARM           $PWHSE  30
     C                     PARM           $PITEM 15
     C                     PARM           $PQTY1  70
     C                     PARM           $PQTY2  70
     C                     PARM           $PQTY3  70
     C                     PARM           $PRTQ1  70
     C                     PARM           $PRTQ2  70
     C                     PARM           $PRTQ3  70
     C                     PARM           $PRTN   8
     C                     PARM           $PERM
     C*----------------------------------------------------------------
     C*  Main line
     C*
     C                     MOVE *OFF      ERROR   1
     C                     MOVE *BLANKS   $PRTN
     C                     MOVE *BLANKS   $PERM
     C                     Z-ADD0         $PRTQ1
     C                     Z-ADD0         $PRTQ2
     C                     Z-ADD0         $PRTQ3
     C                     MOVE *OFF      ITMFLG  1
     C*
     C*  Get ITEMQTY record.
     C*
     C                     EXSR GETREC
     C           ERROR     CABEQ*ON       OUT
     C*
     C*  Execute corresponding routine.
     C*
415bDC**         $PCMD     CASEQ'*STOCK  'STOCK
415bDC**         $PCMD     CASEQ'*UNSTOCK'STOCK
415bMC           $PCMD     CASEQ'*STOCK  'STOCKG
520aAC           $PCMD     CASEQ'*STOCKN 'STOCKG
520aAC           $PCMD     CASEQ'*STOCK1 'STOCKG
520aAC           $PCMD     CASEQ'*STOCK2 'STOCKG
415bMC           $PCMD     CASEQ'*UNSTOCK'STOCKG
520aAC           $PCMD     CASEQ'*UNSTCKN'STOCKG
520aAC           $PCMD     CASEQ'*UNSTCK1'STOCKG
520aAC           $PCMD     CASEQ'*UNSTCK2'STOCKG
     C           $PCMD     CASEQ'*ALLOC  'ALLOC
CLD AC           $PCMD     CASEQ'*ALLOCFR'ALLOC
520aAC           $PCMD     CASEQ'*ALLOCN 'ALLOCN
520aAC           $PCMD     CASEQ'*ALLOC1 'ALLOC1
520aAC           $PCMD     CASEQ'*ALLOC2 'ALLOC2
     C           $PCMD     CASEQ'*UNALLOC'ALLOC
520aAC           $PCMD     CASEQ'*UNALOCN'UNALCN
520aAC           $PCMD     CASEQ'*UNALOC1'UNALC1
520aAC           $PCMD     CASEQ'*UNALOC2'UNALC2
     C           $PCMD     CASEQ'*HOLD   'HOLD
520aAC           $PCMD     CASEQ'*HOLDN  'HOLDN
520aAC           $PCMD     CASEQ'*HOLD1  'HOLD1
520aAC           $PCMD     CASEQ'*HOLD2  'HOLD2
     C           $PCMD     CASEQ'*RELEASE'HOLD
520aAC           $PCMD     CASEQ'*RELEASN'RELESN
520aAC           $PCMD     CASEQ'*RELEAS1'RELES1
520aAC           $PCMD     CASEQ'*RELEAS2'RELES2
     C           $PCMD     CASEQ'*PICK   'PICK
     C           $PCMD     CASEQ'*PICKSPC'PICKS
     C           $PCMD     CASEQ'*AVAIL  'AVAIL
     C                     ENDCS
415 AC*
415 AC*  Execute ZERO routine (IQREC quantities = 0).
415 AC           $PCMD     IFNE '*AVAIL  '
415 AC                     EXSR ZZERO
415 AC                     ENDIF
     C*
     C*  Update item quantity record.
     C*
     C           $PCMD     IFNE '*AVAIL  '
     C                     UPDATIQREC
     C                     ENDIF
     C*
     C*  Do some clean up before leaving.
     C*
     C           OUT       TAG
     C                     EXSR ZSCLR
     C                     RETRN
     C*----------------------------------------------------------------
     C*
     C*          SUBROUTINES IN ALPHABETICAL ORDER
     C*
     C*----------------------------------------------------------------
     C*
     C*  *INZSR  Initialization subrotine
     C*
     CSR         *INZSR    BEGSR
510 AC*
510 AC* Get client id.
510 AC*
510 AC                     CALL @GETCL
510 AC                     PARM           CLIENT 10
510 AC                     PARM           CLILOC 10
     C*
     C*  Define file keys
     C*
     C*    Item quantity file (ITEMQTY)
     C*
     CSR         KEYIQ     KLIST
     CSR                   KFLD           $PWHSE
     CSR                   KFLD           $PITEM
     C*
415 ACSR         *LIKE     DEFN TODAY     KEYDTE
415 ACSR         *LIKE     DEFN IZZTIM    KEYTIM
415 ACSR         KEYIZ     KLIST
415 ACSR                   KFLD           IQWHSE
415 ACSR                   KFLD           IQITEM
415 ACSR                   KFLD           KEYDTE
415 ACSR                   KFLD           KEYTIM
415 AC*
415 AC*  Convert today's date into century format.
415 AC*
415 ACSR                   MOVE '*CURCMD '$CVCMD
415 ACSR                   CALL @CVTDT
415 ACSR                   PARM           $CVTDT
415 ACSR                   Z-ADD$CVD8O    TODAY   80
     C*
     C*  Initialize message handling
     C*
     CSR                   EXSR ZMIMSG
415bAC*
415bAC*  Initialize message handling
415bAC*
415bACSR         *LIKE     DEFN $PCMD     SVCMD
415bACSR         *LIKE     DEFN $PQTY1    SVQTY1
415bACSR         *LIKE     DEFN $PQTY2    SVQTY2
415bACSR         *LIKE     DEFN $PQTY3    SVQTY3
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ALLOC   Allocate quantity.
     C*
     CSR         ALLOC     BEGSR
     CSR                   MOVE *OFF      PRTALC  1
     C*
     C*  Allocate quantities.
     C*
     CSR                   SELEC
     CSR         $PCMD     WHEQ '*ALLOC  '
CLD AC           $PCMD     OREQ '*ALLOCFR'
     C*
     C*     Calculate available quantities. Save string for error msg.
     C*
     CSR                   EXSR AVAIL
     CSR                   CALL 'CVTQTY'
     CSR                   PARM '*QTY2STR'$CCMD   8
     CSR                   PARM #PROG     $CPRG  10
     CSR                   PARM $PRTQ1    $CQTY1  70
     CSR                   PARM $PRTQ2    $CQTY2  70
     CSR                   PARM $PRTQ3    $CQTY3  70
     CSR                   PARM           $CUM1   2
     CSR                   PARM           $CUM2   2
     CSR                   PARM           $CUM3   2
     CSR                   PARM           $CQSTR 10
     CSR                   PARM           $CUSTR 17
     CSR                   PARM           $CRTN   8
     CSR                   PARM           $PERM
     CSR                   MOVE $CQSTR    ERAVAL
     C*
     C*     Allocate normal quantity.
     C*
     CSR         $PQTY1    IFLE AVAIL1
CLD AC           $PCMD     OREQ '*ALLOCFR'
     CSR                   ADD  $PQTY1    IQALC1
     CSR                   Z-ADD$PQTY1    $PRTQ1
     CSR                   ELSE
     CSR                   ADD  AVAIL1    IQALC1
     CSR                   Z-ADDAVAIL1    $PRTQ1
     CSR                   MOVE *ON       PRTALC
     CSR                   ENDIF
     CSR                   SUB  $PRTQ1    AVAIL1
     C*
     C*     Allocate breakdown 1 quantity.
     C*
     C*        Break carton if we need more stock.
     C*
     CSR         AVAIL2    DOWLT$PQTY2
     CSR         AVAIL1    ANDGT0
     CSR         ITMFLG    IFEQ *OFF
     CSR                   EXSR GETITM
     CSR                   ENDIF
     CSR         ITUMQ2    IFLE 0
     CSR                   LEAVE
     CSR                   ENDIF
     CSR                   SUB  1         IQSTK1
     CSR                   SUB  1         AVAIL1
     CSR                   ADD  ITUMQ2    IQSTK2
     CSR                   ADD  ITUMQ2    AVAIL2
     CSR                   ENDDO
     C*
     C*        Now do allocation.
     C*
     CSR         $PQTY2    IFLE AVAIL2
CLD AC           $PCMD     OREQ '*ALLOCFR'
     CSR                   ADD  $PQTY2    IQALC2
     CSR                   Z-ADD$PQTY2    $PRTQ2
     CSR                   ELSE
     CSR                   ADD  AVAIL2    IQALC2
     CSR                   Z-ADDAVAIL2    $PRTQ2
     CSR                   MOVE *ON       PRTALC
     CSR                   ENDIF
     CSR                   SUB  $PRTQ2    AVAIL2
     C*
     C*     Allocate breakdown 2 quantity.
     C*
     C*        Break carton if we need more stock.
     C*
     CSR         AVAIL3    DOWLT$PQTY3
     CSR         AVAIL1    IFLE 0
     CSR         AVAIL2    ANDLE0
     CSR                   LEAVE
     CSR                   ENDIF
     CSR         ITMFLG    IFEQ *OFF
     CSR                   EXSR GETITM
     CSR                   ENDIF
     CSR         ITUMQ2    IFLE 0
     CSR         ITUMQ3    ORLE 0
     CSR                   LEAVE
     CSR                   ENDIF
     CSR         AVAIL2    IFGT 0
     CSR                   SUB  1         IQSTK2
     CSR                   SUB  1         AVAIL2
     CSR                   ADD  ITUMQ3    IQSTK3
     CSR                   ADD  ITUMQ3    AVAIL3
     CSR                   ELSE
     CSR                   SUB  1         IQSTK1
     CSR                   SUB  1         AVAIL1
     CSR                   ADD  ITUMQ2    IQSTK2
     CSR                   ADD  ITUMQ2    AVAIL2
     C*
     CSR                   SUB  1         IQSTK2
     CSR                   SUB  1         AVAIL2
     CSR                   ADD  ITUMQ3    IQSTK3
     CSR                   ADD  ITUMQ3    AVAIL3
     CSR                   ENDIF
     C*
     CSR                   ENDDO
     C*
     C*        Now do allocation.
     C*
     CSR         $PQTY3    IFLE AVAIL3
     CSR                   ADD  $PQTY3    IQALC3
     CSR                   Z-ADD$PQTY3    $PRTQ3
     CSR                   ELSE
     CSR                   ADD  AVAIL3    IQALC3
     CSR                   Z-ADDAVAIL3    $PRTQ3
     CSR                   MOVE *ON       PRTALC
     CSR                   ENDIF
     CSR                   SUB  $PRTQ3    AVAIL3
     C*
     C*     Send message back if partial allocation occured.
     C*
     CSR         PRTALC    IFEQ *ON
     CSR         $PTYPE    IFEQ '*INTER  '
     CSR                   EXSR ZM0117
     CSR                   MOVE '*PGMQ   '$PRTN
     CSR                   ELSE
     CSR                   MOVE '*PRTALC '$PRTN
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     C*   Unallocate quantity.  Allocation can not go negative.
     C*
     CSR                   OTHER
     C*
     CSR         $PQTY1    IFLT IQALC1
     CSR                   SUB  $PQTY1    IQALC1
     CSR                   ELSE
     CSR                   Z-ADD0         IQALC1
     CSR                   ENDIF
     C*
     CSR         $PQTY2    IFLT IQALC2
     CSR                   SUB  $PQTY2    IQALC2
     CSR                   ELSE
     CSR                   Z-ADD0         IQALC2
     CSR                   ENDIF
     C*
     CSR         $PQTY3    IFLT IQALC3
     CSR                   SUB  $PQTY3    IQALC3
     CSR                   ELSE
     CSR                   Z-ADD0         IQALC3
     CSR                   ENDIF
     C*
     CSR                   ENDSL
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  ALLOCN  Allocate quantity from just Normal
520aAC*
520aAC*    For *ALLOCN we assume that the only qty sent to us
520aAC*    for allocation is $PQTY1.
520aAC*
520aAC*    Unlike routine ALLOC, this only does allocation.
520aAC*    Routine UNALCN handles unallocation.
520aAC*
520aACSR         ALLOCN    BEGSR
     CSR                   MOVE *OFF      PRTALC  1
     CSR                   Z-ADD$PQTY1    SVQTY1
     C*
     C*   Calculate available quantities. Save string for error msg.
     C*
     CSR                   EXSR AVAIL
     CSR                   CALL 'CVTQTY'
     CSR                   PARM '*QTY2STR'$CCMD   8
     CSR                   PARM #PROG     $CPRG  10
     CSR                   PARM $PRTQ1    $CQTY1  70
     CSR                   PARM $PRTQ2    $CQTY2  70
     CSR                   PARM $PRTQ3    $CQTY3  70
     CSR                   PARM           $CUM1   2
     CSR                   PARM           $CUM2   2
     CSR                   PARM           $CUM3   2
     CSR                   PARM           $CQSTR 10
     CSR                   PARM           $CUSTR 17
     CSR                   PARM           $CRTN   8
     CSR                   PARM           $PERM
     CSR                   MOVE $CQSTR    ERAVAL
     C*
     C*   Only allocate from the Normal qty
     C*
650aACSR                   SELEC
650aAC*   All quantity available to be allocated.
650aMCSR         SVQTY1    WHLE AVAIL1
650aDC**         SVQTY1    IFLE AVAIL1
     CSR                   ADD  SVQTY1    IQALC1
     CSR                   ADD  SVQTY1    $PRTQ1
     CSR                   SUB  SVQTY1    AVAIL1
     CSR                   Z-ADD0         SVQTY1
650aDC**                   ELSE
650aAC*   Partial quantity available to be allocated.
650aACSR         AVAIL1    WHGT 0
     CSR                   ADD  AVAIL1    IQALC1
     CSR                   ADD  AVAIL1    $PRTQ1
     CSR                   SUB  AVAIL1    SVQTY1
     CSR                   Z-ADD0         AVAIL1
650aAC*   NO quantity available to be allocated.
650aACSR                   OTHER
650AACSR                   Z-ADD0         $PRTQ1
650aDC**                   ENDIF
650aMCSR                   ENDSL
     C*
     C*   Send message back if partial allocation occured.
     C*
     CSR         SVQTY1    IFGT 0
     CSR                   MOVE *ON       PRTALC
     CSR         $PTYPE    IFEQ '*INTER  '
     CSR                   EXSR ZM0117
     CSR                   MOVE '*PGMQ   '$PRTN
     CSR                   ELSE
     CSR                   MOVE '*PRTALC '$PRTN
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  ALLOC1  Allocate quantity from Normal and Brkdn 1
520aAC*
520aAC*    For *ALLOC1 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY2.
520aAC*
520aAC*    Unlike routine ALLOC, this only does allocation.
520aAC*    Routine UNALC1 handles unallocation.
520aAC*
520aACSR         ALLOC1    BEGSR
     CSR                   MOVE *OFF      PRTALC  1
     C*
     CSR         $PQTY2    IFLT 0
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   EXSR UNALC1
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   GOTO ENDAL1
     CSR                   ENDIF
     C*
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY2    SVQTY2
     C*
     C*   Calculate available quantities. Save string for error msg.
     C*
     CSR                   EXSR AVAIL
     CSR                   CALL 'CVTQTY'
     CSR                   PARM '*QTY2STR'$CCMD   8
     CSR                   PARM #PROG     $CPRG  10
     CSR                   PARM $PRTQ1    $CQTY1  70
     CSR                   PARM $PRTQ2    $CQTY2  70
     CSR                   PARM $PRTQ3    $CQTY3  70
     CSR                   PARM           $CUM1   2
     CSR                   PARM           $CUM2   2
     CSR                   PARM           $CUM3   2
     CSR                   PARM           $CQSTR 10
     CSR                   PARM           $CUSTR 17
     CSR                   PARM           $CRTN   8
     CSR                   PARM           $PERM
     CSR                   MOVE $CQSTR    ERAVAL
     C*
     C*   First, try to allocate full cases
     C*
     CSR         SVQTY2    DOWGEITUMQ2
     CSR         AVAIL1    ANDGT0
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQALC1
     CSR                   ADD  ITUMQ2    $PRTQ2
     CSR                   SUB  1         AVAIL1
     CSR                   SUB  ITUMQ2    SVQTY2
     CSR                   ENDDO
     C*
     C*   Then allocate the remaining qty from the brkdn 1 qty
     C*
     CSR         SVQTY2    DOWGT0
     C*
     C*       If enough available, grab entire qty.
     C*
     CSR         SVQTY2    IFLE AVAIL2
     CSR                   ADD  SVQTY2    IQALC2
     CSR                   ADD  SVQTY2    $PRTQ2
     CSR                   SUB  SVQTY2    AVAIL2
     CSR                   Z-ADD0         SVQTY2
     CSR                   LEAVE
     CSR                   ENDIF
     C*
     C*       Not enough availalbe, break down a case and loop.
     C*
     CSR         AVAIL1    IFGT 0
     CSR         ITUMQ2    ANDGT0
     CSR                   SUB  1         AVAIL1
     CSR                   ADD  ITUMQ2    AVAIL2
     CSR                   SUB  1         IQSTK1
     CSR                   ADD  ITUMQ2    IQSTK2
     CSR                   ITER
     CSR                   ENDIF
     C*
     C*       Case not available, take what we can get.
     C*
     CSR         AVAIL2    IFGT 0
     CSR                   ADD  AVAIL2    IQALC2
     CSR                   ADD  AVAIL2    $PRTQ2
     CSR                   SUB  AVAIL2    SVQTY2
     CSR                   Z-ADD0         AVAIL2
     CSR                   ENDIF
     C*
     CSR                   LEAVE
     CSR                   ENDDO
     C*
     C*   Last of all, see if we can convert any brkdn1's to cases.
     C*
     CSR         IQALC2    DOWGEITUMQ2
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQALC1
     CSR                   SUB  ITUMQ2    IQALC2
     CSR                   ENDDO
     C*
     CSR                   EXSR AVAIL
     CSR         AVAIL2    DOWGEITUMQ2
     CSR         IQSTK2    ANDGEITUMQ2
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQSTK1
     CSR                   SUB  ITUMQ2    IQSTK2
     CSR                   SUB  ITUMQ2    AVAIL2
     CSR                   ENDDO
     C*
     C*   Send message back if partial allocation occured.
     C*
     CSR         SVQTY2    IFGT 0
     CSR                   MOVE *ON       PRTALC
     CSR         $PTYPE    IFEQ '*INTER  '
     CSR                   EXSR ZM0117
     CSR                   MOVE '*PGMQ   '$PRTN
     CSR                   ELSE
     CSR                   MOVE '*PRTALC '$PRTN
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     CSR         ENDAL1    ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  ALLOC2  Allocate quantity from Normal, Brkdn 1 and Brkdn 2
520aAC*
520aAC*    For *ALLOC2 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY3.
520aAC*
520aAC*    Unlike routine ALLOC, this only does allocation.
520aAC*    Routine UNALC2 handles unallocation.
520aAC*
520aACSR         ALLOC2    BEGSR
     CSR                   MOVE *OFF      PRTALC  1
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY3    SVQTY3
     C*
     C*   Currently this routine uses the old ALLOC routine.
     C*
     CSR                   MOVE $PCMD     SVCMD
     CSR                   MOVE '*ALLOC  '$PCMD
     CSR                   EXSR ALLOC
     CSR                   MOVE SVCMD     $PCMD
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  AVAIL   Calculate available quantity.
     C*
     CSR         AVAIL     BEGSR
     C*
     C*   Normal quantity.
     C*
     CSR         *LIKE     DEFN $PRTQ1    AVAIL1
411 ACSR         IQSTK1    IFLT 0
411 ACSR                   Z-ADD0         AVAIL1
411 ACSR                   ELSE
411 ACSR                   Z-ADDIQSTK1    AVAIL1
411 ACSR                   ENDIF
411 DC*R         IQSTK1    SUB  IQALC1    AVAIL1
411 MCSR                   SUB  IQALC1    AVAIL1
     CSR                   SUB  IQHLD1    AVAIL1
     C*
     C*   Breakdown 1 quantity.
     C*
     CSR         *LIKE     DEFN $PRTQ2    AVAIL2
411 ACSR         IQSTK2    IFLT 0
411 ACSR                   Z-ADD0         AVAIL2
411 ACSR                   ELSE
411 ACSR                   Z-ADDIQSTK2    AVAIL2
411 ACSR                   ENDIF
411 DC*R         IQSTK2    SUB  IQALC2    AVAIL2
411 MCSR                   SUB  IQALC2    AVAIL2
     CSR                   SUB  IQHLD2    AVAIL2
     C*
     C*   Breakdown 2 quantity.
     C*
     CSR         *LIKE     DEFN $PRTQ3    AVAIL3
411 ACSR         IQSTK3    IFLT 0
411 ACSR                   Z-ADD0         AVAIL3
411 ACSR                   ELSE
411 ACSR                   Z-ADDIQSTK3    AVAIL3
411 ACSR                   ENDIF
411 DC*R         IQSTK3    SUB  IQALC3    AVAIL3
411 MCSR                   SUB  IQALC3    AVAIL3
     CSR                   SUB  IQHLD3    AVAIL3
     C*
210 ACSR         $PCMD     IFEQ '*AVAIL  '
     CSR                   Z-ADDAVAIL1    $PRTQ1
     CSR                   Z-ADDAVAIL2    $PRTQ2
     CSR                   Z-ADDAVAIL3    $PRTQ3
210 ACSR                   ENDIF
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  GETITM  Get item record.
     C*
     CSR         GETITM    BEGSR
     C*
     CSR         KEYIQ     CHAINPIRITEM              79
     CSR         *IN79     IFEQ *ON
     CSR                   Z-ADD0         ITUMQ2
     CSR                   Z-ADD0         ITUMQ3
     CSR                   ENDIF
     CSR                   MOVE *ON       ITMFLG
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  GETREC  Get item quantity record.
     C*
     CSR         GETREC    BEGSR
     CSR                   MOVE *OFF      ERROR   1
     C*
     C*  Get item total record.
     C*
     CSR         $PCMD     IFEQ '*AVAIL  '
     CSR         KEYIQ     CHAINITEMQTY             N7978
     CSR                   ELSE
     CSR         KEYIQ     CHAINITEMQTY              7978
     CSR                   ENDIF
     C*
     C*     Record is locked.
     C*
     CSR         *IN78     IFEQ *ON
     CSR                   MOVE *ON       ERROR
     CSR         $PTYPE    IFEQ '*INTER  '
     CSR                   EXSR ZM7980
     CSR                   MOVE '*PGMQ   '$PRTN
     CSR                   ELSE
     CSR                   MOVE '*LOCKED '$PRTN
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     C*     Record not found.
     C*
     CSR         *IN79     IFEQ *ON
     CSR                   MOVE *ON       ERROR
     CSR         $PTYPE    IFEQ '*INTER  '
     CSR                   EXSR ZM7981
     CSR                   MOVE '*PGMQ   '$PRTN
     CSR                   ELSE
     CSR                   MOVE '*NOTEXST'$PRTN
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  HOLD    Update held quantity.
     C*
     CSR         HOLD      BEGSR
     C*
     C*   Hold quantity.
     C*
     CSR                   SELEC
     CSR         $PCMD     WHEQ '*HOLD   '
     CSR                   ADD  $PQTY1    IQHLD1
     CSR                   ADD  $PQTY2    IQHLD2
     CSR                   ADD  $PQTY3    IQHLD3
     C*
     C*   Release quantity. Held quantity can not go negative.
     C*
     CSR                   OTHER
     C*
     CSR         $PQTY1    IFLT IQHLD1
     CSR                   SUB  $PQTY1    IQHLD1
     CSR                   ELSE
     CSR                   Z-ADD0         IQHLD1
     CSR                   ENDIF
     C*
     CSR         $PQTY2    IFLT IQHLD2
     CSR                   SUB  $PQTY2    IQHLD2
     CSR                   ELSE
     CSR                   Z-ADD0         IQHLD2
     CSR                   ENDIF
     C*
     CSR         $PQTY3    IFLT IQHLD3
     CSR                   SUB  $PQTY3    IQHLD3
     CSR                   ELSE
     CSR                   Z-ADD0         IQHLD3
     CSR                   ENDIF
     C*
     CSR                   ENDSL
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  HOLDN   Update held quantity for Normal qty
520aAC*
520aAC*    For *HOLDN we assume that the only qty sent to us
520aAC*    for allocation is $PQTY1.
520aAC*
520aAC*    Unlike routine HOLD, this only does allocation.
520aAC*    Routine RELESN handles unallocation.
520aAC*
520aACSR         HOLDN     BEGSR
     C*
     CSR                   ADD  $PQTY1    IQHLD1
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  HOLD1   Update held quantity for Brkdn1 qty
520aAC*
520aAC*    For *HOLD1 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY2.
520aAC*
520aAC*    Unlike routine HOLD, this only does allocation.
520aAC*    Routine RELES1 handles unallocation.
520aAC*
520aACSR         HOLD1     BEGSR
     C*
     C*   If qty is negative, then treat like a release
     C*
     CSR         $PQTY2    IFLT 0
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   EXSR RELES1
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   GOTO ENDH1
     CSR                   ENDIF
     C*
     C*   Otherwise, proceed
     C*
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY2    SVQTY2
     C*
     C*   First, hold full cases
     C*
     CSR         SVQTY2    DOWGEITUMQ2
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQHLD1
     CSR                   SUB  ITUMQ2    SVQTY2
     CSR                   ENDDO
     C*
     C*   Then hold the remaining qty from the brkdn 1 qty
     C*
     CSR         SVQTY2    IFGT 0
     CSR                   ADD  SVQTY2    IQHLD2
     CSR                   ENDIF
     C*
     C*   Last of all, see if we can convert any brkdn1's to cases.
     C*
     CSR         IQHLD2    DOWGEITUMQ2
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQHLD1
     CSR                   SUB  ITUMQ2    IQHLD2
     CSR                   ENDDO
     C*
     CSR         ENDH1     ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  HOLD2   Update held quantity for Brkdn2 qty
520aAC*
520aAC*    For *HOLD2 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY3.
520aAC*
520aAC*    Unlike routine HOLD, this only does allocation.
520aAC*    Routine RELES2 handles unallocation.
520aAC*
520aACSR         HOLD2     BEGSR
     C*
     CSR                   ADD  $PQTY3    IQHLD3
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PICK    Pick allocated quantity.
     C*
     CSR         PICK      BEGSR
     CSR                   MOVE *OFF      ERROR
     C*
     C*   Remove quantities from allocation.
     C*
     CSR                   MOVE '*UNALLOC'$PCMD
     CSR                   EXSR ALLOC
     C*
     C*   Remove quantities from stock.
     C*
     CSR                   MOVE '*UNSTOCK'$PCMD
     CSR                   EXSR STOCK
     C*
     C*   Set command back to original value.
     C*
     CSR                   MOVE '*PICK   '$PCMD
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PICKSPC  Pick special held quantity.
     C*
     CSR         PICKS     BEGSR
     CSR                   MOVE *OFF      ERROR
     C*
     C*   Remove quantities from hold.
     C*
     CSR                   MOVE '*RELEASE'$PCMD
     CSR                   EXSR HOLD
     C*
     C*   Remove quantities from stock.
     C*
     CSR                   MOVE '*UNSTOCK'$PCMD
     CSR                   EXSR STOCK
     C*
     C*   Set command back to original value.
     C*
     CSR                   MOVE '*PICKSPC'$PCMD
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  RELESN  Reduce held quantity for Normal qty
520aAC*
520aAC*    For *RELEASN we assume that the only qty sent to us
520aAC*    for allocation is $PQTY1.
520aAC*
520aACSR         RELESN    BEGSR
     C*
530aDC**         $PQTY1    IFLT IQHLD1
     CSR                   SUB  $PQTY1    IQHLD1
530aDC**                   ELSE
530aDC**                   Z-ADD0         IQHLD1
530aDC**                   ENDIF
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  RELES1  Reduce held quantity for Brkdn1 qty
520aAC*
520aAC*    For *RELEAS1 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY2.
520aAC*
520aACSR         RELES1    BEGSR
     C*
     C*   If qty is negative, then treat like a hold
     C*
     CSR         $PQTY2    IFLT 0
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   EXSR HOLD1
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   GOTO ENDR1
     CSR                   ENDIF
     C*
     C*   Otherwise, proceed
     C*
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY2    SVQTY2
     C*
     C*   First, try to release full cases
     C*
     CSR         SVQTY2    DOWGEITUMQ2
     CSR         IQHLD1    ANDGT0
     CSR         ITUMQ2    ANDGT0
     CSR                   SUB  1         IQHLD1
     CSR                   SUB  ITUMQ2    SVQTY2
     CSR                   ENDDO
     C*
     C*   Next, release brkdn 1
     C*
530aDC**         SVQTY2    IFLE IQHLD2
     CSR                   SUB  SVQTY2    IQHLD2
530aDC**                   ELSE
530aDC**                   Z-ADD0         IQHLD2
530aDC**                   ENDIF
     C*
     CSR         ENDR1     ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  RELES2  Reduce held quantity for Brkdn2 qty
520aAC*
520aAC*    For *RELEAS2 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY3.
520aAC*
520aACSR         RELES2    BEGSR
     C*
530aDC**         $PQTY3    IFLT IQHLD3
     CSR                   SUB  $PQTY3    IQHLD3
530aDC**                   ELSE
530aDC**                   Z-ADD0         IQHLD3
530aDC**                   ENDIF
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  STOCK   Update stock quantity.
     C*
     CSR         STOCK     BEGSR
210 ACSR         ITMFLG    IFEQ *OFF
210 ACSR                   EXSR GETITM
210 ACSR                   ENDIF
     C*
     C*   Add quantity to stock.
     C*
     CSR                   SELEC
     CSR         $PCMD     WHEQ '*STOCK  '
     CSR                   ADD  $PQTY1    IQSTK1
     CSR                   ADD  $PQTY2    IQSTK2
     CSR                   ADD  $PQTY3    IQSTK3
     C*
415bDC*  Make sure stock qty doesn't go negative
415bDC*
415bDC**         IQSTK1    IFLT 0
415bDC**                   Z-ADD0         IQSTK1
415bDC**                   ENDIF
415bDC**         IQSTK2    IFLT 0
415bDC**                   Z-ADD0         IQSTK2
415bDC**                   ENDIF
415bDC**         IQSTK3    IFLT 0
415bDC**                   Z-ADD0         IQSTK3
415bDC**                   ENDIF
     C*
210 ACSR                   EXSR AVAIL
210 AC*
210 AC*      Make sure breakdown qty's are not greater than
210 AC*        quantity in the unit of measure.
210 AC*
210 ACSR         AVAIL3    DOWGEITUMQ3
210 ACSR         ITUMQ3    ANDNE0
210 ACSR                   SUB  ITUMQ3    IQSTK3
210 ACSR                   SUB  ITUMQ3    AVAIL3
210 ACSR                   ADD  1         IQSTK2
210 ACSR                   ADD  1         AVAIL2
210 ACSR                   ENDDO
210 AC*
210 ACSR         AVAIL2    DOWGEITUMQ2
210 ACSR         ITUMQ2    ANDNE0
210 ACSR                   SUB  ITUMQ2    IQSTK2
210 ACSR                   SUB  ITUMQ2    AVAIL2
210 ACSR                   ADD  1         IQSTK1
210 ACSR                   ADD  1         AVAIL1
210 ACSR                   ENDDO
210 AC*
210 AC*      Make sure breakdown qty's are not negative.
210 AC*
210 ACSR         AVAIL3    DOWLT0
210 ACSR         ITUMQ3    ANDNE0
210 ACSR         IQSTK2    ANDGT0
210 ACSR                   ADD  ITUMQ3    IQSTK3
210 ACSR                   ADD  ITUMQ3    AVAIL3
210 ACSR                   SUB  1         IQSTK2
210 ACSR                   SUB  1         AVAIL2
210 ACSR                   ENDDO
210 AC*
210 ACSR         AVAIL2    DOWLT0
210 ACSR         ITUMQ2    ANDNE0
210 ACSR         IQSTK1    ANDGT0
210 ACSR                   ADD  ITUMQ2    IQSTK2
210 ACSR                   ADD  ITUMQ2    AVAIL2
210 ACSR                   SUB  1         IQSTK1
210 ACSR                   SUB  1         AVAIL1
210 ACSR                   ENDDO
     C*
     C*   Subtract quantity from stock. Stock can not go negative.
     C*
     CSR                   OTHER
     C*
     C*     Unstock normal quantity.
     C*
415aDC*R         $PQTY1    IFLT IQSTK1
     CSR                   SUB  $PQTY1    IQSTK1
415aDC*R                   ELSE
415aDC*R                   Z-ADD0         IQSTK1
415aDC*R                   ENDIF
     C*
     C*     Unstock breakdown 1 quantity.
     C*
     C*        Break carton if we need more stock.
     C*
520aACSR                   EXSR AVAIL
520aDC**         IQSTK2    DOWLT$PQTY2
520aACSR         AVAIL2    DOWLT$PQTY2
415bDC**         IQSTK1    ANDGT0
     CSR         ITMFLG    IFEQ *OFF
     CSR                   EXSR GETITM
     CSR                   ENDIF
     CSR         ITUMQ2    IFLE 0
     CSR                   LEAVE
     CSR                   ENDIF
     CSR                   SUB  1         IQSTK1
520aACSR                   SUB  1         AVAIL1
     CSR                   ADD  ITUMQ2    IQSTK2
     CSR                   ADD  ITUMQ2    AVAIL2
     CSR                   ENDDO
     C*
     C*        Now unstock quantity.
     C*
415aDC*R         $PQTY2    IFLT IQSTK2
     CSR                   SUB  $PQTY2    IQSTK2
415aDC*R                   ELSE
415aDC*R                   Z-ADD0         IQSTK2
415aDC*R                   ENDIF
     C*
     C*     Unstock breakdown 2 quantity.
     C*
     C*        Break carton if we need more stock.
     C*
     CSR         IQSTK3    DOWLT$PQTY3
415bDC**         IQSTK1    IFLE 0
415bDC**         IQSTK2    ANDLE0
415bDC**                   LEAVE
415bDC**                   ENDIF
     CSR         ITMFLG    IFEQ *OFF
     CSR                   EXSR GETITM
     CSR                   ENDIF
     CSR         ITUMQ2    IFLE 0
     CSR         ITUMQ3    ORLE 0
     CSR                   LEAVE
     CSR                   ENDIF
     CSR         IQSTK2    IFGT 0
     CSR                   SUB  1         IQSTK2
     CSR                   ADD  ITUMQ3    IQSTK3
     CSR                   ELSE
     CSR                   SUB  1         IQSTK1
     CSR                   ADD  ITUMQ2    IQSTK2
     C*
     CSR                   SUB  1         IQSTK2
     CSR                   ADD  ITUMQ3    IQSTK3
     CSR                   ENDIF
     C*
     CSR                   ENDDO
     C*
     C*        Now unstock quantity.
     C*
415aDC*R         $PQTY3    IFLT IQSTK3
     CSR                   SUB  $PQTY3    IQSTK3
415aDC*R                   ELSE
415aDC*R                   Z-ADD0         IQSTK3
415aDC*R                   ENDIF
     C*
     CSR                   ENDSL
     CSR                   ENDSR
415bAC*----------------------------------------------------------------
415bAC*
415bAC*  STOCKG  Gateway for STOCK routine.
415bAC*
415bACSR         STOCKG    BEGSR
     C*
     C*  Save values sent in.
     C*
     CSR                   MOVE $PCMD     SVCMD
     CSR                   Z-ADD$PQTY1    SVQTY1
     CSR                   Z-ADD$PQTY2    SVQTY2
     CSR                   Z-ADD$PQTY3    SVQTY3
520aAC*
520aACSR         SVCMD     IFEQ '*STOCKN'
520aACSR         SVCMD     OREQ '*STOCK1'
520aACSR         SVCMD     OREQ '*STOCK2'
520aACSR                   MOVE '*STOCK  '$PCMD
520aACSR                   ENDIF
520aAC*
520aACSR         SVCMD     IFEQ '*UNSTCKN'
520aACSR         SVCMD     OREQ '*UNSTCK1'
520aACSR         SVCMD     OREQ '*UNSTCK2'
520aACSR                   MOVE '*UNSTOCK'$PCMD
520aACSR                   ENDIF
     C*
     C*  Perform original command for positive numbers.
     C*
     CSR         SVQTY1    IFLT 0
     CSR                   Z-ADD0         $PQTY1
     CSR                   ENDIF
     CSR         SVQTY2    IFLT 0
     CSR                   Z-ADD0         $PQTY2
     CSR                   ENDIF
     CSR         SVQTY3    IFLT 0
     CSR                   Z-ADD0         $PQTY3
     CSR                   ENDIF
     C*
     CSR         $PQTY1    IFGT 0
     CSR         $PQTY2    ORGT 0
     CSR         $PQTY3    ORGT 0
     CSR                   EXSR STOCK
     CSR                   ENDIF
     C*
     C*  Perform opposite command for negative numbers.
     C*
     CSR         SVCMD     IFEQ '*STOCK'
     CSR                   MOVE '*UNSTOCK'$PCMD
     CSR                   ELSE
     CSR                   MOVE '*STOCK  '$PCMD
     CSR                   ENDIF
     C*
     CSR                   Z-ADD0         $PQTY1
     CSR                   Z-ADD0         $PQTY2
     CSR                   Z-ADD0         $PQTY3
     CSR         SVQTY1    IFLT 0
     CSR                   Z-SUBSVQTY1    $PQTY1
     CSR                   ENDIF
     CSR         SVQTY2    IFLT 0
     CSR                   Z-SUBSVQTY2    $PQTY2
     CSR                   ENDIF
     CSR         SVQTY3    IFLT 0
     CSR                   Z-SUBSVQTY3    $PQTY3
     CSR                   ENDIF
     C*
     CSR         $PQTY1    IFGT 0
     CSR         $PQTY2    ORGT 0
     CSR         $PQTY3    ORGT 0
     CSR                   EXSR STOCK
     CSR                   ENDIF
     C*
     C*  Restore original values.
     C*
     CSR                   MOVE SVCMD     $PCMD
     CSR                   Z-ADDSVQTY1    $PQTY1
     CSR                   Z-ADDSVQTY2    $PQTY2
     CSR                   Z-ADDSVQTY3    $PQTY3
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  UNALCN  UnAllocate quantity from just Normal
520aAC*
520aAC*    For *UNALCN we assume that the only qty sent to us
520aAC*    for allocation is $PQTY1.
520aAC*
520aACSR         UNALCN    BEGSR
     C*
     CSR         $PQTY1    IFLT IQALC1
     CSR                   SUB  $PQTY1    IQALC1
     CSR                   ELSE
     CSR                   Z-ADD0         IQALC1
     CSR                   ENDIF
     C*
     CSR                   ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  UNALC1  UnAllocate quantity from Normal and Brkdn 1.
520aAC*
520aAC*    For *UNALC1 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY2.
520aAC*
520aACSR         UNALC1    BEGSR
     C*
     CSR         $PQTY2    IFLT 0
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   EXSR ALLOC1
     CSR                   Z-SUB$PQTY2    $PQTY2
     CSR                   GOTO ENDUA1
     CSR                   ENDIF
     C*
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY2    SVQTY2
     C*
     C*   First, try to unallocate full cases
     C*
     CSR         SVQTY2    DOWGEITUMQ2
     CSR         IQALC1    ANDGT0
     CSR         ITUMQ2    ANDGT0
     CSR                   SUB  1         IQALC1
     CSR                   SUB  ITUMQ2    SVQTY2
     CSR                   ENDDO
     C*
     C*   Then unallocate the remaining qty from the brkdn 1 qty
     C*
     CSR         SVQTY2    DOWGT0
     C*
     C*       If enough available, unallocate entire qty.
     C*
     CSR         SVQTY2    IFLE IQALC2
     CSR                   SUB  SVQTY2    IQALC2
     CSR                   Z-ADD0         SVQTY2
     CSR                   LEAVE
     CSR                   ENDIF
     C*
     C*       Not enough availalbe, break down a case and loop.
     C*
     CSR         IQALC1    IFGT 0
     CSR         ITUMQ2    ANDGT0
     CSR                   SUB  1         IQALC1
     CSR                   ADD  ITUMQ2    IQALC2
     CSR                   ITER
     CSR                   ENDIF
     C*
     C*       Case not available, zero out allocated qty.
     C*
     CSR                   Z-ADD0         IQALC2
     C*
     CSR                   LEAVE
     CSR                   ENDDO
     C*
     C*   Now, see if stock brkdn1 can be converted to cases.
     C*
     CSR                   EXSR AVAIL
     CSR         AVAIL2    DOWGEITUMQ2
     CSR         IQSTK2    ANDGEITUMQ2
     CSR         ITUMQ2    ANDGT0
     CSR                   ADD  1         IQSTK1
     CSR                   SUB  ITUMQ2    IQSTK2
     CSR                   SUB  ITUMQ2    AVAIL2
     CSR                   ENDDO
     C*
     C*   Now, see if we need to break stock to cover brkdn1 allocated.
     C*
     CSR                   EXSR AVAIL
     CSR         AVAIL2    DOWLT0
     CSR         IQSTK1    ANDGT0
     CSR         ITUMQ2    ANDGT0
     CSR                   SUB  1         IQSTK1
     CSR                   ADD  ITUMQ2    IQSTK2
     CSR                   ADD  ITUMQ2    AVAIL2
     CSR                   ENDDO
     C*
     CSR         ENDUA1    ENDSR
520aAC*----------------------------------------------------------------
520aAC*
520aAC*  UNALC2  UnAllocate quantity from Normal, Brkdn 1 and Brkdn 2.
520aAC*
520aAC*    For *UNALC2 we assume that the only qty sent to us
520aAC*    for allocation is $PQTY3.
520aAC*
520aACSR         UNALC2    BEGSR
     CSR                   EXSR GETITM
     CSR                   Z-ADD$PQTY3    SVQTY3
     C*
     C*   Currently this routine uses the old ALLOC routine.
     C*
     CSR                   MOVE $PCMD     SVCMD
     CSR                   MOVE '*UNALLOC'$PCMD
     CSR                   EXSR ALLOC
     CSR                   MOVE SVCMD     $PCMD
     C*
     CSR                   ENDSR
415 AC*----------------------------------------------------------------
415 AC*
415 AC*  ZZERO   Check if warehouse quantity is zero.
415 AC*
415 ACSR         ZZERO     BEGSR
     C*
     C*   Check quantity.
     C*
     CSR         IQSTK1    IFLE 0
     CSR         IQSTK2    ANDLE0
     CSR         IQSTK3    ANDLE0
     CSR         IQALC1    ANDLE0
     CSR         IQALC2    ANDLE0
     CSR         IQALC3    ANDLE0
     CSR         IQHLD1    ANDLE0
     CSR         IQHLD2    ANDLE0
     CSR         IQHLD3    ANDLE0
     CSR         IQTRI1    ANDLE0
     CSR         IQTRI2    ANDLE0
     CSR         IQTRI3    ANDLE0
     CSR         IQTRO1    ANDLE0
     CSR         IQTRO2    ANDLE0
     CSR         IQTRO3    ANDLE0
     CSR                   Z-ADDTODAY     KEYDTE
     CSR                   TIME           KEYTIM
     CSR         KEYIZ     CHAINITEMZRO              79
     CSR         *IN79     IFEQ *ON
     CSR                   Z-ADDIQWHSE    IZWHSE
     CSR                   MOVE ITWHDP    IZWHDP
     CSR                   MOVE IQITEM    IZITEM
     CSR                   Z-ADDKEYDTE    IZZDTE
     CSR                   Z-ADDKEYTIM    IZZTIM
     CSR                   WRITEIZREC
740 AC*
740 AC                     ELSE
740 AC                     UNLCKITEMZRO
740 AC*
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     CSR                   ENDSR
     C*---------------------------------------------------------------
     C*
     C*  SUBROUTINE ZMxxxx  Control message display subfile
     C*
     C*    ZMCMSG  Clear message record subfile
     C*
     CSR         ZMCMSG    BEGSR
     CSR                   MOVE '0'       *IN97
     C**                   WRITEMSGCTL
     CSR                   Z-ADD*ZERO     MSGK    40
     C**                   WRITEMSGCLR
     CSR                   MOVE '*CLEAR ' #MSGID  7
     CSR                   MOVE '*NULL  ' #MSGTP  7
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*
     C*    ZMDMSG  Display message record subfile
     C*
     CSR         ZMDMSG    BEGSR
     CSR                   MOVE '1'       *IN97
     CSR         MSGK      IFGT 0
     C**                   WRITEMSGCTL
     CSR                   Z-ADD*ZERO     MSGK
     CSR                   END
     CSR                   ENDSR
     C*
     C*    ZMIMSG  Initialization necessary for message subfile
     C*
     CSR         ZMIMSG    BEGSR
     CSR                   MOVE #PROG     #PGMQ  10
     CSR                   EXSR ZMCMSG
     CSR                   ENDSR
     C*
     C*    ZMPMSG  Add message record to subfile
     C*
     CSR         ZMPMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM           #PGMQ
     CSR                   PARM           #MSGK
     CSR         #MSGID    IFNE '*CLEAR '
     C*R                   ADD  1         MSGK
     C*R                   WRITEMSGREC
     CSR                   END
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*
     C*    ZMQMSG  Add message record to subfile from program queue
     C*
     CSR         ZMQMSG    BEGSR
     CSR                   ADD  1         MSGK
     C**                   WRITEMSGREC
     CSR                   ENDSR
     C*
     C*    ZSCLR   Clear screen
     C*
     CSR         ZSCLR     BEGSR
     C**                   WRITECLRSCR
     CSR                   MOVE *ON       SCLEAR  1
     CSR                   ENDSR
     C*
     C*    ZMSMSG  Send program message to a different program msgq
     C*
     CSR         ZMSMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM $PPRG     #PGMQ2 10
     CSR                   PARM           #MSGK   4
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*    ZMnnnn  Build and send message nnnn to this program
     C*----------------------------------------------------------------
     C*     PIR7980  ITEMQTY record is locked.
     C*
     CSR         ZM7980    BEGSR
     CSR                   MOVE 'PIR7980' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE *BLANKS   $MD
     CSR                   MOVEA$PITEM    $MD,1
     CSR                   EXSR ZMSMSG
     CSR                   MOVE #MSGK     $PMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*     PIR7981  ITEMQTY record does not exist.
     C*
     CSR         ZM7981    BEGSR
     CSR                   MOVE 'PIR7981' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE *BLANKS   $MD
     CSR                   MOVEA$PITEM    $MD,1
     CSR                   EXSR ZMSMSG
     CSR                   MOVE #MSGK     $PMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*     PIR0117  Quantity could not be allocated in full.
     C*
     CSR         ZM0117    BEGSR
     CSR                   MOVE 'PIR0117' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*
     CSR                   CALL 'CVTQTY'
     CSR                   PARM '*QTY2STR'$CCMD
     CSR                   PARM #PROG     $CPRG
     CSR                   PARM $PQTY1    $CQTY1
     CSR                   PARM $PQTY2    $CQTY2
     CSR                   PARM $PQTY3    $CQTY3
     CSR                   PARM           $CUM1
     CSR                   PARM           $CUM2
     CSR                   PARM           $CUM3
     CSR                   PARM           $CQSTR
     CSR                   PARM           $CUSTR
     CSR                   PARM           $CRTN
     CSR                   PARM           $PERM
     CSR                   MOVE $CQSTR    ERORIG
     C*
     CSR                   CALL 'CVTQTY'
     CSR                   PARM '*QTY2STR'$CCMD
     CSR                   PARM #PROG     $CPRG
     CSR                   PARM $PRTQ1    $CQTY1
     CSR                   PARM $PRTQ2    $CQTY2
     CSR                   PARM $PRTQ3    $CQTY3
     CSR                   PARM           $CUM1
     CSR                   PARM           $CUM2
     CSR                   PARM           $CUM3
     CSR                   PARM           $CQSTR
     CSR                   PARM           $CUSTR
     CSR                   PARM           $CRTN
     CSR                   PARM           $PERM
     CSR                   MOVE $CQSTR    ERACTU
     CSR                   MOVEAERRMSG    $MD
     C*
     CSR                   EXSR ZMSMSG
     CSR                   MOVE #MSGK     $PMSG
     CSR                   ENDSR
