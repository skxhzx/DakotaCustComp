     F*----------------------------------------------------------------
     F*   Copyright (C) 2003 BFC Software, Inc. - All Rights Reserved
     F*   BFC Software, Inc.
     F*   245 W. Roosevelt Rd.  Bldg 8, Suite 51
     F*   West Chicago, IL  60185
     F*   (630) 562-0375
     F*----------------------------------------------------------------
     F*
     F*  PR110B  Veiew priority replenishments by seq# - Display
     F*  23 Auguse 2000
     F*  Dave Sommerville
     F*
     F*----------------------------------------------------------------
     F*  Revisions
     F*
414 AF*    08/23/00  DAS  4.14
     F*      - Created
     F*
417 AF*    07/22/03  MLB  4.17
     F*      - Enh: Recompiled. New fields added to PRPLFIL.
417aAF*    10/02/03  MLB  4.17a
     F*      - Enh: Revised function key text for F9 to F9=Slot order
     F*        from F9=Item order.
417bAF*    10/07/03  MLB  4.17b
     F*      - Enh: Revised ZZFILL to load new replenishment type
     F*        field.
     F*      - Enh: Revised ZZFILL to load new item type field
500 AF*    10/15/04  DAS  5.00
     F*      - Enh: Revised Pushback to be FlowRack.
720 AF*    03/12/18  KDE  7.20
     F*      - Enh: ADD STAGING REPLENISHMENT TYPE
740a F*    11/12/20  RH   7.40a
     F*      - Enh:  Add Created by field to View 3, JIT or Priority
     F*
     F*----------------------------------------------------------------
     F*  Notes
     F*
     F*    This program has been revised to work with option '1'
     F*    selections similar to how it works with option '4' selections.
     F*
     F*    This program uses to display subfiles to show more than one
     F*    view of the record. To see what was changed search for VW2
     F*    starting in column 1.
     F*
     F*    Allowed F17 and F18 for positioning to top and bottom.
     F*
     F*    Created a second line for commands.
     F*
     F*    CMD5 changed to chain and update each view seperately.
     F*
     F*    RECNO used for all subfiles, SFLRCDNBR not used in format member.
     F*
     F*----------------------------------------------------------------
     F*  Indicator usage
     F*
     F*  20        Position Cursor
     F*  21 - 29   Field Input Error (Reverse Display)
     F*  79        Chain Indicator
     F*  81        Display subfile records (SFLDSP)
     F*  82        Display subfile screen (SFLDSPCTL)
     F*  83        Clear subfile (SFLCLR)
     F*  84        Allow subfile to display '+' (SFLEND)
     F*  85        Manually set subfile change flag (SFLNXTCHG)
     F*  90        Protect Input Fields for Delete Display
     F*  97        Always ON (Used for SFLEND Keyword)
     F*  98        Error on screen (Sound Buzzer)
     F*  99        Universal Record Indicator (Very Temporary Usage)
     F*
     F*----------------------------------------------------------------
     F*  File Specs
     F*
740aDF*PR110BFMCF  E                    WORKSTN
740aMFPR110B01CF  E                    WORKSTN
     F                                              KINFDS INFDS
     F                                        RECNO KSFILE DSPSFL
     F                                        RECNO KSFILE VW2SFL
     F                                        RECNO KSFILE VW3SFL
     F                                        MSGK  KSFILE MSGREC
     FWORKOPT UF  E           K        DISK                      A
     FPRPLFIL1IF  E           K        DISK
     F            PRREC                             KRENAMERECORD
     E*----------------------------------------------------------------
     E*  Table and array definitions
     E*
     E                    A2          2  1
     E                    A10        10  1
     E                    A75        75  1
     E                    FKEY       10 50
     E                    UKEY       10 50
     E                    $MD       128  1
     E                    OPTLST     24  2
     E                    CMDLST     24  2
     E                    $PODSC      3 63
     E                    ZOPT   20  20  2
401 ME                    OPTLN   1   2 75
VW2 DE*                   CMDLN   1   1 79
VW2 ME                    CMDLN   1   6 79
     I*----------------------------------------------------------------
     I*  Partial key redefinition
     I*
     I$PRTKY      DS
     I                                        1  50 $LEN50
     I                                        1   30$KWHSE
     I*----------------------------------------------------------------
     I*  Data structure for FKEY and UKEY
     I*
     I            DS
     I                                        1  50 DSFKEY
     I                                        1  50 DSUKEY
     I I            0                         1   30PRWHSE
     I                                        4   8 PRWHDP
     I I            0                     P   9  110PRSEQ#
     I*----------------------------------------------------------------
     I*  Called programs
     I*
     I              'CVTDTE'              C         @CVTDT
     I              '*NONE'               C         @CHGPG
405 DI*             '*NONE'               C         @DELPG
405 MI              '*NONE'               C         @DELPG
     I              '*NONE'               C         @PRTPG
     I*----------------------------------------------------------------
     I*  Called program parameters
     I*
     I$POSTN      DS
     I                                        1   8 $POCMD
     I                                        9  18 $POPRG
     I                                       19  68 $POFKY
     I                                       69 118 $POUKY
     I                                      119 307 $PODSC
     I                                      308 322 $POPT1
     I                                      323 335 $POPT2
     I                                      336 343 $PORTN
     I                                      344 403 $POERM
     I                                      336 339 $POMSG
     I$PARMS      DS
     I                                        1   8 $PCMD
     I                                        9  18 $PPRG
     I                                       19  68 $PUKY
     I                                       69  76 $PRTN
     I                                       77 136 $PERM
     I                                       77  80 $PMSG
     I$LPARM      DS
     I                                        1   8 $LCMD
     I                                        9  18 $LPRG
     I                                       19  68 $LUKY
     I                                       69  76 $LRTN
     I                                       77 136 $LERM
     I                                       77  80 $LMSG
     I*
     I*   Redefine key
     I*
     I                                       19  210$LWHSE
     I                                       22  31 $LTRUK
     I                                       32  41 $LTRK2
     I$CVTDT      DS
     I                                        1   8 $CVCMD
     I                                        9  18 $CVPRG
     I                                       19  24 $CVD6I
     I                                       25  32 $CVD8I
     I                                       33  380$CVD6O
     I                                       39  460$CVD8O
     I                                       47  64 $CVSTO
     I                                       65  72 $CVRTN
     I                                       73 132 $CVERM
     I                                       73  76 $CVMSG
     I*----------------------------------------------------------------
     I*  Other data structures
     I*
     I            DS
     I                                        1   60DSHMS
     I                                        1   20DSHH
     I                                        3   40DSMM
     I                                        5   60DSSS
     I*----------------------------------------------------------------
     I*  Data structure for error message parameters
     I*
     I$MDT        DS
     I                                        1  50 ERRMSG
     I                                        1  10 ERRCL1
     I                                       11  16 ERRCL2
     I            DS
     I                                    P   1   20$EC
     I*----------------------------------------------------------------
     I*  Message control
     I*
     I              'PIRMSGF   '          C         #MSGF
     I*
     I            DS
     I                                        1 128 #MSGDT
     I                                        1 128 $MD
     I*----------------------------------------------------------------
     I*  Workstation exception data structure
     I*
     IINFDS       DS
     I                                     *STATUS  STATUS
     I                                      370 370 ROWIN
     I                                      371 371 COLIN
     I*----------------------------------------------------------------
     I*  Workstation exception redefinition data structure
     I*
     I            DS
     I                                    B   1   20ROW#
     I                                        2   2 ROW
     I                                    B   3   40COL#
     I                                        4   4 COL
     I*----------------------------------------------------------------
     I*  Program info data structure
     I*
     I           SDS
     I                                     *PROGRAM #PROG
     I                                      244 253 #JOB
     I                                      254 263 #USER
     I                                      264 269 #JOBN
     I                                      276 2810#JOBDT
     I                                      282 2870#JOBTM
     I*----------------------------------------------------------------
     C*  Parameters
     C*
     C*    Input Parameters
     C*      $PRTKY  Partial key
     C*
     C*    Returned Parameters
     C*      $RTNCD  *EXIT    - CMD3 was entered
     C*              *CANCEL  - CMD12 was entered
     C*
     C*----------------------------------------------------------------
     C*  Let the show begin .....
     C*
     C           *ENTRY    PLIST
     C                     PARM           $PRTKY 50
     C                     PARM           $RTNCD  8
     C*
     C*  Define keys
     C*
     C*     WORKOPT  (Unique key)
     C*
     C           WKOUNQ    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C                     KFLD           WKOKYF
     C                     KFLD           WKOKYU
     C*
     C*     WORKOPT  (Partial key)
     C*
     C           WKOPRT    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C*
     C*     WORKOPT  (Save key for top record on delete display)
     C*
     C           *LIKE     DEFN WKOKYF    $WKOF
     C           *LIKE     DEFN WKOKYU    $WKOU
     C           DELTOP    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C                     KFLD           $WKOF
     C                     KFLD           $WKOU
     C*----------------------------------------------------------------
     C*  Main line
     C*
     C                     MOVE '1'       *IN97
     C                     MOVE *BLANKS   $RTNCD
     C                     EXSR ZZINZ2
     C           NXTSCR    DOWNE'EOJ'
     C                     EXSR DSPSCR
     C           NXTSCR    CASEQ'01 '     SC1
     C           NXTSCR    CASEQ'02 '     SC2
OP1 AC           NXTSCR    CASEQ'03 '     SC3
     C                     END
     C                     END
     C*
     C*   Do some clean up before leaving.
     C*
     C                     EXSR ZSCLR
     C                     EXSR CLRSCH
     C                     SETON                     LR
     C*----------------------------------------------------------------
     C*  DSPSCR - Display screen
     C*
     CSR         DSPSCR    BEGSR
     C*
     C*   Set ON alarm indicator if error occured
     C*
     CSR         ERROR     IFEQ '1'
     CSR                   MOVE '1'       *IN98
     CSR                   END
     C*
     C*   Set OFF command key indicators
     C*
     CSR                   SETOF                     KCKEKF
     CSR                   SETOF                     KL
     C*
     C*   Overlay screen with title
     C*
     CSR                   WRITETITLE
     C*
     C*   Overlay screen with error messages
     C*
     CSR                   EXSR ZMDMSG
     C*
     C*   Overlay screen with subfile screen
     C*
     CSR         NXTSCR    IFEQ '01 '
     CSR                   EXSR SFLDSP
     CSR                   READ POSTNREC                 50
     CSR                   END
     CSR         NXTSCR    IFEQ '02 '
     CSR                   EXSR DELDSP
     CSR                   END
OP1 ACSR         NXTSCR    IFEQ '03 '
OP1 ACSR                   EXSR DELDSP
OP1 ACSR                   END
     C*
     C*   Initialize error indicators and fields
     C*
     CSR                   SETOF                     2021
     CSR                   SETOF                     98
     CSR                   MOVE '0'       WARN    1
     CSR                   MOVE '0'       ERROR   1
     CSR                   MOVE '0'       CANCEL  1
     CSR                   Z-ADD0         E       20
     C*
     C*   Initialize error subfile
     C*
     CSR                   EXSR ZMCMSG
     C*
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   READ DSPSFC                   50
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR                   READ VW2SFC                   50
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR                   READ VW3SFC                   50
VW2 ACSR                   ENDSL
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*     Screen initialization and wrap-up routines
     C*
     C*----------------------------------------------------------------
     C*
     C*  Screen 01 initialization
     C*
     CSR         SCR01I    BEGSR
     CSR                   MOVE '01 '     NXTSCR  3
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   WRITECLR0306
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 02 initialization
     C*
     CSR         SCR02I    BEGSR
     CSR                   MOVE '02 '     NXTSCR
     CSR                   MOVE '1'       *IN90
     CSR                   MOVE *LOVAL    $WKOF
     CSR                   MOVE *LOVAL    $WKOU
     CSR                   WRITECLR0306
     CSR                   WRITEDELREC
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG02
     CSR                   WRITECMDDEL
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 02 wrap-up
     C*
     CSR         SCR02E    BEGSR
     CSR                   MOVE '01 '     NXTSCR
     CSR                   MOVE '0'       *IN90
     CSR                   WRITECLR0306
     C*
     C*   If delete was not canceled (no errors)
     C*     then reposition to record just before first deleted rec.
     C*
     CSR         CANCEL    IFEQ *OFF
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   MOVE FRSTKY    $POFKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*GETPREV'$POCMD
     CSR                   EXSR FGTWAY
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   ELSE
     C*
     C*   Otherwise, position to last record read.
     C*
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   END
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   EXSR OPTNS
     CSR                   ELSE
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE $PUKY     $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   END
     CSR                   ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  Screen 03 initialization
OP1 AC*
OP1 ACSR         SCR03I    BEGSR
OP1 ACSR                   MOVE '03 '     NXTSCR
OP1 ACSR                   MOVE '1'       *IN90
OP1 ACSR                   MOVE *LOVAL    $WKOF
OP1 ACSR                   MOVE *LOVAL    $WKOU
OP1 ACSR                   WRITECLR0306
OP1 ACSR                   WRITEOP1REC
OP1 ACSR                   MOVE '*REFRESH'PAGCMD
OP1 ACSR                   EXSR PAG03
OP1 ACSR                   WRITECMDOP1
OP1 ACSR                   ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  Screen 03 wrap-up
OP1 AC*
OP1 ACSR         SCR03E    BEGSR
OP1 ACSR                   MOVE '01 '     NXTSCR
OP1 ACSR                   MOVE '0'       *IN90
OP1 ACSR                   WRITECLR0306
OP1 AC*
OP1 AC*   If option 1 was not canceled (no errors)
OP1 AC*     then reposition to record just before first deleted rec.
OP1 AC*
OP1 ACSR         CANCEL    IFEQ *OFF
OP1 ACSR                   MOVE '*POSTN2 '$POCMD
OP1 ACSR                   MOVE FRSTKY    $POFKY
OP1 ACSR                   EXSR FGTWAY
OP1 ACSR                   MOVE '*GETPREV'$POCMD
OP1 ACSR                   EXSR FGTWAY
OP1 ACSR         $PORTN    IFEQ '*NOMORE '
OP1 ACSR                   MOVE '*TOP    '$POCMD
OP1 ACSR                   ELSE
OP1 AC*
OP1 AC*   Otherwise, position to last record read.
OP1 AC*
OP1 ACSR                   MOVE '*POSTN2 '$POCMD
OP1 ACSR                   END
OP1 ACSR                   EXSR FGTWAY
OP1 ACSR                   MOVE '*REPOS  'PAGCMD
OP1 ACSR                   EXSR PAG01
OP1 ACSR                   EXSR OPTNS
OP1 ACSR                   ELSE
OP1 ACSR                   MOVE '*POSTN2U'$POCMD
OP1 ACSR                   MOVE $PUKY     $POUKY
OP1 ACSR                   EXSR FGTWAY
OP1 ACSR                   MOVE '*REPOS  'PAGCMD
OP1 ACSR                   EXSR PAG01
OP1 ACSR                   END
OP1 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*              Screen Processing Routines
     C*
     C*----------------------------------------------------------------
     C*
     C*  SC1  -  Screen 1
     C*
     CSR         SC1       BEGSR
     CSR         STATUS    CASEQROLLUP    ROLL01
     CSR         STATUS    CASEQROLLDN    ROLL01
     CSR         STATUS    CASEQCOMAND    CMD01
     CSR                   CAS            ENT01
     CSR                   END
     CSR         ENDSC1    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SC2  -  Screen 2
     C*
     CSR         SC2       BEGSR
     CSR         STATUS    CASEQROLLUP    ROLL02
     CSR         STATUS    CASEQROLLDN    ROLL02
     CSR         STATUS    CASEQCOMAND    CMD02
     CSR                   CAS            ENT02
     CSR                   END
     CSR         ENDSC2    ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  SC3  -  Screen 3
OP1 AC*
OP1 ACSR         SC3       BEGSR
OP1 ACSR         STATUS    CASEQROLLUP    ROLL03
OP1 ACSR         STATUS    CASEQROLLDN    ROLL03
OP1 ACSR         STATUS    CASEQCOMAND    CMD03
OP1 ACSR                   CAS            ENT03
OP1 ACSR                   END
OP1 ACSR         ENDSC3    ENDSR
     C*----------------------------------------------------------------
     C*
     C*          SUBROUTINES IN ALPHABETICAL ORDER
     C*
     C*----------------------------------------------------------------
     C*
     C*  *INZSR  Initialization subrotine
     C*
     CSR         *INZSR    BEGSR
     C*
     C*  Initialize special keys
     C*
     C                     Z-ADD0         ENTER   50
     C                     Z-ADD2         COMAND  50
     C                     Z-ADD01122     ROLLUP  50
     C                     Z-ADD01123     ROLLDN  50
     C                     Z-ADD01124     CLEAR   50
     C                     Z-ADD01125     HELP    50
     C*
     C*  Initialize message handling
     C*
     C                     EXSR ZMIMSG
     C*
     C*  Initialize subfile (DSPSFL) record
     C*
     C                     Z-ADD1         RECNO
     C                     WRITEDSPSFL                 79
222 DC*                    Z-ADD1         RECNO2
VW2 AC                     WRITEVW2SFL                 79
222 DC*                    Z-ADD1         RECNO3
VW2 AC                     WRITEVW3SFL                 79
     C*
     C*   Call user added initialization routine.
     C*
     C                     EXSR ZZINZ
     C                     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CLRSCH   Clear everything out of work file
     C*
     CSR         CLRSCH    BEGSR
     CSR         WKOPRT    SETLLWORKOPT
     CSR         WKOPRT    READEWORKOPT                7979
     CSR         *IN79     DOWEQ'0'
     CSR                   DELETWKOREC
     CSR         WKOPRT    READEWORKOPT                7979
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CMD01    Screen 1 command key routine
     C*
     CSR         CMD01     BEGSR
     C*
     C*  TEST FOR CMD3 - EXIT
     C*
     CSR         *INKC     IFEQ '1'
     CSR                   MOVE 'EOJ'     NXTSCR
     CSR                   MOVE '*EXIT   '$RTNCD
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  TEST FOR CMD12 - PREVIOUS
     C*
     CSR         *INKL     IFEQ '1'
     CSR                   MOVE 'EOJ'     NXTSCR
     CSR                   MOVE '*CANCEL '$RTNCD
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  EXECUTE COMMAND KEYS THAT DON'T NEED THE OPTIONS VERIFIED
     C*
     C*     TEST FOR CMD5 - REFRESH
     C*
     CSR         *INKE     IFEQ '1'
     CSR                   EXSR CLRSCH
     CSR         1         DO   10        X
     CSR         X         CHAINDSPSFL               79
222 DC*R         X         CHAINVW2SFL               79
222 DC*R         X         CHAINVW3SFL               79
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE '  '      OPTION
     CSR                   UPDATDSPSFL
222 DC*R                   UPDATVW2SFL
222 DC*R                   UPDATVW3SFL
     CSR                   END
222 ACSR         X         CHAINVW2SFL               79
222 ACSR         *IN79     IFEQ '0'
222 ACSR                   MOVE '  '      OPTION
222 ACSR                   UPDATVW2SFL
222 ACSR                   END
222 ACSR         X         CHAINVW3SFL               79
222 ACSR         *IN79     IFEQ '0'
222 ACSR                   MOVE '  '      OPTION
222 ACSR                   UPDATVW3SFL
222 ACSR                   END
     CSR                   END
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  VERIFY AND SAVE ANY OPTIONS THAT WERE ENTERED
     C*
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       CMD01E
     C*
     C*  EXECUTE COMMAND KEYS THAT DID NEED THE OPTIONS VERIFIED
     C*
     C*  TEST FOR CMD6 - ADD RECORD
     C*
     CSR         *INKF     IFEQ '1'
     CSR                   EXSR INZPAR
     CSR                   MOVE '*ADD    '$PCMD
     CSR                   CALL @CHGPG
     CSR                   PARM           $PARMS
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   ELSE
     CSR         $PRTN     IFNE '*CANCEL '
     CSR         $PRTN     ANDNE'*EXIT   '
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE $PUKY     $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   END
     CSR                   END
     CSR                   END
220 ACSR                   MOVE '*REFRESH'PAGCMD
220 ACSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
VW2 DC*  TEST FOR CMD10 - MOVE RECORD THAT CUSOR IS ON TO TOP
VW2 MC*  TEST FOR CMD20 - MOVE RECORD THAT CUSOR IS ON TO TOP
     C*
VW2 DC*R         *INKJ     IFEQ '1'
VW2 MCSR         *INKU     IFEQ '1'
     CSR                   Z-ADD0         ROW#
     CSR                   MOVE ROWIN     ROW
     CSR                   Z-ADD0         COL#
     CSR                   MOVE COLIN     COL
     C*
     C*     MAKE SURE CURSOR IS ON ONE OF THE DISPLAYED RECORDS
     C*
     CSR                   SUB  10        ROW#
     CSR         ROW#      IFLT 1
     CSR         ROW#      ORGT DSPLYD
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE *BLANKS   ERRMSG
     CSR                   EXSR ZM0106
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*     REPOSITION RECORD THAT CURSOR IS ON TO THE TOP
     C*
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE UKEY,ROW# $POUKY
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       CMD01E
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
VW2 AC*
VW2 AC*  TEST FOR CMD10 - Previous view
VW2 AC*
VW2 ACSR         *INKJ     IFEQ '1'
VW2 ACSR         VIEW      IFEQ 1
VW2 ACSR                   Z-ADDMAXVW     VIEW
VW2 ACSR                   ELSE
VW2 ACSR                   SUB  1         VIEW
VW2 ACSR                   ENDIF
VW2 ACSR         VIEW      MULT 2         V       20
VW2 ACSR                   MOVE CMDLN,V   CMDLN2
VW2 ACSR                   SUB  1         V
VW2 ACSR                   MOVE CMDLN,V   CMDLN1
VW2 ACSR                   GOTO CMD01E
VW2 ACSR                   END
VW2 AC*
VW2 AC*  TEST FOR CMD11 - Next view
VW2 AC*
VW2 ACSR         *INKK     IFEQ '1'
VW2 ACSR         VIEW      IFEQ MAXVW
VW2 ACSR                   Z-ADD1         VIEW
VW2 ACSR                   ELSE
VW2 ACSR                   ADD  1         VIEW
VW2 ACSR                   ENDIF
VW2 ACSR         VIEW      MULT 2         V       20
VW2 ACSR                   MOVE CMDLN,V   CMDLN2
VW2 ACSR                   SUB  1         V
VW2 ACSR                   MOVE CMDLN,V   CMDLN1
VW2 ACSR                   GOTO CMD01E
VW2 ACSR                   END
     C*
     C*  TEST FOR CMD17 - REPOSITION TO TOP OF DISPLAY
     C*
     CSR         *INKR     IFEQ '1'
     CSR                   MOVE '*TOP    'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  TEST FOR CMD18 - REPOSITION TO BOTTOM OF DISPLAY
     C*
     CSR         *INKS     IFEQ '1'
     CSR                   MOVE '*BOTTOM 'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*   Process non-standard function keys.
     C*
     CSR                   EXSR ZZCMD
     CSR         CMD01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CMD02    Screen 2 command key routine
     C*
     CSR         CMD02     BEGSR
     C*
     C*  TEST FOR CMD12 - PREVIOUS
     C*
     CSR         *INKL     IFEQ '1'
     CSR                   MOVE '1'       CANCEL
     CSR                   EXSR SCR02E
     CSR                   GOTO CMD02E
     CSR                   END
     CSR         CMD02E    ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  CMD03    Screen 3 command key routine
OP1 AC*
OP1 ACSR         CMD03     BEGSR
OP1 AC*
OP1 AC*  TEST FOR CMD12 - PREVIOUS
OP1 AC*
OP1 ACSR         *INKL     IFEQ '1'
OP1 ACSR                   MOVE '1'       CANCEL
OP1 ACSR                   EXSR SCR03E
OP1 ACSR                   GOTO CMD03E
OP1 ACSR                   END
OP1 ACSR         CMD03E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  DELADD   Add record to subfile for delete display
     C*
     CSR         DELADD    BEGSR
     CSR         RECNO     IFLT 11
     CSR                   ADD  1         RECNO
222 DC*R                   ADD  1         RECNO2
222 DC*R                   ADD  1         RECNO3
     CSR                   Z-ADDRECNO     Y
     C*
     C*  GET RECORD INFO
     C*
     CSR                   MOVE '*GET    '$POCMD
     CSR                   MOVE WKOKYU    $POUKY
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       DELADE
     C*
     C*  SAVE KEY TO RECORD OF FIRST SCREEN LINE
     C*
     CSR         RECNO     IFEQ 1
     CSR                   MOVE WKOKYF    $WKOF
     CSR                   MOVE WKOKYU    $WKOU
     CSR                   END
     C*
     C*  WRITE DISPLAY LINE TO SUBFILE
     C*
     CSR                   EXSR ZZFILL
     CSR                   MOVE WKOOPT    OPTION
     CSR                   WRITEDSPSFL
VW2 ACSR                   WRITEVW2SFL
VW2 ACSR                   WRITEVW3SFL
     CSR                   END
     CSR         DELADE    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  DELDSP   Display subfile of records marked for deletion
     C*
     CSR         DELDSP    BEGSR
     C*
     C*  WRITE 'BOTTOM/MORE...' FIELD TO DISPLAY
     C*
     CSR                   WRITEMORREC
     C*
     C*  WRITE SUBFILE TO DISPLAY
     C*
     CSR                   MOVE *ON       *IN81
     CSR                   Z-ADD1         RECNO
222 AC*R                   Z-ADD1         RECNO2
222 AC*R                   Z-ADD1         RECNO3
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   WRITEDSPSFC
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR                   WRITEVW2SFC
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR                   WRITEVW3SFC
VW2 ACSR                   ENDSL
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ENT01    Screen 1 enter key routine
     C*
     CSR         ENT01     BEGSR
     C*
     C*  VERIFY AND SAVE OPTIONS
     C*
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ENT01E
     C*
     C*  SEE IF USER IS TRYING TO POSITION TO A CERTAIN SPOT
     C*
     CSR                   MOVE *OFF      REPOS   1
     CSR                   EXSR ZZPOS
     CSR         REPOS     IFEQ *ON
     CSR                   MOVE DSFKEY    $POFKY
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ENT01E
     CSR                   END
     C*
     C*  IF NOT POSITIONING THEN EXECUTE THE ENTERED OPTIONS
     C*
     CSR                   EXSR OPTNS
     C*
     C*  IF OPTION WAS NOT TAKEN THEN RETURN LIKE CMD12 WAS ENTERED
     C*
     C*R         OTAKEN    IFEQ '0'
     C*R                   MOVE 'EOJ'     NXTSCR
     C*R                   GOTO ENT01E
     C*R                   END
     CSR         ENT01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ENT02    Screen 2 enter key routine
     C*
     CSR         ENT02     BEGSR
     C*
     C*  Save first delete key.
     C*
     CSR         *LIKE     DEFN $PUKY     FRSTKY
     CSR                   MOVE $PUKY     FRSTKY
     C*
     C*  Delete the records that have been selected
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       STOP
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   ELSE
     C*
     CSR         WKOOPT    IFEQ ' 4'
     C*
     C*  Call delete program
     C*
     CSR                   EXSR INZPAR
     CSR                   MOVE '*DELETE '$PCMD
     CSR                   MOVE WKOKYU    $PUKY
     CSR                   CALL @DELPG
     CSR                   PARM           $PARMS
     C*
     C*     Error occured - Error message sent back
     C*
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     C*
     C*     Error occured - Error message sent to program msgq
     C*
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   ELSE
     C*
     C*     Delete canceled
     C*
     CSR         $PRTN     IFEQ '*CANCEL '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   ELSE
     C*
     C*     Delete was successful.
     C*
     CSR         $PRTN     IFEQ '*OK     '
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         CANCEL    IFEQ '0'
     CSR                   DELETWKOREC
     CSR                   ELSE
     CSR                   MOVE '1'       WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   END
     C*
     CSR                   END
     CSR                   END
     CSR                   EXSR SCR02E
     CSR         ENT02E    ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  ENT03    Screen 3 enter key routine
OP1 AC*
OP1 ACSR         ENT03     BEGSR
OP1 AC*
OP1 AC*  Save first option 1 key.
OP1 AC*
OP1 ACSR                   MOVE $PUKY     FRSTKY
OP1 AC*
OP1 AC*  Perform option 1 on the records that have been selected
OP1 AC*
OP1 ACSR         WKOPRT    SETLLWORKOPT
OP1 ACSR                   MOVE '0'       STOP
OP1 ACSR         STOP      DOUEQ'1'
OP1 ACSR         WKOPRT    READEWORKOPT                  79
OP1 ACSR         *IN79     IFEQ '1'
OP1 ACSR                   MOVE '1'       STOP
OP1 ACSR                   ELSE
OP1 AC*
OP1 ACSR         WKOOPT    IFEQ ' 1'
OP1 AC*
OP1 AC*  Call option 1 program
OP1 AC*
OP1 ACSR                   MOVE WKOKYU    $PUKY
OP1 ACSR                   MOVE $PUKY     DSUKEY
OP1 AC*
OP1 AC*     Error occured - Error message sent to program msgq
OP1 AC*
     CSR         $PRTN     IFEQ '*PGMQ   '
OP1 ACSR                   MOVE '1'       ERROR
OP1 ACSR                   MOVE '1'       CANCEL
OP1 ACSR                   MOVE '1'       STOP
     CSR                   MOVE $PMSG     #MSGK
OP1 ACSR                   EXSR ZMQMSG
OP1 ACSR                   ELSE
OP1 AC*
OP1 AC*     Option 1 was successful.
OP1 AC*
     CSR         $PRTN     IFEQ '*OK     '
     CSR                   MOVE $PMSG     #MSGK
OP1 ACSR                   EXSR ZMQMSG
OP1 ACSR                   ENDIF
OP1 ACSR                   ENDIF
OP1 ACSR         CANCEL    IFEQ '0'
OP1 ACSR                   DELETWKOREC
OP1 ACSR                   ELSE
OP1 ACSR                   MOVE '1'       WKOERR
OP1 ACSR                   UPDATWKOREC
OP1 ACSR                   ENDIF
OP1 ACSR                   ENDIF
OP1 AC*
OP1 ACSR                   ENDIF
OP1 ACSR                   ENDDO
OP1 ACSR                   EXSR SCR03E
OP1 ACSR         ENT03E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGTWAY   Gateway to file handling routines
     C*
     C*    Input Parameters
     C*      $POCMD   *INIT    - Initialize and return
     C*               *GET     - Get record for $POUKY value
     C*               *GETNEXT - Get next record
     C*               *GETPREV - Get previous record
     C*               *WRITPOS - Write position record to display
     C*               *READPOS - Read position record
     C*               *POSTN2  - Position to $POFKY
     C*               *POSTN2U - Position to $POUKY
     C*               *TOP     - Position to top of file
     C*               *BOTTOM  - Position to bottom of file
     C*      $POFKY   Key for positioning within file
     C*      $POUKY   Unique key used for change/delete operations
     C*
     C*    Returned Parameters
     C*      $PORTN   *NOMORE  - Beginning/End of file was reached
     C*               *NOTFND  - Record not found on a GET
     C*               *FOUND   - Record found
     C*               *REPOS   - Repositioning took place
     C*               *ERROR   - Error occured
     C*      $POERM   Error message
     C*
     CSR         FGTWAY    BEGSR
     CSR                   MOVE *BLANKS   $PORTN
     CSR         $POCMD    CASEQ'*GET    'FGET
     CSR         $POCMD    CASEQ'*GETNEXT'FGETN
     CSR         $POCMD    CASEQ'*GETPREV'FGETP
     CSR         $POCMD    CASEQ'*POSTN2 'FPOS2
     CSR         $POCMD    CASEQ'*POSTN2U'FPOS2U
     CSR         $POCMD    CASEQ'*TOP'    ZZPOS2
     CSR         $POCMD    CASEQ'*BOTTOM' ZZPOS2
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGET     Get record using file with unique key
     C*
     C*              In this case the lookup file and the unique key
     C*              file are the same.
     C*
     CSR         FGET      BEGSR
     CSR                   MOVE $POUKY    DSUKEY
     CSR                   EXSR ZZFGET
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOTFND '$PORTN
     CSR                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGETN    Get next record
     C*
     CSR         FGETN     BEGSR
     CSR                   EXSR ZZFGTN
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOMORE '$PORTN
     CSR                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   EXSR ZZKEYU
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGETP    Get previous record
     C*
     CSR         FGETP     BEGSR
     CSR                   EXSR ZZFGTP
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOMORE '$PORTN
     CSR                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   EXSR ZZKEYU
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FPOS2    Position to record
     C*
     CSR         FPOS2     BEGSR
     CSR                   MOVE $POFKY    DSFKEY
     CSR         FILEKY    SETLLRECORD
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FPOS2U   Position to record using unique key
     C*
     CSR         FPOS2U    BEGSR
     C*
     C*  GET RECORD FOR UNIQUE KEY
     C*
     CSR                   EXSR FGET
     C*
     C*  POSITION TO RECORD IN LOOKUP FILE
     C*
     CSR                   EXSR FPOS2
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  INZPAR   Initialize parameters for calling add/chg/del program
     C*
     CSR         INZPAR    BEGSR
     CSR                   CLEAR$PARMS
     CSR                   MOVE #PROG     $PPRG
     CSR                   MOVE $PRTKY    $PUKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  OPTNS    Perform options that user entered
     C*
     CSR         OPTNS     BEGSR
     CSR                   MOVE '0'       OTAKEN  1
OP1 AC*
OP1 AC*     Do all option 1's together.
OP1 AC*
OP1 ACSR         WKOPRT    SETLLWORKOPT
OP1 ACSR                   MOVE '0'       STOP
OP1 ACSR         WKOPRT    READEWORKOPT                  79
OP1 ACSR         *IN79     DOWEQ'0'
OP1 ACSR         WKOOPT    ANDNE' 1'
OP1 ACSR         WKOPRT    READEWORKOPT                  79
OP1 ACSR                   ENDDO
OP1 ACSR         *IN79     IFEQ '0'
OP1 ACSR         WKOOPT    ANDEQ' 1'
OP1 ACSR                   MOVE '1'       OTAKEN
OP1 ACSR                   MOVE WKOKYU    $PUKY
OP1 ACSR                   EXSR SCR03I
OP1 ACSR                   GOTO OPTNSE
OP1 ACSR                   ENDIF
     C*
     C*     DO ALL DELETES FIRST (OPTION 4)
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       STOP
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     DOWEQ'0'
     CSR         WKOOPT    ANDNE' 4'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR                   END
     CSR         *IN79     IFEQ '0'
     CSR         WKOOPT    ANDEQ' 4'
     CSR                   MOVE '1'       OTAKEN
     CSR                   MOVE WKOKYU    $PUKY
     CSR                   EXSR SCR02I
     CSR                   GOTO OPTNSE
     CSR                   END
     C*
     C*  THEN DO THE OTHER OPTIONS IN THE ORDER THEY WERE ENTERED
     C*     STOP WHEN NO MORE OPTIONS OR USER ENTERS CMD12
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       CANCEL  1
     CSR                   MOVE '0'       STOP    1
     CSR         STOP      DOUEQ'1'
     CSR         CANCEL    OREQ '1'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   ELSE
     CSR         WKOOPT    IFNE '  '
     CSR                   MOVE '1'       OTAKEN
     CSR                   EXSR OPTNS2
     CSR         WKOUNQ    CHAINWORKOPT              78
     CSR                   MOVE '1'       REFRSH
     CSR         ERROR     IFEQ '0'
     CSR                   DELETWKOREC
     CSR                   END
     CSR         CANCEL    IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR         ERROR     IFEQ '1'
     CSR                   MOVE '1'       WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE $PUKY     $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   MOVE '0'       REFRSH
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         REFRSH    IFEQ '1'
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   MOVE '0'       REFRSH  1
     CSR                   END
     CSR         OPTNSE    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  OPTNS2   Execute individual options
     C*
     CSR         OPTNS2    BEGSR
     CSR                   EXSR INZPAR
     CSR                   MOVE WKOKYU    $PUKY
     C*
     C*   Change
     C*
     CSR         WKOOPT    IFEQ ' 2'
     CSR                   MOVE '*CHANGE '$PCMD
     CSR                   CALL @CHGPG
     CSR                   PARM           $PARMS
     CSR                   ELSE
     C*
     C*   View
     C*
     CSR         WKOOPT    IFEQ ' 5'
     CSR                   MOVE '*VIEW   '$PCMD
     CSR                   CALL @CHGPG
     CSR                   PARM           $PARMS
     CSR                   ELSE
     C*
     C*   Print
     C*
     CSR         WKOOPT    IFEQ ' 6'
     CSR                   MOVE '*PRINT  '$PCMD
     CSR                   CALL @PRTPG
     CSR                   PARM           $PARMS
     CSR                   ELSE
     CSR                   EXSR ZZOPT
     CSR                   END
     CSR                   END
     CSR                   END
     C*
     CSR         $PRTN     IFEQ '*CANCEL '
     CSR                   MOVE '1'       CANCEL
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       ERROR
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG01    Screen 1 page routines
     C*
     CSR         PAG01     BEGSR
     C*
     C*  NEXT PAGE
     C*
     CSR         PAGCMD    IFEQ '*NEXT   '
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  PREVIOUS PAGE
     C*
     CSR         PAGCMD    IFEQ '*PREV   '
     CSR                   EXSR PAG1BK
     CSR                   ELSE
     C*
     C*  TOP
     C*
     CSR         PAGCMD    IFEQ '*TOP    '
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       PAG01E
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       FORCEB
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  BOTTOM
     C*
     CSR         PAGCMD    IFEQ '*BOTTOM '
     CSR                   MOVE '1'       BOT
     CSR                   Z-ADD0         DSPLYD
     CSR                   EXSR PAG1BK
     CSR                   ELSE
     C*
     C*  REFRESH SCREEN
     C*
     CSR         PAGCMD    IFEQ '*REFRESH'
     CSR         FKEY,1    IFEQ *LOVAL
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   ELSE
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   MOVE FKEY,1    $POFKY
     CSR                   END
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       PAG01E
     CSR                   MOVE '0'       BOT
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  REPOSITIONING
     C*
     CSR         PAGCMD    IFEQ '*REPOS  '
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       FORCEB
     CSR                   EXSR PAG1FW
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   MOVE *BLANKS   PAGCMD  8
     CSR         PAG01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG02    Screen 2 page routines
     C*
     CSR         PAG02     BEGSR
     C*
     C*  NEXT PAGE
     C*
     CSR         PAGCMD    IFEQ '*NEXT   '
     CSR                   EXSR PAG2FW
     CSR                   ELSE
     C*
     C*  PREVIOUS PAGE
     C*
     CSR         PAGCMD    IFEQ '*PREV   '
     CSR                   EXSR PAG2BK
     CSR                   ELSE
     C*
     C*  REFRESH SCREEN
     C*
     CSR         PAGCMD    IFEQ '*REFRESH'
     CSR         DELTOP    SETLLWORKOPT
     CSR                   MOVE '0'       BOT
     CSR                   EXSR PAG2FW
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   MOVE *BLANKS   PAGCMD
     CSR         PAG02E    ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  PAG03    Screen 3 page routines
OP1 AC*
OP1 ACSR         PAG03     BEGSR
OP1 AC*
OP1 AC*  NEXT PAGE
OP1 AC*
OP1 ACSR         PAGCMD    IFEQ '*NEXT   '
OP1 ACSR                   EXSR PAG3FW
OP1 ACSR                   ELSE
OP1 AC*
OP1 AC*  PREVIOUS PAGE
OP1 AC*
OP1 ACSR         PAGCMD    IFEQ '*PREV   '
OP1 ACSR                   EXSR PAG3BK
OP1 ACSR                   ELSE
OP1 AC*
OP1 AC*  REFRESH SCREEN
OP1 AC*
OP1 ACSR         PAGCMD    IFEQ '*REFRESH'
OP1 ACSR         DELTOP    SETLLWORKOPT
OP1 ACSR                   MOVE '0'       BOT
OP1 ACSR                   EXSR PAG3FW
OP1 ACSR                   END
OP1 ACSR                   END
OP1 ACSR                   END
OP1 ACSR                   MOVE *BLANKS   PAGCMD
OP1 ACSR         PAG03E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG1FW   Let's see that next page of records
     C*
     CSR         PAG1FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 10 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETNEXT'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   GOTO ENDFAC
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 10 GOOD RECORDS
     C*
     CSR                   ADD  1         P
     CSR                   EXSR SFLADD
     CSR         P         IFGE 10
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR         ENDFAC    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
     CSR         ENDF      ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG1BK   Let's see the previous page
     C*
     CSR         PAG1BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     CSR         DSPLYD    ADD  10        GOBACK  20
     CSR         BOT       IFEQ '1'
     CSR         GOBACK    IFEQ 10
     CSR                   MOVE '1'       FORCEB
     CSR                   END
     CSR                   MOVE '*BOTTOM '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETPREV'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR         ENDBK     TAG
     CSR                   END
     C*
     C* IF THE TOP WAS REACHED THEN POSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   END
     CSR                   EXSR PAG1FW
     CSR         ENDB      ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG2FW   Let's see that next page of delete records
     C*
     CSR         PAG2FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF2
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    $WKOF
     CSR                   MOVE *LOVAL    $WKOU
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 10 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    READEWORKOPT                  79
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   GOTO ENDFW2
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 10 GOOD RECORDS
     C*
     CSR         WKOOPT    IFEQ ' 4'
     CSR                   ADD  1         P
     CSR                   EXSR DELADD
     CSR         P         IFGE 10
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         ENDFW2    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
     CSR         ENDF2     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG2BK   Let's see the previous page of delete records
     C*
     CSR         PAG2BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB2
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     CSR         DSPLYD    ADD  10        GOBACK  20
     CSR         BOT       IFEQ '1'
     CSR         WKOPRT    SETGTWORKOPT
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    REDPEWORKOPT                  79
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK2
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR         WKOOPT    IFEQ ' 4'
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR                   END
     CSR         ENDBK2    TAG
     CSR                   END
     C*
     C* IF WE HIT THE TOP REPOSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   END
     CSR                   EXSR PAG2FW
     CSR         ENDB2     ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  PAG3FW   Let's see that next page of delete records
OP1 AC*
OP1 ACSR         PAG3FW    BEGSR
OP1 AC*
OP1 AC*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
OP1 AC*
OP1 ACSR         BOT       CABEQ'1'       ENDF3
OP1 AC*
OP1 AC*  INITIALIZE VARIABLES FOR LOOKUP
OP1 AC*
OP1 ACSR                   EXSR SFLCLR
OP1 ACSR                   MOVE *LOVAL    $WKOF
OP1 ACSR                   MOVE *LOVAL    $WKOU
OP1 ACSR                   MOVE '0'       BOT     1
OP1 ACSR                   MOVE '0'       TOP     1
OP1 ACSR                   MOVE '0'       STOP    1
OP1 ACSR                   Z-ADD0         P       20
OP1 AC*
OP1 AC*  GET 10 RECORDS TO DISPLAY
OP1 AC*
OP1 ACSR         STOP      DOUEQ'1'
OP1 ACSR         WKOPRT    READEWORKOPT                  79
OP1 AC*
OP1 AC*  OUT OF RECORDS - INFORM USER AND SET FLAG
OP1 AC*
OP1 ACSR         *IN79     IFEQ '1'
OP1 ACSR                   MOVE '1'       STOP
OP1 ACSR                   MOVE '1'       BOT
OP1 ACSR                   MOVE 'Bottom ' MORELN
OP1 ACSR                   GOTO ENDFW3
OP1 ACSR                   END
OP1 AC*
OP1 AC*  RECORD READ - STOP AFTER 10 GOOD RECORDS
OP1 AC*
OP1 ACSR         WKOOPT    IFEQ ' 1'
OP1 ACSR                   ADD  1         P
OP1 ACSR                   EXSR DELADD
OP1 ACSR         P         IFGE 10
OP1 ACSR                   MOVE '1'       STOP
OP1 ACSR         FORCEB    IFEQ '1'
OP1 ACSR                   MOVE '1'       BOT
OP1 ACSR                   MOVE 'Bottom ' MORELN
OP1 ACSR                   ELSE
OP1 ACSR                   MOVE 'More...' MORELN
OP1 ACSR                   END
OP1 ACSR                   END
OP1 ACSR                   END
OP1 ACSR         ENDFW3    TAG
OP1 ACSR                   END
OP1 AC*
OP1 AC*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
OP1 AC*
OP1 ACSR                   Z-ADDP         DSPLYD  20
OP1 ACSR                   MOVE '0'       FORCEB
OP1 ACSR         ENDF3     ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  PAG3BK   Let's see the previous page of delete records
OP1 AC*
OP1 ACSR         PAG3BK    BEGSR
OP1 AC*
OP1 AC*  IF WE ARE AT THE TOP THEN DO NOTHING
OP1 AC*
OP1 ACSR         TOP       CABEQ'1'       ENDB3
OP1 ACSR                   MOVE '0'       FORCEB  1
OP1 AC*
OP1 AC*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
OP1 AC*
OP1 ACSR         DSPLYD    ADD  10        GOBACK  20
OP1 ACSR         BOT       IFEQ '1'
OP1 ACSR         WKOPRT    SETGTWORKOPT
OP1 ACSR                   ADD  1         GOBACK
OP1 ACSR                   END
OP1 AC*
OP1 AC*  INITIALIZE VARIABLES FOR LOOKUP
OP1 AC*
OP1 ACSR                   Z-ADD0         P
OP1 ACSR                   MOVE '0'       TOP
OP1 ACSR                   MOVE '0'       BOT
OP1 ACSR                   MOVE '0'       STOP
OP1 AC*
OP1 AC*  READ SPECIFIED FLITCHES FILE
OP1 AC*
OP1 ACSR         STOP      DOUEQ'1'
OP1 ACSR         WKOPRT    REDPEWORKOPT                  79
OP1 AC*
OP1 AC*  HIT TOP OF FILE
OP1 AC*
OP1 ACSR         *IN79     IFEQ '1'
OP1 ACSR                   MOVE '1'       STOP
OP1 ACSR                   MOVE '1'       TOP
OP1 ACSR                   GOTO ENDBK3
OP1 ACSR                   END
OP1 AC*
OP1 AC*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
OP1 AC*
OP1 ACSR         WKOOPT    IFEQ ' 1'
OP1 ACSR                   ADD  1         P
OP1 ACSR         P         IFGE GOBACK
OP1 ACSR                   MOVE '1'       STOP
OP1 ACSR                   END
OP1 ACSR                   END
OP1 ACSR         ENDBK3    TAG
OP1 ACSR                   END
OP1 AC*
OP1 AC* IF WE HIT THE TOP REPOSITION POINTER TO TOP OF FILE
OP1 AC*
OP1 ACSR         TOP       IFEQ '1'
OP1 ACSR         WKOPRT    SETLLWORKOPT
OP1 ACSR                   END
OP1 ACSR                   EXSR PAG3FW
OP1 ACSR         ENDB3     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ROLL01   Screen 1 roll up/down routine
     C*
     CSR         ROLL01    BEGSR
     C*
     C*  TEST FOR ROLLUP
     C*
     CSR         STATUS    IFEQ ROLLUP
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ROL01E
     CSR                   MOVE '*NEXT   'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ROL01E
     CSR                   END
     C*
     C*  TEST FOR ROLLDOWN
     C*
     CSR         STATUS    IFEQ ROLLDN
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ROL01E
     CSR                   MOVE '*PREV   'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ROL01E
     CSR                   END
     CSR         ROL01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ROLL02   Screen 2 roll up/down routine
     C*
     CSR         ROLL02    BEGSR
     C*
     C*  TEST FOR ROLLUP
     C*
     CSR         STATUS    IFEQ ROLLUP
     CSR                   MOVE '*NEXT   'PAGCMD
     CSR                   EXSR PAG02
     CSR                   GOTO ROL02E
     CSR                   END
     C*
     C*  TEST FOR ROLLDOWN
     C*
     CSR         STATUS    IFEQ ROLLDN
     CSR                   MOVE '*PREV   'PAGCMD
     CSR                   EXSR PAG02
     CSR                   GOTO ROL02E
     CSR                   END
     CSR         ROL02E    ENDSR
OP1 AC*----------------------------------------------------------------
OP1 AC*
OP1 AC*  ROLL03   Screen 3 roll up/down routine
OP1 AC*
OP1 ACSR         ROLL03    BEGSR
OP1 AC*
OP1 AC*  TEST FOR ROLLUP
OP1 AC*
OP1 ACSR         STATUS    IFEQ ROLLUP
OP1 ACSR                   MOVE '*NEXT   'PAGCMD
OP1 ACSR                   EXSR PAG03
OP1 ACSR                   GOTO ROL03E
OP1 ACSR                   END
OP1 AC*
OP1 AC*  TEST FOR ROLLDOWN
OP1 AC*
OP1 ACSR         STATUS    IFEQ ROLLDN
OP1 ACSR                   MOVE '*PREV   'PAGCMD
OP1 ACSR                   EXSR PAG03
OP1 ACSR                   GOTO ROL03E
OP1 ACSR                   END
OP1 ACSR         ROL03E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SAVOPT   Verify and save options that were entered
     C*
     CSR         SAVOPT    BEGSR
     C*
     C*  READ ONLY THE CHANGED OPTIONS
     C*
     CSR                   MOVE '0'       NOMORE  1
     CSR         NOMORE    DOUEQ'1'
     CSR                   MOVE '0'       *IN21
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   READCDSPSFL                   79
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR                   READCVW2SFL                   79
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR                   READCVW3SFL                   79
VW2 ACSR                   ENDSL
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       NOMORE
     CSR                   GOTO ENDDO1
     CSR                   END
     C*
     C*  DISPLAY ERROR IF OPTION IS NOT VALID
     C*
     CSR         OPTION    IFNE *BLANKS
     CSR                   MOVEAOPTION    A2
     CSR         A2,2      IFEQ ' '
     CSR                   MOVE A2,1      A2,2
     CSR                   MOVE ' '       A2,1
     CSR                   MOVEAA2        OPTION
     CSR                   END
     C*
     C*    LOOK UP OPTION IN PROFILE - ERROR IF NOT FOUND
     C*
     CSR         OPTION    LOKUPZOPT                     50
     CSR         *IN50     IFEQ *OFF
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
     CSR                   MOVE *BLANKS   ERRMSG
     CSR                   EXSR ZM0108
     CSR                   END
     CSR                   END
     C*
     C*  SAVE OPTION
     C*
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   Z-ADDRECNO     Y       30
VW2 ACSR         VIEW      WHEQ 2
222 DC*R                   Z-ADDRECNO2    Y       30
222 MCSR                   Z-ADDRECNO     Y       30
VW2 ACSR         VIEW      WHEQ 3
222 DC*R                   Z-ADDRECNO3    Y       30
222 MCSR                   Z-ADDRECNO     Y       30
VW2 ACSR                   ENDSL
     CSR                   MOVE FKEY,Y    WKOKYF
     CSR                   MOVE UKEY,Y    WKOKYU
     CSR         WKOUNQ    CHAINWORKOPT              79
     CSR         *IN79     IFEQ '0'
     CSR         OPTION    IFEQ *BLANKS
     CSR                   DELETWKOREC
     CSR                   ELSE
     CSR                   MOVE OPTION    WKOOPT
     CSR                   MOVE *IN21     WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   ELSE
     CSR         OPTION    IFNE *BLANKS
     CSR                   MOVE #USER     WKOUSR
     CSR                   MOVE #PROG     WKOPGM
     CSR                   MOVE FKEY,Y    WKOKYF
     CSR                   MOVE UKEY,Y    WKOKYU
     CSR                   MOVE OPTION    WKOOPT
     CSR                   MOVE *IN21     WKOERR
     CSR                   WRITEWKOREC
     CSR                   END
     CSR                   END
     CSR         ENDDO1    TAG
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLADD   Add record to subfile
     C*
     CSR         SFLADD    BEGSR
     CSR         RECCNT    IFLT 11
     CSR                   ADD  1         RECCNT
     CSR                   Z-ADDRECCNT    RECNO
222 DC*R                   Z-ADDRECCNT    RECNO2
222 DC*R                   Z-ADDRECCNT    RECNO3
     CSR                   Z-ADDRECCNT    Y
     C*
     C*  SAVE FILE AND UNIQUE KEYS
     C*
     CSR                   MOVE $POFKY    FKEY,Y
     CSR                   MOVE $POUKY    UKEY,Y
     C*
     C*  WRITE DISPLAY LINE TO SUBFILE
     C*
     CSR                   EXSR ZZFILL
     CSR                   WRITEDSPSFL
VW2 ACSR                   WRITEVW2SFL
VW2 ACSR                   WRITEVW3SFL
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLCLR   Clear display subfile
     C*
     CSR         SFLCLR    BEGSR
     C*
     C*  CLEAR DISPLAY SUBFILE
     C*
     CSR                   MOVE *OFF      *IN81
     CSR                   MOVE *OFF      *IN82
     CSR                   MOVE *ON       *IN83
     CSR                   MOVE *ON       *IN84
     C*
     CSR                   WRITEDSPSFC
VW2 ACSR                   WRITEVW2SFC
VW2 ACSR                   WRITEVW3SFC
     CSR                   Z-ADD0         RECCNT  40
     CSR                   Z-ADD1         POSREC  40
     CSR                   Z-ADD0         RECNO   40
222 DC*R                   Z-ADD0         RECNO2  40
222 DC*R                   Z-ADD0         RECNO3  40
     C*
     CSR                   MOVE *ON       *IN82
     CSR                   MOVE *OFF      *IN83
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLDSP   Display subfile
     C*
     CSR         SFLDSP    BEGSR
     C*
     C*  WRITE OPTION AND COMMAND LINES TO DISPLAY
     C*
     CSR                   WRITEOPTREC
     CSR                   WRITECMDREC
     C*
     C*  WRITE 'BOTTOM/MORE...' FIELD TO DISPLAY
     C*
     CSR                   WRITEMORREC
     C*
     C*  WRITE POSITION TO FIELD TO DISPLAY
     C*
     CSR                   WRITEPOSTNREC
     C*
     C*  GET ANY EXISTING VALUES FOR THE OPTIONS
     C*
     CSR                   EXSR SFLOPT
     C*
     C*  POSITION CURSOR TO FIRST OPTION WHEN NO ERRORS EXIST
     C*
     CSR         ERROR     IFNE '1'
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR         1         CHAINDSPSFL               79
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE '1'       *IN20
     CSR                   UPDATDSPSFL
     CSR                   END
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR         1         CHAINVW2SFL               79
VW2 ACSR         *IN79     IFEQ '0'
VW2 ACSR                   MOVE '1'       *IN20
VW2 ACSR                   UPDATVW2SFL
VW2 ACSR                   END
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR         1         CHAINVW3SFL               79
VW2 ACSR         *IN79     IFEQ '0'
VW2 ACSR                   MOVE '1'       *IN20
VW2 ACSR                   UPDATVW3SFL
VW2 ACSR                   END
VW2 ACSR                   ENDSL
     CSR                   END
     C*
     C*  WRITE SUBFILE TO DISPLAY
     C*
222 DC*R         RECCNT    IFGT 0
     CSR                   MOVE *ON       *IN81
222 DC*R                   ENDIF
     CSR                   Z-ADDPOSREC    RECNO
222 DC*R                   Z-ADDPOSREC    RECNO2
222 DC*R                   Z-ADDPOSREC    RECNO3
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   WRITEDSPSFC
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR                   WRITEVW2SFC
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR                   WRITEVW3SFC
VW2 ACSR                   ENDSL
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLOPT   Initialize options for subfile
     C*
     CSR         SFLOPT    BEGSR
     CSR         1         DO   10        X       30
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR         X         CHAINDSPSFL               79
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR         X         CHAINVW2SFL               79
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR         X         CHAINVW3SFL               79
VW2 ACSR                   ENDSL
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE FKEY,X    WKOKYF
     CSR                   MOVE UKEY,X    WKOKYU
     CSR         WKOUNQ    CHAINWORKOPT              78
     CSR         *IN78     IFEQ '0'
     CSR                   MOVE WKOOPT    OPTION
     CSR                   MOVE WKOERR    *IN21
     CSR                   MOVE WKOERR    *IN20
     CSR                   ELSE
     CSR                   MOVE *BLANKS   OPTION
     CSR                   MOVE '0'       *IN21
     CSR                   MOVE '0'       *IN20
     CSR                   END
VW2 ACSR                   SELEC
VW2 ACSR         VIEW      WHEQ 1
     CSR                   UPDATDSPSFL
VW2 ACSR         VIEW      WHEQ 2
VW2 ACSR                   UPDATVW2SFL
VW2 ACSR         VIEW      WHEQ 3
VW2 ACSR                   UPDATVW3SFL
VW2 ACSR                   ENDSL
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SUBROUTINE ZMxxxx  Control message display subfile
     C*
     C*    ZMCMSG  Clear message record subfile
     C*
     CSR         ZMCMSG    BEGSR
     CSR                   MOVE '0'       *IN97
     CSR                   WRITEMSGCTL
     CSR                   Z-ADD*ZERO     MSGK    40
     CSR                   MOVE '*CLEAR ' #MSGID  7
     CSR                   MOVE '*NULL  ' #MSGTP  7
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*
     C*    ZMDMSG  Display message record subfile
     C*
     CSR         ZMDMSG    BEGSR
     CSR                   WRITEMSGCLR
     CSR                   MOVE '1'       *IN97
     CSR         MSGK      IFGT 0
     CSR                   WRITEMSGCTL
     CSR                   Z-ADD*ZERO     MSGK
     CSR                   END
     CSR                   ENDSR
     C*
     C*    ZMIMSG  Initialization necessary for message subfile
     C*
     CSR         ZMIMSG    BEGSR
     CSR                   MOVE #PROG     #PGMQ  10
     CSR                   EXSR ZMCMSG
     CSR                   ENDSR
     C*
     C*    ZMPMSG  Add message record to subfile
     C*
     CSR         ZMPMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM #PROG     #PGMQ
     CSR                   PARM           #MSGK
     CSR         #MSGID    IFNE '*CLEAR '
     CSR                   ADD  1         MSGK
     CSR                   WRITEMSGREC
     CSR                   END
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*
     C*    ZMQMSG  Add message record to subfile from program queue
     C*
     CSR         ZMQMSG    BEGSR
     CSR                   ADD  1         MSGK
     CSR                   WRITEMSGREC
     CSR                   ENDSR
     C*
     C*    ZSCLR   Clear screen
     C*
     CSR         ZSCLR     BEGSR
     C*R                   WRITECLRSCR
     CSR                   MOVE *ON       SCLEAR  1
     CSR                   ENDSR
     C*
     C*    ZMSMSG  Send program message to a different program msgq
     C*
     CSR         ZMSMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM '*PREV'   #PGMQ
     CSR                   PARM           #MSGK
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*    ZMnnnn  Build and send message nnnn to this program
     C*----------------------------------------------------------------
     C*      0001  Option under construction.
     C*
     CSR         ZM0001    BEGSR
     CSR                   MOVE 'PIR0001' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0101  Program not found.
     C*
     CSR         ZM0101    BEGSR
     CSR                   MOVE 'PIR0101' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0102  Program not found.
     C*
     CSR         ZM0102    BEGSR
     CSR                   MOVE 'PIR0102' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0103  Program not found while exec. subroutine.
     C*
     CSR         ZM0103    BEGSR
     CSR                   MOVE 'PIR0103' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0104  Pressed an invalid key.
     C*
     CSR         ZM0104    BEGSR
     CSR                   MOVE 'PIR0104' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0105
     C*
     CSR         ZM0105    BEGSR
     CSR                   MOVE 'PIR0105' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0106  Invalid cursor position.
     C*
     CSR         ZM0106    BEGSR
     CSR                   MOVE 'PIR0106' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0107  Invalid value for "position To"
     C*
     CSR         ZM0107    BEGSR
     CSR                   MOVE 'PIR0107' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0108  Invalid Option.
     C*
     CSR         ZM0108    BEGSR
     CSR                   MOVE 'PIR0108' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVELOPTION    ERRMSG
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*   PIR9905  Cursor not in correct position for lookup.
     C*
     CSR         ZM9905    BEGSR
     CSR                   MOVE 'PIR9905' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE *BLANKS   $MD
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZCMD    Process non-standard function keys
     C*
     CSR         ZZCMD     BEGSR
     C*
     C*  Test for F4 - Lookup
     C*
     CSR         *INKD     IFEQ '1'
     CSR                   Z-ADD0         ROW#
     CSR                   MOVE ROWIN     ROW
     CSR                   Z-ADD0         COL#
     CSR                   MOVE COLIN     COL
     C*
     C*     Warehouse.
     C*
     CSR         ROW#      IFEQ 4
     CSR         COL#      ANDGE48
     CSR                   MOVE '1'       *IN01
     CSR                   MOVE '*LOOKUP '$LCMD
     CSR                   Z-ADDPTINP1    $LWHSE
     CSR                   CALL 'WH900'
     CSR                   PARM           $LPARM
     CSR         $LRTN     IFEQ '*SELECT '
     CSR                   Z-ADD$LWHSE    PTINP1
     CSR                   END
     CSR                   ELSE
     C*
     C*     Cursor not on a valid lookup field.
     C*
     CSR                   MOVE '1'       ERROR
     CSR                   EXSR ZM9905
     CSR                   END
     CSR                   GOTO ENDCM1
     CSR                   END
     C*
     C*  Test for F9 - Display all warehouses
     C*
     CSR         *INKI     IFEQ '1'
     CSR                   MOVE 'EOJ'     NXTSCR
     CSR                   MOVE '*F9     '$RTNCD
     CSR                   GOTO ENDCM1
     CSR                   ENDIF
     C*
     CSR         ENDCM1    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGET   Get record with unique key.
     C*
     CSR         ZZFGET    BEGSR
     C*
     C*    Code to use when file key and unique key are the same.
     C*
     CSR         FILEKY    CHAINRECORD               79
     C*
     C*    Code to use when file key and unique key are different.
     C*
     C*R         FILUKY    CHAINRECORDU              79
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGTN   Get next record
     C*
     CSR         ZZFGTN    BEGSR
     CSR         TRY1      TAG
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*                    READ RECORD                   79
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         PARTKY    READERECORD                   79
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGTP   Get previous record
     C*
     CSR         ZZFGTP    BEGSR
     CSR         TRY2      TAG
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*R                   READPRECORD                   79
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         PARTKY    REDPERECORD                   79
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFILL   Fill display line with values that need
     C*           to be converted.
     C*
     CSR         ZZFILL    BEGSR
     C*
     C*   Added date
     C*
     CSR         PRADTE    IFEQ 0
     CSR                   Z-ADD0         W2ADTE
     CSR                   ELSE
     CSR                   MOVE '*CMDMDY '$CVCMD
     CSR                   MOVE PRADTE    $CVD8I
     CSR                   CALL @CVTDT
     CSR                   PARM           $CVTDT
     CSR                   Z-ADD$CVD6O    W2ADTE
     CSR                   ENDIF
417bAC*
417bAC*   Item type
417bAC*
417bACSR                   SELEC
417bACSR         PRTYPE    WHEQ 'B'
417bACSR                   MOVEL'Breakdow'W2ITMT    P
417bACSR                   MOVE 'n '      W2ITMT
417bAC*
417bACSR                   OTHER
417bAC*
417bACSR                   MOVEL'Normal  'W2ITMT    P
417bACSR                   ENDSL
417bAC*
417bAC*   Replenishment type
417bAC*
417bACSR                   SELEC
500 DC**         PRRPLT    WHEQ 'E'
500 DC**                   MOVEL'Eaches  'W3RPLT    P
500 MCSR         PRRPLT    WHEQ 'B'
500 MCSR                   MOVEL'BreakDow'W3RPLT    P
500 MCSR                   MOVE 'n '      W3RPLT
417bAC*
500 DC**         PRRPLT    WHEQ 'P'
500 DC**                   MOVEL'Pushback'W3RPLT    P
500 MCSR         PRRPLT    WHEQ 'F'
500 MCSR                   MOVEL'FlowRack'W3RPLT    P
720 ACSR         PRRPLT    WHEQ 'R'
720 ACSR                   MOVEL'Repack  'W3RPLT    P
720 ACSR         PRRPLT    WHEQ 'S'
720 ACSR                   MOVEL'Staging 'W3RPLT    P
417bAC*
417bACSR                   OTHER
417bAC*
417bACSR                   MOVEL'Normal  'W3RPLT    P
417bACSR                   ENDSL
740aAC*
740aAC*   Created by: JIT or Priority
740aAC*
740aACSR                   SELEC
740aACSR         PRSEQ#    WHLT 0
740aACSR                   MOVEL'JIT     'W3CRTD    P
740aACSR                   OTHER
740aACSR                   MOVEL'Priority'W3CRTD    P
740aACSR                   ENDSL
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZINZ    Extra program initialization. Called from *INZSR.
     C*
     CSR         ZZINZ     BEGSR
     CSR                   MOVE *ON       FOREVR  1
     C*
     C*  Define full key for main file.
     C*
     CSR         FILEKY    KLIST
     CSR                   KFLD           PRWHSE
     CSR                   KFLD           PRWHDP
     CSR                   KFLD           PRSEQ#
     C*
     C*  Define UNIQ key for main file.
     C*
     CSR         FILUKY    KLIST
     CSR                   KFLD           PRWHSE
     CSR                   KFLD           PRWHDP
     CSR                   KFLD           PRSEQ#
     C*
     C*  Define partial key for main file (if needed).
     C*
     CSR         PARTKY    KLIST
     CSR                   KFLD           $KWHSE
     C*
     C*  Setup option and command display lines.
     C*
VW2 ACSR                   Z-ADD1         VIEW    10
VW2 ACSR                   Z-ADD3         MAXVW   10
     CSR                   MOVE OPTLN,1   OPTLN1
401 ACSR                   MOVE OPTLN,2   OPTLN2
     CSR                   MOVE CMDLN,1   CMDLN1
VW2 ACSR                   MOVE CMDLN,2   CMDLN2
     C*
     CSR                   MOVE #PROG     $PPRG
     CSR                   MOVE #PROG     $LPRG
     CSR                   MOVE #PROG     $CVPRG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZINZ2   Extra program initialization. Called from *INZSR.
     C*
     CSR         ZZINZ2    BEGSR
     C*
     C*   Get warehouse for user.
     C*
     CSR                   CALL 'GETWHSE'
     CSR                   PARM           #USER
     CSR         PRWHSE    PARM 0         #WHSE   30
     C*
     C*   Verify warehouse and get description.
     C*
     CSR                   Z-ADDPRWHSE    WHCODE
     CSR                   MOVE *BLANKS   WHDESC
     CSR                   MOVE '*VERIFY '$LCMD
     CSR                   Z-ADDPRWHSE    $LWHSE
     CSR                   CALL 'WH900'
     CSR                   PARM           $LPARM
     CSR         $LRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
     CSR                   MOVE '1'       *IN01
     CSR                   MOVEL$LERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     CSR         $LRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
     CSR                   MOVE '1'       *IN01
     CSR                   MOVE $LMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   ELSE
     CSR                   Z-ADDPRWHSE    $KWHSE
     CSR                   Z-ADDPRWHSE    WHCODE
     CSR                   MOVEL$LERM     WHDESC
     CSR                   END
     CSR                   END
     C*
     CSR                   EXSR CLRSCH
     CSR                   EXSR SCR01I
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZKEYF   Create key for file being used
     C*
     CSR         ZZKEYF    BEGSR
     CSR                   MOVE DSFKEY    $POFKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZKEYU   Create unique key for file
     C*             (to be used in delete and change programs)
     C*
     CSR         ZZKEYU    BEGSR
     CSR                   MOVE DSUKEY    $POUKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZOPT    Process non-standard options.
     C*              Note: Error handling is done in routine OPTNS2.
     C*
     CSR         ZZOPT     BEGSR
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZPOS    Position to a different record.
     C*
     CSR         ZZPOS     BEGSR
     C*
     C*  See if user is trying to change warehouse.
     C*
     CSR         PTINP1    IFNE 0
     C*
     C*      Verify warehouse entry.
     C*
     CSR                   Z-ADDPTINP1    WHCODE
     CSR                   MOVE *BLANKS   WHDESC
     CSR                   MOVE '*VERIFY '$LCMD
     CSR                   Z-ADDPTINP1    $LWHSE
     CSR                   CALL 'WH900'
     CSR                   PARM           $LPARM
     CSR         $LRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
     CSR                   MOVE '1'       *IN01
     CSR                   MOVEL$LERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   GOTO ENDZPS
     CSR                   ELSE
     CSR         $LRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
     CSR                   MOVE '1'       *IN01
     CSR                   MOVE $LMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   GOTO ENDZPS
     CSR                   ELSE
     CSR                   Z-ADDPTINP1    PRWHSE
     CSR                   Z-ADDPRWHSE    $KWHSE
     CSR                   MOVE *BLANKS   PRWHDP
     CSR                   Z-ADD0         PRSEQ#
     CSR                   Z-ADDPTINP1    WHCODE
     CSR                   MOVEL$LERM     WHDESC
     CSR                   Z-ADD0         PTINP1
     CSR                   MOVE *ON       REPOS
     CSR                   END
     CSR                   END
     CSR                   END
     C*
     C*  See if user is trying to position to code
     C*
     CSR         PTINP2    IFNE *BLANKS
     CSR                   MOVE PTINP2    PRWHDP
     CSR                   Z-ADD0         PRSEQ#
     CSR                   MOVE *BLANKS   PTINP2
     CSR                   MOVE *ON       REPOS
     CSR                   END
     C*
     C*  See if user is trying to position to seq#
     C*
     CSR         PTINP3    IFNE 0
     CSR                   MOVE PTINP3    PRSEQ#
     CSR                   Z-ADD0         PTINP3
     CSR                   MOVE *ON       REPOS
     CSR                   END
     CSR         ENDZPS    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZPOS2   Position to record
     C*
     CSR         ZZPOS2    BEGSR
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*R         $POCMD    IFEQ '*TOP'
     C*R         *LOVAL    SETLLRECORD
     C*R                   ELSE
     C*R         $POCMD    IFEQ '*BOTTOM'
     C*R         *HIVAL    SETLLRECORD
     C*R                   END
     C*R                   END
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         $POCMD    IFEQ '*TOP'
     CSR         PARTKY    SETLLRECORD
     CSR                   ELSE
     CSR         $POCMD    IFEQ '*BOTTOM'
     CSR         PARTKY    SETGTRECORD
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     O*----------------------------------------------------------------
     O*
     O*  Compile time tables
     O*
**  ZOPT - Valid options

**  OPTLN - Option display line


**  CMDLN - Command display line
F3=Exit  F4=Prompt  F5=Refresh  F9=Slot order  F12=Cancel
F10=View 3  F11=View 2  F17=Top  F18=Bottom  F20=Move to top
F3=Exit  F4=Prompt  F5=Refresh  F9=Slot order  F12=Cancel
F10=View 1  F11=View 3  F17=Top  F18=Bottom  F20=Move to top
F3=Exit  F4=Prompt  F5=Refresh  F9=Slot order  F12=Cancel
F10=View 2  F11=View 1  F17=Top  F18=Bottom  F20=Move to top
