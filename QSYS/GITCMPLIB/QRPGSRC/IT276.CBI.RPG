     F*----------------------------------------------------------------
     F*   Copyright (C) 2006 BFC Software, Inc. - All Rights Reserved
     F*   BFC Software, Inc.
     F*   245 W. Roosevelt Rd.  Bldg 8, Suite 51
     F*   West Chicago, IL  60185
     F*   (630) 562-0375
     F*----------------------------------------------------------------
     F*
     F*  IT276   RF- slot replenishments - VM   8 X 40
     F*  18 June, 1999
     F*  Roxanne Harrison
     F*  Created using IT271 full screen.
     F*
     F*----------------------------------------------------------------
     F*  Revisions
     F*
AFI  F*    09/21/97  DAS  AFI
     F*      - Made sure slot record was being unlocked.
     F*
AFI  F*    09/21/97  DAS  AFI
     F*      - Not allowed to select slot if available qty is = 0.
     F*
406  F*    09/24/97  DAS  4.06
     F*      - Revised to display pick slot record in the list.
408 AF*    01/23/98  RH   4.08
    AF*      - Revised to update pick slot entered and expiration dates
     F*        with dates from 'From' slot.
409 AF*    06/29/98  RH   4.09
    AF*      - Revised to verify zero slots, added SC3 Verify Zero Slot
     F*        Currently all qty in the slot is taken, so SC3 is
     F*        displayed each time.  Future update - add screen with
     F*        qty defaulted to slot qty and allow it to be changed.
     F*        Add $RZERO verify zero slot parm and pass back to IT270.
    AF*      - Revised to work with virtual slots.
409A F*    07/06/98  RH      4.09
     F*      - Can't verify slot if it has virtual slots tied to it.
     F*        Don't display SC3.
410 AF*      - Revised to start an Idle task, when repl. task is
     F*        ended. ZZTASK, ZZCKU2, ZZTIME AND ZM72 routines added.
411  F*    07/02/99  RH
     F*      - Revised to replenish entered quantity, change SC3 to SC4
412  F*    07/15/99  RH  V4.12
     F*      - Revised screens from 8 lines to 3.
     F*
412  F*    09/15/99  DAS  4.12
     F*      - Revised ZZSTRT to change 'Z' or 'V' status of the
     F*        'To' slot to 'A'.
     F*
413 AF*    02/14/00  HNK  4.13
     F*      - Revised to ignore Idle task in ZZCKU2 routine.
     F*        Only indirect task used to subtract overlapping task.
     F*
414aAF*    08/03/00  MLB  4.14a
     F*      - Revised to allow pgm to create transaction after just
     F*        scanning the selected slot. This will only be allowed
     F*        with program LT105.  All others, pgm will function as
     F*        originally designed.
414bAF*    08/08/00  MLB  4.14b
     F*      - Revised arrays ZOPT, OPTLN to add new option 1=Select.
     F*      - Revised OPTNS2 to add call to new routine ZZSLCT to
     F*        process new option.
414cAF*    08/28/00  MLB  4.14c
     F*      - Revised the program to add row/column positioning to
     F*        the program whenever user scans a slot.
414dAF*    08/28/00  MLB  4.14d
     F*      - Revised the program to not allow pick slots to be selected
     F*        as a pull from slot.
414eAF*    10/12/00  MLB  4.14e
     F*      - Revised the program to only allow user to use 1=Select on
     F*        one subfile entry.
     F*
415aAF*    05/03/01  MLB  4.15a
     F*      - Revised program to not update SLEXPD and SLENTD when
     F*        the calling program is LT105. LT105 is performing
     F*        the date updates.
415bAF*    06/12/01  MLB  4.15b
     F*      - Revised routines ZZFGTN,ZZFGTP to not include virtual
     F*        slots that are at "Z" status.
     F*
416 AF*    10/15/01  MLB  4.16
     F*      - Revised SAVOPT to remove clear of OPTCNT.  Clear of
     F*        OPTCNT added to CLRSCH.
416aAF*    12/06/01  MLB  4.16a
     F*      - Added file PIRTRAN1.
     F*      - Revised ZZTASK to first look at PIRTRAN1 for a status
     F*        '2' record. This will save reading through every record
     F*        for the employee.
416bAF*    12/19/01  MLB  4.16b
     F*      - Added files ITMEXCP, OPTIONS.
     F*      - Added OPTIONS DS *REPLEN.
     F*      - Revised program to test whether user can select
     F*        expired items for replenishement.
     F*      - Revised program to test whether user can select
     F*        items for replenishement out of FIFO order.
416cAF*    12/28/01  MLB  4.16c
     F*      - Revised program allow user to log exception for
     F*        an overflow slot by typing a X in the option field
     F*        and pressing Enter.
416dAF*    01/17/02  MLB  4.16d
     F*      - Added test for expired product to make sure that the
     F*        slot expiration date is greater than zero.
416eAF*    02/01/02  MLB  4.16e
     F*      - Added f8 to call license plate info program.
     F*      - Revised CMD01 to add call to LP120CL.
     F*      - Revised CMDLN arrary to add F8=Lic inf cmd text.
416fAF*    02/07/02  MLB  4.16f
     F*      - Revised ZZEXCP to use SLWHDP instead of $PWHDP.
     F*
416gAF*    02/19/02  DAS  4.16g
     F*      - Revised to work with DRISLOT interface.
     F*      - Added external data structure $SLOT.
     F*      - Added routines ZZZD2S, ZZZCOP, ZZZISF, ZZZFS2, ZZZFS3
     F*
416hAF*    06/12/02  DAS  4.16h
     F*      - Changed field A$LIC# from 7.0 to 15.
416iAF*    09/26/02  MLB  4.16i
     F*      - Enh: Added new routine ZZEXSL to write record to slot
     F*        exception file.
     F*      - Rename SLTRPEX fields to use 'SX'.
     F*        Re: $SLOT data structure already using 'SE' prefix.
416jAF*    12/06/02  MLB  4.16j
     F*     - Enh: Program will capture date/time on entry. This will be
     F*       passed to ADDSTDTRN2. This will enable the Specific Slot
     F*       transaction to more accurately reflect the time the user
     F*       started the transaction.
416kAF*    12/04/02  MLB  4.16k
     F*      - Enh: Revised ZZFGTN,ZZFGTP to omit all slots that are
     F*        not at active status.
417 AF*    02/13/03  MLB  4.17
     F*      - Fix: Revised ZZSTRT to call new routine ZZENDI to close
     F*        any open(inuse) Indirect tasks before closing current
     F*        direct task.  Having Indirect tasks still open while
     F*        closing the current task was causing the direct task
     F*        to be updated with negative direct minutes.
417aAF*    04/14/03  MLB  4.17a
     F*      - Enh: Added support to allow display of overflow locations
     F*        to be limited to one at a time.
417bAF*    05/15/03  MLB  4.17b
     F*      - Enh: Added 16-line support to program.
417cAF*    05/15/03  MLB  4.17c
     F*      - Enh: Added lot/license plate tracking support to program.
417dAF*    04/05/04  MLB  4.17d
     F*      - Enh: Revised program to add support for creating re-
     F*        plenishments for breakdown items.
     F*      - Added file ITEMLNK.
417eAF*    09/08/04  DAS  4.17e
     F*      - Fix: Needed to initialize KYITEM in ZZINZ2 because of
     F*        417d change.
     F*
500 AF*    03/15/05  MLB  5.00
     F*      - Enh: Revised program to add support tracking slot outs.
     F*        Added F10=Out to allow user to flag an item that doesn't
     F*        have any available overflow slots to replenish the pick
     F*        slot.
     F*      - Revised text for array CMDLN to combine F3/F12 together
     F*        and F10=Out added.
     F*      - File SLOTOUT added.
     F*      - Added new entry to array DESC.
500aAF*    08/05/05  MLB  5.00a
     F*      - Enh: Change to 5.00 mod. Removed file SLOTOUT from program.
     F*        Processing added to pgm RU380.
     F*      - Removed requirement to compile pgm with CVTOPT(*DATETIME).
     F*        Note at top of program has been deleted.
500bAF*    12/14/05  Rh   5.00b
     F*      - Fix: Clear CURTRN field, was updating old leftover transam.
500cAF*    01/10/06  RH   5.00c
     F*      - Enh: Add Parms for start date/time to be sent for LT105
500dAF*    04/14/06  MLB  5.00d
     F*      - Fix: Revised ENT01 to call routine ZZVSLT when a
     F*        slot is scanned to find virtual slot for base slot.
     F*
     F*----------------------------------------------------------------
     F*  Client Custom Revisions:
     F*
CHY AF*    08/01/00  DAS  CHY
     F*      - Revised format to split slot input field(s).
     F*      - Data structure was added to handle the combining of
     F*        slot input field(s).
     F*        This was done because Symbol scanners only scan into
     F*        the first position of a field instead of where the
     F*        cursor lies. Therefore, in order to do double scanning
     F*        the slot field had to be split into two parts with 1
     F*        character inbetween. Program APICVTSLT was modified
     F*        to handle the positioning correctly.
     F*
CHY2AF*    08/02/00  DAS  CHY2
     F*      - Revised split fields to 7 and 5 characters, respectively
CBI3AF*    12/04/02  MLB  CBI3
     F*      - Deleted.  Converted to permanent change. See 4.16k
CBI4AF*    04/14/04  MLB  CBI4
     F*      - Revised program to no longer log entries into the
     F*        slot replenishment exception file SLTRPEX.
     F*
     F*----------------------------------------------------------------
     F*  Indicator usage
     F*
     F*  20        Position cursor
     F*  21 - 29   Field input error (Reverse display)
417dAF*  64        Reverse image breakdown text on SCANREC.
416iAF*  76        Error indicator on write to SLTRPEX.
     F*  79        Chain indicator
     F*  90        Protect input fields for delete display
     F*  97        Always ON (Used for SFLEND keyword)
     F*  98        Error on screen (Sound buzzer)
     F*  99        Universal record indicator (Very temporary usage)
     F*
     F*----------------------------------------------------------------
     F*  File Specs
     F*
     FIT276FM CF  E                    WORKSTN
     F                                              KINFDS INFDS
     F                                        RECNO KSFILE DSPSFL
417bAF                                        RECNO KSFILE D16SFL
     F                                        MSGK  KSFILE MSGREC
417bAF                                        MSGK  KSFILE M16REC
     FWORKOPT UF  E           K        DISK                      A
417dAFITEMLNK IF  E           K        DISK
416bAFITMEXCP UF  E           K        DISK                      A
     FSLOT3   IF  E           K        DISK
     F            SLREC                             KRENAMERECORD
500aDF*SLOTOUT UF  E           K        DISK                      A
     FPIRITEM IF  E           K        DISK
411 DF*AREHS  IF  E           K        DISK
411 DF*HDEPT  IF  E           K        DISK
411 DF*ESIG   IF  E           K        DISK
     F*
     FSLOT2   UF  E           K        DISK
     F            SLREC                             KRENAMERECORDU
410 DF*ABEL   O   E           K        DISK                      A
410 MFLABEL   UF  E           K        DISK                      A
     FBATCTL  O   E           K        DISK
409 AFVSLOT2  IF  E           K        DISK
410 AFPIRTRAN UF  E           K        DISK                      A
410 AFTASK    IF  E           K        DISK
416bAFOPTIONS IF  E           K        DISK
416aAFPIRTRAN1IF  E           K        DISK
416aAF            PTREC                             KRENAMEPTREC1
410 AFPIRTRAN2IF  E           K        DISK
416aDF*           PTREC                             KRENAMEPTREC1
416aMF            PTREC                             KRENAMEPTREC2
410 AFPIRUSER IF  E           K        DISK
416iAFSLTRPEX UF  E           K        DISK                      A
     E*----------------------------------------------------------------
     E*  Table and array definitions
     E*
     E                    A2          2  1
     E                    A10        10  1
     E                    A75        75  1
     E                    FKEY       10 50
     E                    UKEY       10 50
     E                    $MD       128  1
     E                    OPTLST     24  2
     E                    CMDLST     24  2
     E                    $PODSC      3 63
     E                    ZOPT   20  20  2
     E                    OPTLN   1   1 75
     E                    CMDLN   1   1 79
AFI DE*                   DESC    1   1 40
409 ME*                   DESC    1   2 40
414dDE*                   DESC    1   3 40
416cDE*                   DESC    1   4 40
500 DE*                   DESC    1   5 40
500 ME                    DESC    1   6 40
416iAI*----------------------------------------------------------------
416iAI*  Redefine field names in file SLOTRPEX
416iAI*
416iAISEREC
416iAI              SEWHSE                          SXWHSE
416iAI              SEWHDP                          SXWHDP
416iAI              SEDISP                          SXDISP
416iAI              SEITEM                          SXITEM
416iAI              SEADTE                          SXADTE
416iAI              SEATIM                          SXATIM
416iAI              SEABY                           SXABY
CHY AI*----------------------------------------------------------------
CHY AI*  Slot redefinition
CHY AI*
CHY AI            DS
CHY AI                                        1  12 W1DISP
CHY2MI                                        1   7 W1DSP1
CHY2MI                                        8  12 W1DSP2
416gAI*----------------------------------------------------------------
416gAI*  External data structure for Dakota Realtime Interface.
416gAI*
416gAI$SLOT     E DSC#SLOTDDS
416gAI              '*NOUPDATE*'          C         @NOUPD
416gAI              '%SET2VFY'            C         @VFYSL
     I*----------------------------------------------------------------
     I*  Partial key redefinition
     I*
     I$PRTKY      DS
     I                                        1 100 $LEN50
     I                                        1   30$WHSE
     I                                        4  18 $ITEM
     I                                       19  30 $HOME
     I                                       31  42 $DISP
     I                                       43  490$LBL#
     I                                       50  560$TRN#
     I                                       57  630$BAT#
414aAI                                       64  73 $PRG
417cAI                                       74  88 $PLLP#
     I*----------------------------------------------------------------
     I*  Data structure for FKEY and UKEY
     I*
     I            DS
     I                                        1  50 DSFKEY
     I I            0                         1   30SLWHSE
     I                                        4  18 SLITEM
     I                                       19  20 SLSTAT
     I                                       21  21 SLPICK
     I I            0                        22  220SLPRTY
     I I            0                        23  300SLEXPD
     I I            0                        31  380SLENTD
     I                                       39  43 SLWHDP
     I                                       44  44 SLSTYP
     I                                       45  47 SLAISL
     I I            0                        48  520SLPSEQ
     I I            0                        53  540SLRLVL
     I                                       55  56 SLHAND
     I*
     I            DS
     I                                        1  50 DSUKEY
     I I            0                         1   30UKWHSE
     I                                        4   8 UKWHDP
     I                                        9  20 UKDISP
     I                                       21  35 UKITEM
     I*----------------------------------------------------------------
     I*  Called programs
     I*
     I              'CVTDTE'              C         @CVTDT
     I              '*NONE'               C         @CHGPG
     I              '*NONE'               C         @VEWPG
     I              '*NONE'               C         @DELPG
     I              '*NONE'               C         @PRTPG
     I              'ADDSTDTRN'           C         @ADDTR
416jAI              'ADDSTDTRN2'          C         @ADDT2
     I              'ADJTSKDET'           C         @ADJTD
410 AI              'ADJTRAN  '           C         @ADJTR
     I*----------------------------------------------------------------
     I*  Called program parameters
     I*
     I$POSTN      DS
     I                                        1   8 $POCMD
     I                                        9  18 $POPRG
     I                                       19  68 $POFKY
     I                                       69 118 $POUKY
     I                                      119 307 $PODSC
     I                                      308 322 $POPT1
     I                                      323 335 $POPT2
     I                                      336 343 $PORTN
     I                                      344 403 $POERM
     I                                      336 339 $POMSG
     I$PARMS      DS
     I                                        1   8 $PCMD
     I                                        9  18 $PPRG
     I                                       19  68 $PUKY
     I                                       69  76 $PRTN
     I                                       77 136 $PERM
     I                                       77  80 $PMSG
     I*
     I*   Redefine key
     I*
     I                                       19  210$PWHSE
     I                                       22  26 $PWHDP
     I                                       27  38 $PDISP
     I                                       39  53 $PITEM
417cAI*----------------------------------------------------------------
417cAI*  Called program parameters
417cAI*
417cAI$LPARM      DS
417cAI                                        1   8 $LCMD
417cAI                                        9  18 $LPRG
417cAI                                       19  68 $LUKY
417cAI                                       69  76 $LRTN
417cAI                                       77 136 $LERM
417cAI                                       77  80 $LMSG
417cAI*
417cAI*   Redefine key
417cAI*
417cAI                                       19  210$LWHSE
417cAI                                       22  36 $LITEM
417cAI*
417cAI                                       37  37 $LLOT
417cAI                                       38  38 $LLTRK
500 AI*
500 AI                                       22  26 $LWHDP
500 AI                                       27  38 $LDISP
500aDI*                                      39  39 $LNWST
500aAI                                       39  53 $LITM2
417cAI*
416bAI*----------------------------------------------------------------
416bAI*  *REPLEN  -  Replenishment options.
416bAI*----------------------------------------------------------------
416bAI*
416bAI* Fields
416bAI*
416bAI*    OPRPLB  -  Replenishment basis (*AVGQTY, *ORDQTY)
416bAI*    OPOQRP  -  Order qty replenishment (Y/N).
416bAI*    OPRPEX  -  Allow replenishment on expired items.
416bAI*               1=Allow, 2=Don't allow, 3=Warn
416bAI*    OPRPFI  -  Allow replenishments out of FIFO order.
416bAI*               1=Allow, 3=Warn
417aAI*    OPLMTS  -  Limit Specific Slot replenishment program to
417aAI*               to display only one overflow location at a
417aAI*               time. (Y/N)
416bAI*
416bAI* Data structure
416bAI*
416bAIOPDATA      DS
416bAI                                        1   8 OPRPLB
416bAI                                        9   9 OPOQRP
416bAI                                       10  10 OPRPEX
416bAI                                       11  11 OPRPFI
417aAI                                       12  12 OPLMTS
416bAI                                      117 117 OPTEND
416bAI*
     I$CVTDT      DS
     I                                        1   8 $CVCMD
     I                                        9  18 $CVPRG
     I                                       19  24 $CVD6I
     I                                       25  32 $CVD8I
     I I            0                        33  380$CVD6O
     I I            0                        39  460$CVD8O
     I                                       47  64 $CVSTO
     I                                       65  72 $CVRTN
     I                                       73 132 $CVERM
     I                                       73  76 $CVMSG
416bAI*----------------------------------------------------------------
416bAI*  Replenishment error messages(s).
416bAI*
416bAI              'Slot not available'  C         MSG101
416bAI              'for replenishment.'  C         MSG102
416bAI              'Expired:'            C         MSG103
416bAI              'Try new slot. '      C         MSG104
416bAI*
416bAI              'Slot has expired  '  C         MSG201
416bAI              'product.'            C         MSG202
416bAI*
416bAI              'Slot selected out'   C         MSG301
416bAI              'of FIFO order.'      C         MSG302
416bAI*
414cAI*----------------------------------------------------------------
414cAI*  API programs
414cAI*
414cAI              'APICVTSLT '          C         @APICS
417cAI*----------------------------------------------------------------
417cAI*  Working fields.
417cAI*
417cAI            DS
417cAI                                        1   4 LOTTRK
417cAI                                        5   8 LICTRK
417cAI              'Scan license plate'  C         LLP01
417cAI              'Scan lot number   '  C         LLP02
     I*----------------------------------------------------------------
     I*  Data structure for error message parameters
     I*
     I$MDT        DS
     I                                        1  50 ERRMSG
     I                                        1  10 ERRCL1
     I                                       11  16 ERRCL2
     I*
417cDI*                                      16  27 ERDISP
417cMI                                        1  12 ERDISP
     I*
416gAI                                        1  60 ERDMSG
416gAI                                       61  70 ERDRTN
416gAI                                       71  80 ERDCMD
416gAI                                       81  90 ERDSUB
     I            DS
     I                                    P   1   20$EC
417dAI$AERM       DS
417dAI                                        1  60 XAERM
417dAI                                        1   4 $AMSG
     I*----------------------------------------------------------------
     I*
416BAI            DS
416BAI                                        3   4 WKYY
416BAI                                        5   6 WKMM
416BAI                                        7   8 WKDD
416BAI                                        1   80WKEXPD
     I            DS
     I                                        1   60DSHMS
     I                                        1   40DSHM
     I                                        1   20DSHH
     I                                        3   40DSMM
     I                                        5   60DSSS
     I*----------------------------------------------------------------
     I*  Message control
     I*
     I              'PIRMSGF   '          C         #MSGF
     I*
     I            DS
     I                                        1 128 #MSGDT
     I                                        1 128 $MD
     I*----------------------------------------------------------------
     I*  Workstation exception data structure
     I*
     IINFDS       DS
     I                                     *STATUS  STATUS
     I                                      370 370 ROWIN
     I                                      371 371 COLIN
     I*----------------------------------------------------------------
     I*  Workstation exception redefinition data structure
     I*
     I            DS
     I                                    B   1   20ROW#
     I                                        2   2 ROW
     I                                    B   3   40COL#
     I                                        4   4 COL
     I*----------------------------------------------------------------
     I*  PIRTRAN record layout for use as parameters
     I*
     IPTPARM    E DSPIRTRAN
     I*----------------------------------------------------------------
     I*  Program info data structure
     I*
     I           SDS
     I                                     *PROGRAM #PROG
     I                                      244 253 #JOB
     I                                      254 263 #USER
     I                                      264 269 #JOBN
     I                                      276 2810#JOBDT
     I                                      282 2870#JOBTM
     I*----------------------------------------------------------------
     C*  Parameters
     C*
     C*    Input Parameters
     C*      $PRTKY  Partial key
     C*
     C*    Returned Parameters
     C*      $RTNCD  *EXIT    - CMD3 was entered
     C*              *CANCEL  - CMD12 was entered
     C*
     C*----------------------------------------------------------------
     C*  Let the show begin .....
     C*
     C           *ENTRY    PLIST
     C                     PARM           $PRTKY100
     C                     PARM           $RTNCD  8
409 AC                     PARM           $RZERO  1
500cAC                     PARM           $RENDD  80
500cAC                     PARM           $RENDT  60
     C*
     C*  Define keys
     C*
     C*     WORKOPT  (Unique key)
     C*
     C           WKOUNQ    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C                     KFLD           WKOKYF
     C                     KFLD           WKOKYU
     C*
     C*     WORKOPT  (Partial key)
     C*
     C           WKOPRT    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C*
     C*     WORKOPT  (Save key for top record on delete display)
     C*
     C           *LIKE     DEFN WKOKYF    $WKOF
     C           *LIKE     DEFN WKOKYU    $WKOU
     C           DELTOP    KLIST
     C                     KFLD           #USER
     C                     KFLD           #PROG
     C                     KFLD           $WKOF
     C                     KFLD           $WKOU
     C*----------------------------------------------------------------
     C*  Main line
     C*
     C                     MOVE '1'       *IN97
     C                     MOVE *BLANKS   $RTNCD
     C                     EXSR ZZINZ2
     C           NXTSCR    DOWNE'EOJ'
     C                     EXSR DSPSCR
     C           NXTSCR    CASEQ'01 '     SC1
     C           NXTSCR    CASEQ'02 '     SC2
411 AC           NXTSCR    CASEQ'03 '     SC3
409 AC           NXTSCR    CASEQ'04 '     SC4
     C                     END
     C                     END
     C*
     C*   Do some clean up before leaving.
     C*
     C                     EXSR ZSCLR
     C                     EXSR CLRSCH
213 DC*                    SETON                     LR
213 AC                     RETRN
     C*----------------------------------------------------------------
     C*  DSPSCR - Display screen
     C*
     CSR         DSPSCR    BEGSR
     C*
     C*   Set ON alarm indicator if error occured
     C*
     CSR         ERROR     IFEQ '1'
     CSR                   MOVE '1'       *IN98
     CSR                   END
     C*
     C*   Set OFF command key indicators
     C*
     CSR                   SETOF                     KCKEKF
     CSR                   SETOF                     KL
     C*
     C*   Overlay screen with title
     C*
411 DC*R                   WRITETITLE
     C*
     C*   Overlay screen with error messages
     C*
     CSR                   EXSR ZMDMSG
     C*
     C*   Overlay screen with subfile screen
     C*
     CSR         NXTSCR    IFEQ '01 '
     CSR                   EXSR SFLDSP
     CSR                   READ POSTNREC                 50
     CSR                   READ SCANREC                  50
     CSR                   END
     CSR         NXTSCR    IFEQ '02 '
     CSR                   EXSR DELDSP
     CSR                   END
411 ACSR         NXTSCR    IFEQ '03 '
411 ACSR                   READ QTYREC                   50
411 ACSR                   END
409 ACSR         NXTSCR    IFEQ '04 '
     C**                   EXSR SFLDSP
409 ACSR                   READ ZROREC                   50
409 ACSR                   END
     C*
     C*   Initialize error indicators and fields
     C*
     CSR                   SETOF                     2021
     CSR                   SETOF                     0323
     CSR                   SETOF                     98
     CSR                   MOVE '0'       WARN    1
     CSR                   MOVE '0'       ERROR   1
     CSR                   MOVE '0'       CANCEL  1
414cACSR                   MOVE *OFF      REDSPL  1
     CSR                   Z-ADD0         E       20
     C*
     C*   Initialize error subfile
     C*
     CSR                   EXSR ZMCMSG
     C*
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   READ D16SFC                   50
417bACSR                   OTHER
     CSR                   READ DSPSFC                   50
417bACSR                   ENDSL
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*     Screen initialization and wrap-up routines
     C*
     C*----------------------------------------------------------------
     C*
     C*  Screen 01 initialization
     C*
     CSR         SCR01I    BEGSR
     CSR                   MOVE '01 '     NXTSCR  3
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   WRITECLR0306
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 02 initialization
     C*
     CSR         SCR02I    BEGSR
     CSR                   MOVE '02 '     NXTSCR
     CSR                   MOVE '1'       *IN90
     CSR                   MOVE *LOVAL    $WKOF
     CSR                   MOVE *LOVAL    $WKOU
     CSR                   WRITECLR0306
     CSR                   WRITEDELREC
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG02
     CSR                   WRITECMDDEL
     CSR                   ENDSR
411 AC*----------------------------------------------------------------
     C*
     C*  Screen 03 initialization
     C*
     CSR         SCR03I    BEGSR
     CSR                   MOVE '03 '     NXTSCR
411 DC*R                   WRITECLR0306
     CSR                   Z-ADDAVAIL1    W3RQTY
     CSR                   Z-ADDAVAIL1    WOAVL1  50
     CSR                   WRITEQTYREC
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG03
     CSR                   ENDSR
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  Screen 04 initialization
     C*
409 ACSR         SCR04I    BEGSR
409 ACSR                   MOVE '04 '     NXTSCR
     C*****                WRITECLR0802
     CSR                   MOVE 'N'       W4ZERO
     CSR                   WRITEZROREC
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG04
409 DC*R                   WRITECMDDEL
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 02 wrap-up
     C*
     CSR         SCR02E    BEGSR
     CSR                   MOVE '01 '     NXTSCR
     CSR                   MOVE '0'       *IN90
     CSR                   WRITECLR0306
     CSR         CANCEL    IFEQ *OFF
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   EXSR OPTNS
     CSR                   ELSE
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE FRSTKY    $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 03 wrap-up
411 AC*
411 ACSR         SCR03E    BEGSR
411 AC***                  MOVE '04 '     NXTSCR
411 ACSR                   MOVE '0'       *IN90
411 ******                 WRITECLR0306
411 ACSR         CANCEL    IFEQ *ON
     C****                 MOVE '*REFRESH'PAGCMD
     C****                 EXSR PAG04
     C***                  EXSR OPTNS
411 AC****                 ELSE
412 ACSR                   MOVE '01 '     NXTSCR
411 AC*XXX                 MOVE '*POSTN2U'$POCMD
411 MC*XXX                 MOVE $PUKY     $POUKY
411 AC*XXX                 EXSR FGTWAY
411 AC*XXX                 MOVE '*REPOS  'PAGCMD
411 XCSR                   MOVE '*REFRESH'PAGCMD
411 ACSR                   EXSR PAG01
411 ACSR                   END
411 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  Screen 04 wrap-up
409 AC*
409 ACSR         SCR04E    BEGSR
409 ACSR                   MOVE '01 '     NXTSCR
409 ACSR                   MOVE '0'       *IN90
409 ACSR                   WRITECLR0306
409 ACSR         CANCEL    IFEQ *OFF
409 ACSR                   MOVE '*REFRESH'PAGCMD
409 ACSR                   EXSR PAG01
409 ACSR                   EXSR OPTNS
409 ACSR                   ELSE
409 ACSR                   MOVE '*POSTN2U'$POCMD
410 DC*R                   MOVE FRSTKY    $POUKY
410 MCSR                   MOVE $PUKY     $POUKY
409 ACSR                   EXSR FGTWAY
409 ACSR                   MOVE '*REPOS  'PAGCMD
409 ACSR                   EXSR PAG01
409 ACSR                   END
409 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*              Screen Processing Routines
     C*
     C*----------------------------------------------------------------
     C*
     C*  SC1  -  Screen 1
     C*
     CSR         SC1       BEGSR
     CSR         STATUS    CASEQROLLUP    ROLL01
     CSR         STATUS    CASEQROLLDN    ROLL01
     CSR         STATUS    CASEQCOMAND    CMD01
     CSR                   CAS            ENT01
     CSR                   END
     CSR         ENDSC1    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SC2  -  Screen 2
     C*
     CSR         SC2       BEGSR
     CSR         STATUS    CASEQROLLUP    ROLL02
     CSR         STATUS    CASEQROLLDN    ROLL02
     CSR         STATUS    CASEQCOMAND    CMD02
     CSR                   CAS            ENT02
     CSR                   END
     CSR         ENDSC2    ENDSR
     C*----------------------------------------------------------------
     C*
411 AC*  SC3  -  Screen 3
     C*
409 ACSR         SC3       BEGSR
411 DC*R         STATUS    CASEQROLLUP    ROLL03
411 DC*R         STATUS    CASEQROLLDN    ROLL03
     CSR         STATUS    CASEQCOMAND    CMD03
     CSR                   CAS            ENT03
     CSR                   END
     CSR         ENDSC3    ENDSR
     C*----------------------------------------------------------------
     C*
409 AC*  SC4  -  Screen 4
     C*
409 ACSR         SC4       BEGSR
409 ACSR         STATUS    CASEQROLLUP    ROLL04
409 ACSR         STATUS    CASEQROLLDN    ROLL04
409 ACSR         STATUS    CASEQCOMAND    CMD04
409 ACSR                   CAS            ENT04
409 ACSR                   END
409 ACSR         ENDSC4    ENDSR
     C*----------------------------------------------------------------
     C*
     C*          SUBROUTINES IN ALPHABETICAL ORDER
     C*
     C*----------------------------------------------------------------
     C*
     C*  *INZSR  Initialization subrotine
     C*
     CSR         *INZSR    BEGSR
     C*
     C*  Initialize special keys
     C*
     C                     Z-ADD0         ENTER   50
     C                     Z-ADD2         COMAND  50
     C                     Z-ADD01122     ROLLUP  50
     C                     Z-ADD01123     ROLLDN  50
     C                     Z-ADD01124     CLEAR   50
     C                     Z-ADD01125     HELP    50
     C*
     C*  Initialize message handling
     C*
     C                     EXSR ZMIMSG
     C*
     C*  Initialize subfile (DSPSFL) record
     C*
     C                     Z-ADD1         RECNO
     C                     WRITEDSPSFL                 79
     C*
     C*   Call user added initialization routine.
     C*
     C                     EXSR ZZINZ
     C                     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CLRSCH   Clear everything out of work file
     C*
     CSR         CLRSCH    BEGSR
     CSR         WKOPRT    SETLLWORKOPT
     CSR         WKOPRT    READEWORKOPT                7979
     CSR         *IN79     DOWEQ'0'
     CSR                   DELETWKOREC
     CSR         WKOPRT    READEWORKOPT                7979
     CSR                   END
416 ACSR                   MOVE *ZEROS    OPTCNT  30
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CMD01    Screen 1 command key routine
     C*
     CSR         CMD01     BEGSR
     C*
     C*  TEST FOR F3 - EXIT
     C*
     CSR         *INKC     IFEQ '1'
     CSR                   MOVE 'EOJ'     NXTSCR
     CSR                   MOVE '*EXIT   '$RTNCD
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  TEST FOR F12 - PREVIOUS
     C*
     CSR         *INKL     IFEQ '1'
     CSR                   MOVE 'EOJ'     NXTSCR
     CSR                   MOVE '*CANCEL '$RTNCD
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  EXECUTE COMMAND KEYS THAT DON'T NEED THE OPTIONS VERIFIED
     C*
     C*     TEST FOR F5 - REFRESH
     C*
     CSR         *INKE     IFEQ '1'
     CSR                   EXSR CLRSCH
411 DC*R         1         DO   10        X
417bDC*R         1         DO   3         X
417bMCSR         1         DO   DSPLYD    X
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR         X         CHAIND16SFL               79
417bACSR                   OTHER
     CSR         X         CHAINDSPSFL               79
417bACSR                   ENDSL
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE '  '      OPTION
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   UPDATD16SFL
417bACSR                   OTHER
     CSR                   UPDATDSPSFL
417bACSR                   ENDSL
     CSR                   END
     CSR                   END
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  VERIFY AND SAVE ANY OPTIONS THAT WERE ENTERED
     C*
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       CMD01E
     C*
     C*  EXECUTE COMMAND KEYS THAT DID NEED THE OPTIONS VERIFIED
     C*
     C*  TEST FOR F6 - ADD RECORD
     C*
     CSR         *INKF     IFEQ '1'
     CSR                   MOVE #PROG     $PPRG
     CSR                   Z-ADDITWHSE    UKWHSE
     CSR                   MOVE ITWHDP    UKWHDP
     CSR                   MOVE *BLANKS   UKDISP
     CSR                   MOVE ITITEM    UKITEM
     CSR                   MOVE DSUKEY    $PUKY
     CSR                   MOVE '*ADD    '$PCMD
     CSR                   CALL @CHGPG
     CSR                   PARM           $PARMS
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   ELSE
     CSR         $PRTN     IFNE '*EXIT   '
     CSR         $PRTN     ANDNE'*CANCEL '
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE $PUKY     $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   END
     CSR                   END
     CSR                   END
220 ACSR                   MOVE '*REFRESH'PAGCMD
220 ACSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
416eAC*
416eAC*  TEST FOR F8 - Display license plate info.
416eAC*
416eACSR         *INKH     IFEQ *ON
416eACSR                   CALL 'LP120CL'
416eACSR                   GOTO CMD01E
416eACSR                   ENDIF
     C*
500 MC*  TEST FOR F10 - Out. No more replenishment slots available.
     C*
     CSR         *INKJ     IFEQ '1'
500 AC                     EXSR ZZOUT
500 AC*
500 DC*                    Z-ADD0         ROW#
500 DC*                    MOVE ROWIN     ROW
500 DC*                    Z-ADD0         COL#
500 DC*                    MOVE COLIN     COL
500 DC*
500 DC*     MAKE SURE CURSOR IS ON ONE OF THE DISPLAYED RECORDS
500 DC*
500 DC*                    SUB  10        ROW#
500 DC*          ROW#      IFLT 1
500 DC*          ROW#      ORGT DSPLYD
500 DC*                    MOVE '1'       ERROR
500 DC*                    MOVE *BLANKS   ERRMSG
500 DC*                    EXSR ZM0106
500 DC*                    GOTO CMD01E
500 DC*                    END
500 DC*
500 DC*     REPOSITION RECORD THAT CURSOR IS ON TO THE TOP
500 DC*
500 DC*                    MOVE '*POSTN2U'$POCMD
500 DC*                    MOVE UKEY,ROW# $POUKY
500 DC*                    EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       CMD01E
500 DC*                    MOVE '*REPOS  'PAGCMD
500 DC*                    EXSR PAG01
500 DC*                    GOTO CMD01E
     CSR                   END
     C*
     C*  TEST FOR F17 - REPOSITION TO TOP OF DISPLAY
     C*
     CSR         *INKR     IFEQ '1'
     CSR                   MOVE '*TOP    'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*  TEST FOR F18 - REPOSITION TO BOTTOM OF DISPLAY
     C*
     CSR         *INKS     IFEQ '1'
     CSR                   MOVE '*BOTTOM 'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO CMD01E
     CSR                   END
     C*
     C*   Process non-standard function keys.
     C*
     CSR                   EXSR ZZCMD
     CSR         CMD01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  CMD02    Screen 2 command key routine
     C*
     CSR         CMD02     BEGSR
     C*
     C*  TEST FOR CMD12 - PREVIOUS
     C*
     CSR         *INKL     IFEQ '1'
     CSR                   MOVE '1'       CANCEL
     CSR                   EXSR SCR02E
     CSR                   GOTO CMD02E
     CSR                   END
     CSR         CMD02E    ENDSR
411 AC*----------------------------------------------------------------
     C*
411 AC*  CMD03    Screen 3 command key routine
411 AC*
411 ACSR         CMD03     BEGSR
411 AC*
411 AC*  TEST FOR CMD12 - PREVIOUS
411 AC*
411 ACSR         *INKL     IFEQ '1'
411 ACSR                   MOVE '1'       CANCEL
410 ACSR                   EXSR ZZABRT
     CSR                   EXSR SCR03E
     CSR                   GOTO CMD03E
411 ACSR                   END
409 ACSR         CMD03E    ENDSR
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  CMD04    Screen 4 command key routine
409 AC*
409 ACSR         CMD04     BEGSR
409 AC*
409 AC*  TEST FOR CMD12 - PREVIOUS
409 AC*
409 ACSR         *INKL     IFEQ '1'
409 ACSR                   MOVE '1'       CANCEL
410 ACSR                   EXSR ZZABRT
409 ACSR                   EXSR SCR04E
409 ACSR                   GOTO CMD04E
409 ACSR                   END
409 ACSR         CMD04E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  DELADD   Add record to subfile for delete display
     C*
     CSR         DELADD    BEGSR
     CSR         RECNO     IFLT 11
     CSR                   ADD  1         RECNO
     CSR                   Z-ADDRECNO     Y
     C*
     C*  GET RECORD INFO
     C*
     CSR                   MOVE '*GET    '$POCMD
     CSR                   MOVE WKOKYU    $POUKY
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       DELADE
     C*
     C*  SAVE KEY TO RECORD OF FIRST SCREEN LINE
     C*
     CSR         RECNO     IFEQ 1
     CSR                   MOVE WKOKYF    $WKOF
     CSR                   MOVE WKOKYU    $WKOU
     CSR                   END
     C*
     C*  WRITE DISPLAY LINE TO SUBFILE
     C*
     CSR                   EXSR ZZFILL
     CSR                   MOVE WKOOPT    OPTION
     CSR                   WRITEDSPSFL
     CSR                   END
     CSR         DELADE    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  DELDSP   Display subfile of records marked for deletion
     C*
     CSR         DELDSP    BEGSR
     C*
     C*  WRITE 'BOTTOM/MORE...' FIELD TO DISPLAY
     C*
     CSR                   WRITEMORREC
     C*
     C*  WRITE SUBFILE TO DISPLAY
     C*
     CSR                   MOVE '1'       *IN01
     CSR                   Z-ADD1         RECNO
     CSR                   WRITEDSPSFC
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ENT01    Screen 1 enter key routine
     C*
     CSR         ENT01     BEGSR
     C*
     C*  VERIFY AND SAVE OPTIONS
     C*
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ENT01E
     C*
     C*  SEE IF USER IS TRYING TO POSITION TO A CERTAIN SPOT
     C*
     CSR                   MOVE *OFF      REPOS   1
     CSR                   EXSR ZZPOS
     CSR         REPOS     IFEQ *ON
     CSR                   MOVE DSFKEY    $POFKY
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ENT01E
     CSR                   END
     C*
221 AC*  CHECK IF SLOT WAS ENTERED.
     C*
221 ACSR         W1DISP    IFNE *BLANKS
500dAC*
500dAC*    Check for virtual slot for scanned slot.
500dAC                     EXSR ZZVSLT
500dAC                     UNLCKSLOT2
500dAC*
221 ACSR                   EXSR ZZCHK1
221 ACSR         ERROR     CABEQ*ON       ENT01E
414cACSR         REDSPL    CABEQ*ON       ENT01E
417cACSR         CANCEL    CABEQ*ON       ENT01E
     CSR                   MOVELW1DISP    $DISP
     CSR                   MOVE DSUKEY    $PUKY
410 AC*
410 AC*   Get current task.
410 AC*
500bACSR                   Z-ADD0         CURTRN
417cACSR                   MOVE *BLANKS   CURTSK
417cACSR                   MOVE *BLANKS   CURTYP
417cACSR                   MOVE *OFF      CURENT
410 ACSR                   EXSR ZZTASK
410 ACSR                   SELEC
410 ACSR         CURTYP    WHEQ 'D'
410 AC*   End current task.
410 ACSR                   EXSR ZZEND
410 ACSR         CURTYP    WHEQ 'I'
410 AC*  End current task and any previous open tasks.
410 ACSR                   MOVE *ON       FOUND   1
410 ACSR         FOUND     DOWEQ*ON
410 ACSR                   MOVE *BLANKS   CURTSK
410 ACSR                   MOVE *BLANKS   CURTYP
410 ACSR                   MOVE *OFF      CURENT
410 ACSR                   EXSR ZZTASK
410 ACSR         FOUND     IFEQ *OFF
410 ACSR                   LEAVE
410 ACSR                   ENDIF
410 ACSR                   EXSR ZZEND
410 ACSR                   ENDDO
410 ACSR                   ENDSL
     C*
     CSR                   EXSR ZZSTRT
     CSR                   MOVEL'*OK     '$RTNCD
409aAC*                    EXSR ZZCHKV
409aAC*R         HASVS     IFEQ *ON
409aAC*R                   MOVEL'*OK     '$RTNCD
409aAC*R                   MOVE 'N'       $RZERO
409aMC*R                   MOVE 'EOJ'     NXTSCR
     C*R                   GOTO ENT01E
409aAC*R                   ELSE
414aAC*
414aAC*    If this program was called from LT105, then force pgm end,
414aAC*    otherwise allow pgm to continue.
414aAC*
414aACSR         $PRG      IFEQ 'LT105   '
414aACSR                   MOVE 'EOJ'     NXTSCR
414aAC*
414aACSR                   ELSE
411 MCSR                   MOVE '03 '     NXTSCR
411 MCSR                   EXSR SCR03I
414aACSR                   ENDIF
414aAC*
411 MCSR                   GOTO ENT01E
411 DC*R                   MOVE '04 '     NXTSCR
411 DC*R                   EXSR SCR04I
411 DC*R                   GOTO ENT01E
409aAC*R                   ENDIF
221 ACSR                   ENDIF
     C*
     C*  IF NOT POSITIONING THEN EXECUTE THE ENTERED OPTIONS
     C*
     CSR                   EXSR OPTNS
     C*
     C*  IF OPTION WAS NOT TAKEN THEN RETURN LIKE CMD12 WAS ENTERED
     C*
     C*R         OTAKEN    IFEQ '0'
     C*R                   MOVE 'EOJ'     NXTSCR
     C*R                   GOTO ENT01E
     C*R                   END
     CSR         ENT01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ENT02    Screen 2 enter key routine
     C*
     CSR         ENT02     BEGSR
     C*
     C*  Save first delete key.
     C*
     CSR         *LIKE     DEFN $PUKY     FRSTKY
     CSR                   MOVE $PUKY     FRSTKY
     C*
     C*  Delete the records that have been selected
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       STOP
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   ELSE
     C*
     CSR         WKOOPT    IFEQ ' 4'
     C*
     C*  Call delete program
     C*
     CSR                   EXSR INZPAR
     CSR                   MOVE '*DELETE '$PCMD
     CSR                   MOVE WKOKYU    $PUKY
     CSR                   CALL @DELPG
     CSR                   PARM           $PARMS
     C*
     C*     Error occured - Error message sent back
     C*
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     C*
     C*     Error occured - Error message sent to program msgq
     C*
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   ELSE
     C*
     C*     Delete canceled
     C*
     CSR         $PRTN     IFEQ '*CANCEL '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         CANCEL    IFEQ '0'
     CSR                   DELETWKOREC
     CSR                   ELSE
     CSR                   MOVE '1'       WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   END
     C*
     CSR                   END
     CSR                   END
     CSR                   EXSR SCR02E
     CSR         ENT02E    ENDSR
     C*----------------------------------------------------------------
     C*
411 AC*  ENT03    Screen 3 enter key routine
411 AC*
411 ACSR         ENT03     BEGSR
     C*
     C*  VERIFY AND SAVE OPTIONS
     C*
411 ACSR                   EXSR ZZCHK3
411 ACSR         ERROR     CABEQ*ON       ENT03E
411 ACSR                   MOVEL'*OK     '$RTNCD
411 ACSR                   Z-ADDW3RQTY    WORQTY  50
     C*
411 ACSR         W3RQTY    IFNE TOPICK
     C*  Update trans with new quantity.
     C           $TRN#     CHAINPIRTRAN              79
     C           *IN79     IFEQ *OFF
     C           ITCUBE    MULT W3RQTY    PTCUBE
     C           ITSWGT    MULT W3RQTY    PTSWGT
     C                     Z-ADDW3RQTY    PTPCS
     C                     UPDATPTREC
     C                     ENDIF
     C*  FROM Slot.
     C*
     C*  Update slot qty with new quantity                              ****
     C           SLFKEY    CHAINSLOT2                79
     C           *IN79     IFEQ *OFF
     C                     SUB  TOPICK    SLTFR1
     C                     ADD  W3RQTY    SLTFR1
     C                     UPDATRECORDU
     C                     ENDIF
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $DISP     S$DISP
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-SUBTOPICK    A$QTY1
416gACSR                   ADD  W3RQTY    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   Z-ADD$TRN#     A$TRN#
416gACSR                   MOVE @PTASK    A$TASK
416gACSR                   MOVEL'%TFROUT' DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C* TO Slot.
     C*  Update slot qty with new quantity
     C           SLTKEY    CHAINSLOT2                79
     C           *IN79     IFEQ *OFF
     C                     SUB  TOPICK    SLRCV1
     C                     ADD  W3RQTY    SLRCV1
412 ACSR         SLSTAT    IFEQ 'Z '
412 ACSR         SLSTAT    OREQ 'V '
412 ACSR                   MOVE 'A '      SLSTAT
412 ACSR                   Z-ADDTODAY     SLSDTE
412 ACSR                   TIME           SLSTIM
412 ACSR                   Z-ADD0         SLPRTY
412 ACSR                   ENDIF
     C                     UPDATRECORDU
     C                     ENDIF
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $HOME     S$DISP
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-SUBTOPICK    A$QTY1
416gACSR                   ADD  W3RQTY    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   Z-ADD$TRN#     A$TRN#
416gACSR                   MOVE @PTASK    A$TASK
416gACSR                   MOVEL'%TFRIN'  DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C* Label
     C*  Update label record qith new quantity
     C           $LBL#     CHAINLABEL                79
     C           *IN79     IFEQ *OFF
     C                     SUB  TOPICK    LBQALC
     C                     SUB  TOPICK    LBQPCK
     C                     Z-ADD0         LBCUBE
     C                     Z-ADD0         LBSWGT
     C*
     C                     Z-ADDW3RQTY    LBQALC
     C                     Z-ADDW3RQTY    LBQPCK
     C           LBUCUB    MULT W3RQTY    LBCUBE
     C           LBUWGT    MULT W3RQTY    LBSWGT
     C                     UPDATLBREC
     C                     ENDIF
     C*
     C                     ENDIF
     C*
*******R                   MOVE '04 '     NXTSCR
*******R                   EXSR SCR04I
*******R                   GOTO ENT03E
409aAC                     EXSR ZZCHKV
409aACSR         HASVS     IFEQ *ON
409aACSR                   MOVEL'*OK     '$RTNCD
409aACSR                   MOVE 'N'       $RZERO
409aMCSR                   MOVE 'EOJ'     NXTSCR
     CSR                   GOTO ENT03E
409aACSR                   ELSE
411 ACSR         W3RQTY    IFEQ TOPICK
409 MCSR                   MOVE '04 '     NXTSCR
409 MCSR                   EXSR SCR04I
     CSR                   GOTO ENT03E
411 ACSR                   ELSE
411 ACSR                   MOVEL'*OK     '$RTNCD
411 ACSR                   MOVE 'N'       $RZERO
411 ACSR                   MOVE 'EOJ'     NXTSCR
411 ACSR                   GOTO ENT03E
411 ACSR                   ENDIF
409aACSR                   ENDIF
     C*
409 ACSR         ENT03E    ENDSR
     C*
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  ENT04    Screen 4 enter key routine
409 AC*
409 ACSR         ENT04     BEGSR
     C*
     C*  VERIFY AND SAVE OPTIONS
     C*
409 ACSR                   EXSR ZZCHK4
409 ACSR         ERROR     CABEQ*ON       ENT04E
409 ACSR                   MOVEL'*OK     '$RTNCD
409 ACSR                   MOVE W4ZERO    $RZERO
409 ACSR                   MOVE 'EOJ'     NXTSCR
     C*
409 ACSR         ENT04E    ENDSR
     C*
     C*----------------------------------------------------------------
     C*
     C*  FGTWAY   Gateway to file handling routines
     C*
     C*    Input Parameters
     C*      $POCMD   *INIT    - Initialize and return
     C*               *GET     - Get record for $POUKY value
     C*               *GETNEXT - Get next record
     C*               *GETPREV - Get previous record
     C*               *WRITPOS - Write position record to display
     C*               *READPOS - Read position record
     C*               *POSTN2  - Position to $POFKY
     C*               *POSTN2U - Position to $POUKY
     C*               *TOP     - Position to top of file
     C*               *BOTTOM  - Position to bottom of file
     C*      $POFKY   Key for positioning within file
     C*      $POUKY   Unique key used for change/delete operations
     C*
     C*    Returned Parameters
     C*      $PORTN   *NOMORE  - Beginning/End of file was reached
     C*               *NOTFND  - Record not found on a GET
     C*               *FOUND   - Record found
     C*               *REPOS   - Repositioning took place
     C*               *ERROR   - Error occured
     C*      $POERM   Error message
     C*
     CSR         FGTWAY    BEGSR
     CSR                   MOVE *BLANKS   $PORTN
     CSR         $POCMD    CASEQ'*GET    'FGET
     CSR         $POCMD    CASEQ'*GETNEXT'FGETN
     CSR         $POCMD    CASEQ'*GETPREV'FGETP
     CSR         $POCMD    CASEQ'*POSTN2 'FPOS2
     CSR         $POCMD    CASEQ'*POSTN2U'FPOS2U
     CSR         $POCMD    CASEQ'*TOP'    ZZPOS2
     CSR         $POCMD    CASEQ'*BOTTOM' ZZPOS2
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGET     Get record using file with unique key
     C*
     C*              In this case the lookup file and the unique key
     C*              file are DIFFERENT.
     C*
     CSR         FGET      BEGSR
     CSR                   MOVE $POUKY    DSUKEY
     CSR                   EXSR ZZFGET
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOTFND '$PORTN
     CSR                   EXSR ZZKEYI
     C**                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGETN    Get next record
     C*
     CSR         FGETN     BEGSR
     CSR                   EXSR ZZFGTN
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOMORE '$PORTN
     CSR                   EXSR ZZKEYI
     C**                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   EXSR ZZKEYU
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FGETP    Get previous record
     C*
     CSR         FGETP     BEGSR
     CSR                   EXSR ZZFGTP
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '*NOMORE '$PORTN
     CSR                   EXSR ZZKEYI
     C**                   MOVE *BLANKS   $POUKY
     CSR                   ELSE
     CSR                   MOVE '*FOUND  '$PORTN
     CSR                   EXSR ZZKEYF
     CSR                   EXSR ZZKEYU
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FPOS2    Position to record
     C*
     CSR         FPOS2     BEGSR
     CSR                   MOVE $POFKY    DSFKEY
     CSR         FILEKY    SETLLRECORD
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  FPOS2U   Position to record using unique key
     C*
     CSR         FPOS2U    BEGSR
     C*
     C*  GET RECORD FOR UNIQUE KEY
     C*
     CSR                   EXSR FGET
     C*
     C*  POSITION TO RECORD IN LOOKUP FILE
     C*
     CSR                   EXSR FPOS2
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  INZPAR   Initialize parameters for calling add/chg/del program
     C*
     CSR         INZPAR    BEGSR
     CSR                   CLEAR$PARMS
     CSR                   MOVE #PROG     $PPRG
     CSR                   MOVE $PRTKY    $PUKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  OPTNS    Perform options that user entered
     C*
     CSR         OPTNS     BEGSR
     CSR                   MOVE '0'       OTAKEN  1
     C*
     C*     DO ALL DELETES FIRST (OPTION 4)
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       STOP
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     DOWEQ'0'
     CSR         WKOOPT    ANDNE' 4'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR                   END
     CSR         *IN79     IFEQ '0'
     CSR         WKOOPT    ANDEQ' 4'
     CSR                   MOVE '1'       OTAKEN
     CSR                   MOVE WKOKYU    $PUKY
     CSR                   EXSR SCR02I
     CSR                   GOTO OPTNSE
     CSR                   END
     C*
     C*  THEN DO THE OTHER OPTIONS IN THE ORDER THEY WERE ENTERED
     C*     STOP WHEN NO MORE OPTIONS OR USER ENTERS CMD12
     C*
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   MOVE '0'       CANCEL  1
     CSR                   MOVE '0'       STOP    1
     CSR         STOP      DOUEQ'1'
     CSR         CANCEL    OREQ '1'
     CSR         WKOPRT    READEWORKOPT                  79
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   ELSE
     CSR         WKOOPT    IFNE '  '
     CSR                   MOVE '1'       OTAKEN
     CSR                   EXSR OPTNS2
     CSR         WKOUNQ    CHAINWORKOPT              78
     CSR                   MOVE '1'       REFRSH
     CSR         ERROR     IFEQ '0'
     CSR                   DELETWKOREC
     CSR                   END
     CSR         CANCEL    IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR         ERROR     IFEQ '1'
     CSR                   MOVE '1'       WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   MOVE '*POSTN2U'$POCMD
     CSR                   MOVE $PUKY     $POUKY
     CSR                   EXSR FGTWAY
     CSR                   MOVE '*REPOS  'PAGCMD
     CSR                   EXSR PAG01
     CSR                   MOVE '0'       REFRSH
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         REFRSH    IFEQ '1'
     CSR                   MOVE '*REFRESH'PAGCMD
     CSR                   EXSR PAG01
     CSR                   MOVE '0'       REFRSH  1
     CSR                   END
     CSR         OPTNSE    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  OPTNS2   Execute individual options
     C*
     CSR         OPTNS2    BEGSR
     CSR                   EXSR INZPAR
     CSR                   MOVE WKOKYU    $PUKY
     C*
     CSR                   SELEC
414bAC*
414bAC*   Select slot for replenishment.
414bAC*
414bACSR         WKOOPT    WHEQ ' 1'
414eACSR                   MOVE $PUKY     DSUKEY
414bACSR                   EXSR ZZSLCT
     C*
     C*   Change
     C*
     CSR         WKOOPT    WHEQ ' 2'
     CSR                   MOVE '*CHANGE '$PCMD
     CSR                   CALL @CHGPG
     CSR                   PARM           $PARMS
     C*
     C*   View
     C*
     CSR         WKOOPT    WHEQ ' 5'
     CSR                   MOVE '*VIEW   '$PCMD
     CSR                   CALL @VEWPG
     CSR                   PARM           $PARMS
     C*
     C*   Print
     C*
     CSR         WKOOPT    WHEQ ' 6'
     CSR                   MOVE '*PRINT  '$PCMD
     CSR                   CALL @PRTPG
     CSR                   PARM           $PARMS
     C*
     C*   View slot quantities.
     C*
     CSR         WKOOPT    WHEQ ' 9'
411 DC*R                   CALL 'SL810'
411 MCSR                   CALL 'SL635'
     CSR                   PARM           ITWHSE
     CSR                   PARM           ITWHDP
     CSR                   PARM           $PDISP
416cAC*
416cAC*    Log slot error in item exception file.
416cAC*
416cACSR         WKOOPT    WHEQ ' X'
416bACSR                   MOVE $PDISP    KYDISP
416bACSR         SLFIKY    CHAINSLOT2               N79
416bACSR         *IN79     IFEQ *ON
416bACSR                   MOVE *ZEROS    SLSTK1
416bACSR                   ENDIF
416cAC*
416cAC*    Write out exception record.
416cACSR                   MOVE 'WRGITM ' EXERID
416cACSR                   EXSR ZZEXCP
416iAC*
416iAC*    Write record to slot exception file.
416iACSR         SLPICK    IFNE 'Y'
CBI4DC*R                   EXSR ZZEXSL
416iACSR                   ENDIF
416iAC*
416iACSR         DESC,5    CAT  SLDISP:1  ERRMSG    P
416iACSR                   EXSR ZM0105
     C*
     CSR                   OTHER
     CSR                   EXSR ZZOPT
     CSR                   ENDSL
     C*
     CSR         $PRTN     IFEQ '*CANCEL '
     CSR                   MOVE '1'       CANCEL
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*ERROR  '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       ERROR
     CSR                   MOVEL$PERM     ERRMSG
     CSR                   EXSR ZM0105
     CSR                   ELSE
     CSR         $PRTN     IFEQ '*PGMQ   '
     CSR                   MOVE '1'       CANCEL
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE $PMSG     #MSGK
     CSR                   EXSR ZMQMSG
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG01    Screen 1 page routines
     C*
     CSR         PAG01     BEGSR
     C*
     C*  NEXT PAGE
     C*
     CSR         PAGCMD    IFEQ '*NEXT   '
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  PREVIOUS PAGE
     C*
     CSR         PAGCMD    IFEQ '*PREV   '
     CSR                   EXSR PAG1BK
     CSR                   ELSE
     C*
     C*  TOP
     C*
     CSR         PAGCMD    IFEQ '*TOP    '
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       PAG01E
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       FORCEB
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  BOTTOM
     C*
     CSR         PAGCMD    IFEQ '*BOTTOM '
     CSR                   MOVE '1'       BOT
     CSR                   Z-ADD0         DSPLYD
     CSR                   EXSR PAG1BK
     CSR                   ELSE
     C*
     C*  REFRESH SCREEN
     C*
     CSR         PAGCMD    IFEQ '*REFRESH'
     CSR         FKEY,1    IFEQ *LOVAL
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   ELSE
     CSR                   MOVE '*POSTN2 '$POCMD
     CSR                   MOVE FKEY,1    $POFKY
     CSR                   END
     CSR                   EXSR FGTWAY
     C*R         CLERR     CABEQ'1'       PAG01E
     CSR                   MOVE '0'       BOT
     CSR                   EXSR PAG1FW
     CSR                   ELSE
     C*
     C*  REPOSITIONING
     C*
     CSR         PAGCMD    IFEQ '*REPOS  '
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       FORCEB
     CSR                   EXSR PAG1FW
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   MOVE *BLANKS   PAGCMD  8
     CSR         PAG01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG02    Screen 2 page routines
     C*
     CSR         PAG02     BEGSR
     C*
     C*  NEXT PAGE
     C*
     CSR         PAGCMD    IFEQ '*NEXT   '
     CSR                   EXSR PAG2FW
     CSR                   ELSE
     C*
     C*  PREVIOUS PAGE
     C*
     CSR         PAGCMD    IFEQ '*PREV   '
     CSR                   EXSR PAG2BK
     CSR                   ELSE
     C*
     C*  REFRESH SCREEN
     C*
     CSR         PAGCMD    IFEQ '*REFRESH'
     CSR         DELTOP    SETLLWORKOPT
     CSR                   MOVE '0'       BOT
     CSR                   EXSR PAG2FW
     CSR                   END
     CSR                   END
     CSR                   END
     CSR                   MOVE *BLANKS   PAGCMD
     CSR         PAG02E    ENDSR
     C*----------------------------------------------------------------
411 AC*
409 AC*  PAG03    Screen 3 page routines
409 AC*
409 ACSR         PAG03     BEGSR
409 AC*
409 AC*  NEXT PAGE
409 AC*
409 ACSR         PAGCMD    IFEQ '*NEXT   '
409 ACSR                   EXSR PAG3FW
409 ACSR                   ELSE
409 AC*
409 AC*  PREVIOUS PAGE
409 AC*
409 ACSR         PAGCMD    IFEQ '*PREV   '
409 ACSR                   EXSR PAG3BK
409 ACSR                   ELSE
409 AC*
409 AC*  REFRESH SCREEN
409 AC*
409 ACSR         PAGCMD    IFEQ '*REFRESH'
409 ACSR                   MOVE '0'       BOT
409 ACSR                   EXSR PAG3FW
409 ACSR                   END
409 ACSR                   END
409 ACSR                   END
409 ACSR                   MOVE *BLANKS   PAGCMD
409 ACSR         PAG03E    ENDSR
     C*
     C*----------------------------------------------------------------
409 AC*
409 AC*  PAG04    Screen 4 page routines
409 AC*
409 ACSR         PAG04     BEGSR
409 AC*
409 AC*  NEXT PAGE
409 AC*
409 ACSR         PAGCMD    IFEQ '*NEXT   '
409 ACSR                   EXSR PAG4FW
409 ACSR                   ELSE
409 AC*
409 AC*  PREVIOUS PAGE
409 AC*
409 ACSR         PAGCMD    IFEQ '*PREV   '
409 ACSR                   EXSR PAG4BK
409 ACSR                   ELSE
409 AC*
409 AC*  REFRESH SCREEN
409 AC*
409 ACSR         PAGCMD    IFEQ '*REFRESH'
409 ACSR                   MOVE '0'       BOT
409 ACSR                   EXSR PAG4FW
409 ACSR                   END
409 ACSR                   END
409 ACSR                   END
409 ACSR                   MOVE *BLANKS   PAGCMD
409 ACSR         PAG04E    ENDSR
     C*
     C*----------------------------------------------------------------
     C*
     C*  PAG1FW   Let's see that next page of records
     C*
     CSR         PAG1FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
417aACSR                   MOVE *OFF      OFFLAG  1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 8 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETNEXT'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
417aAC*
417aAC*    Display is empty. Force flag on in case user pages back.
417aACSR         OPLMTS    IFEQ 'Y'
417aACSR         OFFLAG    ANDEQ*OFF
417aACSR                   MOVE *ON       OFFLAG
417aACSR                   ENDIF
417aAC*
     CSR                   GOTO ENDFWD
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 8 GOOD RECORDS
     C*
     CSR                   ADD  1         P
     CSR                   EXSR SFLADD
417aAC*
417aAC*    Display is configured to display 1 overflow slot at a time.
417aAC*
417aACSR         OPLMTS    IFEQ 'Y'
417aACSR         SLPICK    ANDEQ'N'
417aACSR         OFFLAG    ANDEQ*OFF
417aACSR                   MOVE *ON       OFFLAG
417aACSR                   MOVE *ON       STOP
417aACSR                   MOVE 'More...' MORELN
417aACSR                   GOTO ENDFWD
417aACSR                   ENDIF
417aAC*
     C**         P         IFGE 10
417bDC*R         P         IFGE 3
417bMCSR         RECNO     IFGE 3
417bACSR         #LLINE    ANDNE'16'
417bACSR         RECNO     ORGE 10
417bACSR         #LLINE    ANDEQ'16'
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR         ENDFWD    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
     CSR         ENDF      ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG1BK   Let's see the previous page
     C*
     CSR         PAG1BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     C**         DSPLYD    ADD  10        GOBACK  20
412  C*R         DSPLYD    ADD  8         GOBACK  20
417aAC*
417aAC*    Display is limited to one overflow location at a time.
417aACSR         OFFLAG    IFEQ *ON
417aACSR         DSPLYD    ADD  1         GOBACK
417aACSR                   ELSE
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR         DSPLYD    ADD  10        GOBACK
417bACSR                   OTHER
412 MCSR         DSPLYD    ADD  3         GOBACK  20
417bACSR                   ENDSL
417aACSR                   ENDIF
     CSR         BOT       IFEQ '1'
     C**         GOBACK    IFEQ 10
412  C*R         GOBACK    IFEQ 8
412 MCSR         GOBACK    IFEQ 3
417bACSR         #LLINE    ANDNE'16'
417bACSR         GOBACK    OREQ 10
417bACSR         #LLINE    ANDEQ'16'
     CSR                   MOVE '1'       FORCEB
     CSR                   END
     CSR                   MOVE '*BOTTOM '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETPREV'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR         ENDBK     TAG
     CSR                   END
     C*
     C* IF THE TOP WAS REACHED THEN POSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   END
     CSR                   EXSR PAG1FW
     CSR         ENDB      ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG2FW   Let's see that next page of delete records
     C*
     CSR         PAG2FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF2
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    $WKOF
     CSR                   MOVE *LOVAL    $WKOU
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 10 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    READEWORKOPT                  79
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   GOTO ENDFW2
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 10 GOOD RECORDS
     C*
     CSR         WKOOPT    IFEQ ' 4'
     CSR                   ADD  1         P
     CSR                   EXSR DELADD
     CSR         P         IFGE 10
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR                   END
     CSR         ENDFW2    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
     CSR         ENDF2     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  PAG2BK   Let's see the previous page of delete records
     C*
     CSR         PAG2BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB2
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     CSR         DSPLYD    ADD  10        GOBACK  20
     CSR         BOT       IFEQ '1'
     CSR         WKOPRT    SETGTWORKOPT
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR         WKOPRT    REDPEWORKOPT                  79
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK2
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR         WKOOPT    IFEQ ' 4'
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR                   END
     CSR         ENDBK2    TAG
     CSR                   END
     C*
     C* IF WE HIT THE TOP REPOSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR         WKOPRT    SETLLWORKOPT
     CSR                   END
     CSR                   EXSR PAG2FW
     CSR         ENDB2     ENDSR
     C*----------------------------------------------------------------
409 AC*
411 AC*  PAG3FW   Let's see that next page of records
409 AC*
409 ACSR         PAG3FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF3
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 8 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETNEXT'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   GOTO ENDFW3
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 8 GOOD RECORDS
     C*
     CSR                   ADD  1         P
     CSR                   EXSR SFLADD
     C**         P         IFGE 10
412 DC*R         P         IFGE 8
412  CSR         P         IFGE 3
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR         ENDFW3    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
409 AC*
409 ACSR         ENDF3     ENDSR
     C*----------------------------------------------------------------
409 AC*
409 AC*  PAG4BK   Let's see the previous page of records
409 AC*
409 ACSR         PAG3BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB3
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     C**         DSPLYD    ADD  10        GOBACK  20
412  C*R         DSPLYD    ADD  8         GOBACK  20
412 MCSR         DSPLYD    ADD  3         GOBACK  20
     CSR         BOT       IFEQ '1'
     C**         GOBACK    IFEQ 10
412  C*R         GOBACK    IFEQ 8
412 MCSR         GOBACK    IFEQ 3
     CSR                   MOVE '1'       FORCEB
     CSR                   END
     CSR                   MOVE '*BOTTOM '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETPREV'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK3
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR         ENDBK3    TAG
     CSR                   END
     C*
     C* IF THE TOP WAS REACHED THEN POSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   END
     CSR                   EXSR PAG3FW
409 AC*
409 ACSR         ENDB3     ENDSR
     C*----------------------------------------------------------------
409 AC*
409 AC*  PAG4FW   Let's see that next page of records
409 AC*
409 ACSR         PAG4FW    BEGSR
     C*
     C*  IF WE ARE AT THE BOTTOM THEN DO NOTHING
     C*
     CSR         BOT       CABEQ'1'       ENDF4
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   EXSR SFLCLR
     CSR                   MOVE *LOVAL    FKEY
     CSR                   MOVE *LOVAL    UKEY
     CSR                   MOVE '0'       BOT     1
     CSR                   MOVE '0'       TOP     1
     CSR                   MOVE '0'       STOP    1
     CSR                   Z-ADD0         P       20
     C*
     C*  GET 8 RECORDS TO DISPLAY
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETNEXT'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  OUT OF RECORDS - INFORM USER AND SET FLAG
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   GOTO ENDFW4
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER 8 GOOD RECORDS
     C*
     CSR                   ADD  1         P
     CSR                   EXSR SFLADD
     C**         P         IFGE 10
412  C*R         P         IFGE 8
412 MCSR         P         IFGE 3
     CSR                   MOVE '1'       STOP
     CSR         FORCEB    IFEQ '1'
     CSR                   MOVE '1'       BOT
     CSR                   MOVE 'Bottom ' MORELN
     CSR                   ELSE
     CSR                   MOVE 'More...' MORELN
     CSR                   END
     CSR                   END
     CSR         ENDFW4    TAG
     CSR                   END
     C*
     C*  SAVE NUMBER OF RECORDS THAT HAVE BEEN DISPLAYED
     C*
     CSR                   Z-ADDP         DSPLYD  20
     CSR                   MOVE '0'       FORCEB
409 AC*
409 ACSR         ENDF4     ENDSR
     C*----------------------------------------------------------------
409 AC*
409 AC*  PAG4BK   Let's see the previous page of records
409 AC*
409 ACSR         PAG4BK    BEGSR
     C*
     C*  IF WE ARE AT THE TOP THEN DO NOTHING
     C*
     CSR         TOP       CABEQ'1'       ENDB4
     CSR                   MOVE '0'       FORCEB  1
     C*
     C*  CALCULATE HOW MANY RECORDS TO GO BACKWARDS
     C*
     C**         DSPLYD    ADD  10        GOBACK  20
412  C*R         DSPLYD    ADD  8         GOBACK  20
412 MCSR         DSPLYD    ADD  3         GOBACK  20
     CSR         BOT       IFEQ '1'
     C**         GOBACK    IFEQ 10
412  C*R         GOBACK    IFEQ 8
412 MCSR         GOBACK    IFEQ 3
     CSR                   MOVE '1'       FORCEB
     CSR                   END
     CSR                   MOVE '*BOTTOM '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   ADD  1         GOBACK
     CSR                   END
     C*
     C*  INITIALIZE VARIABLES FOR LOOKUP
     C*
     CSR                   Z-ADD0         P
     CSR                   MOVE '0'       TOP
     CSR                   MOVE '0'       BOT
     CSR                   MOVE '0'       STOP
     C*
     C*  READ SPECIFIED FLITCHES FILE
     C*
     CSR         STOP      DOUEQ'1'
     CSR                   MOVE '*GETPREV'$POCMD
     CSR                   EXSR FGTWAY
     C*
     C*  HIT TOP OF FILE
     C*
     CSR         $PORTN    IFEQ '*NOMORE '
     CSR                   MOVE '1'       STOP
     CSR                   MOVE '1'       TOP
     CSR                   GOTO ENDBK4
     CSR                   END
     C*
     C*  RECORD READ - STOP AFTER READING 'GOBACK' NUMBER OF GOOD RECS
     C*
     CSR                   ADD  1         P
     CSR         P         IFGE GOBACK
     CSR                   MOVE '1'       STOP
     CSR                   END
     CSR         ENDBK4    TAG
     CSR                   END
     C*
     C* IF THE TOP WAS REACHED THEN POSITION POINTER TO TOP OF FILE
     C*
     CSR         TOP       IFEQ '1'
     CSR                   MOVE '*TOP    '$POCMD
     CSR                   EXSR FGTWAY
     CSR                   END
     CSR                   EXSR PAG4FW
409 AC*
409 ACSR         ENDB4     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ROLL01   Screen 1 roll up/down routine
     C*
     CSR         ROLL01    BEGSR
     C*
     C*  TEST FOR ROLLUP
     C*
     CSR         STATUS    IFEQ ROLLUP
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ROL01E
     CSR                   MOVE '*NEXT   'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ROL01E
     CSR                   END
     C*
     C*  TEST FOR ROLLDOWN
     C*
     CSR         STATUS    IFEQ ROLLDN
     CSR                   EXSR SAVOPT
     CSR         ERROR     CABEQ'1'       ROL01E
     CSR                   MOVE '*PREV   'PAGCMD
     CSR                   EXSR PAG01
     CSR                   GOTO ROL01E
     CSR                   END
     CSR         ROL01E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ROLL02   Screen 2 roll up/down routine
     C*
     CSR         ROLL02    BEGSR
     C*
     C*  TEST FOR ROLLUP
     C*
     CSR         STATUS    IFEQ ROLLUP
     CSR                   MOVE '*NEXT   'PAGCMD
     CSR                   EXSR PAG02
     CSR                   GOTO ROL02E
     CSR                   END
     C*
     C*  TEST FOR ROLLDOWN
     C*
     CSR         STATUS    IFEQ ROLLDN
     CSR                   MOVE '*PREV   'PAGCMD
     CSR                   EXSR PAG02
     CSR                   GOTO ROL02E
     CSR                   END
     CSR         ROL02E    ENDSR
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  ROLL04   Screen 4 roll up/down routine
409 AC*
409 ACSR         ROLL04    BEGSR
409 AC*
409 AC*  TEST FOR ROLLUP
409 AC*
409 ACSR         STATUS    IFEQ ROLLUP
409 ACSR                   MOVE '*NEXT   'PAGCMD
409 ACSR                   EXSR PAG04
409 ACSR                   GOTO ROL04E
409 ACSR                   END
409 AC*
409 AC*  TEST FOR ROLLDOWN
409 AC*
409 ACSR         STATUS    IFEQ ROLLDN
409 ACSR                   MOVE '*PREV   'PAGCMD
409 ACSR                   EXSR PAG04
409 ACSR                   GOTO ROL04E
409 ACSR                   END
409 ACSR         ROL04E    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SAVOPT   Verify and save options that were entered
     C*
     CSR         SAVOPT    BEGSR
     C*
     C*  READ ONLY THE CHANGED OPTIONS
     C*
     CSR                   MOVE '0'       NOMORE  1
416 DC*R                   MOVE *ZEROS    OPTCNT  30
     CSR         NOMORE    DOUEQ'1'
414eDC*R                   MOVE '0'       *IN21
414eMCSR                   MOVE '0'       *IN85
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   READCD16SFL                   79
417bACSR                   OTHER
     CSR                   READCDSPSFL                   79
417bACSR                   ENDSL
     CSR         *IN79     IFEQ '1'
     CSR                   MOVE '1'       NOMORE
     CSR                   GOTO ENDDO1
     CSR                   END
     C*
     C*  DISPLAY ERROR IF OPTION IS NOT VALID
     C*
     CSR         OPTION    IFNE *BLANKS
     CSR                   MOVEAOPTION    A2
     CSR         A2,2      IFEQ ' '
     CSR                   MOVE A2,1      A2,2
     CSR                   MOVE ' '       A2,1
     CSR                   MOVEAA2        OPTION
     CSR                   END
     C*
     C*    LOOK UP OPTION IN PROFILE - ERROR IF NOT FOUND
     C*
     CSR         OPTION    LOKUPZOPT                     50
     CSR         *IN50     IFEQ *OFF
     CSR                   MOVE '1'       ERROR
     CSR                   MOVE '1'       *IN21
414eACSR                   MOVE '1'       *IN85
     CSR                   MOVE *BLANKS   ERRMSG
     CSR                   EXSR ZM0108
     CSR                   END
414eAC*
414eAC*    LOOK UP OPTION IN PROFILE - ERROR IF NOT FOUND
414eAC*
414eACSR         OPTION    IFEQ ' 1'
414eACSR                   ADD  1         OPTCNT
414eACSR         OPTCNT    IFGT 1
414eACSR                   MOVE '1'       ERROR
414eACSR                   MOVE '1'       *IN21
414eACSR                   MOVELDESC,4    ERRMSG    P
414eACSR                   EXSR ZM0105
414eACSR                   ENDIF
414eAC*
414eAC*    Force SFLNXTCHG to be on each time.
414eACSR                   MOVE '1'       *IN85
414eACSR                   ENDIF
414eAC*
414eAC*    Pick slot not available for replenishment.
417dAC*     If breakdown replenishment, allow pick slot to be used.
414eAC*
414eACSR         SLPICK    IFEQ 'Y'
414eACSR         OPTION    ANDEQ' 1'
417dACSR         RLTYPE    ANDNE'B'
414eACSR                   MOVE *ON       ERROR
414eACSR                   MOVE *ON       *IN21
414eACSR                   MOVE *ON       *IN85
414eACSR                   MOVELDESC,3    ERRMSG    P
414eACSR                   EXSR ZM0105
414eACSR                   ENDIF
     CSR                   END
     C*
     C*  SAVE OPTION
     C*
     CSR                   Z-ADDRECNO     Y       30
     CSR                   MOVE FKEY,Y    WKOKYF
     CSR                   MOVE UKEY,Y    WKOKYU
     CSR         WKOUNQ    CHAINWORKOPT              79
     CSR         *IN79     IFEQ '0'
     CSR         OPTION    IFEQ *BLANKS
     CSR                   DELETWKOREC
     CSR                   ELSE
     CSR                   MOVE OPTION    WKOOPT
414eDC*R                   MOVE *IN21     WKOERR
414eMCSR                   MOVE *IN85     WKOERR
     CSR                   UPDATWKOREC
     CSR                   END
     CSR                   ELSE
     CSR         OPTION    IFNE *BLANKS
     CSR                   MOVE #USER     WKOUSR
     CSR                   MOVE #PROG     WKOPGM
     CSR                   MOVE FKEY,Y    WKOKYF
     CSR                   MOVE UKEY,Y    WKOKYU
     CSR                   MOVE OPTION    WKOOPT
414eDC*R                   MOVE *IN21     WKOERR
414eMCSR                   MOVE *IN85     WKOERR
     CSR                   WRITEWKOREC
     CSR                   END
     CSR                   END
     CSR         ENDDO1    TAG
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLADD   Add record to subfile
     C*
     CSR         SFLADD    BEGSR
417bDC*R         RECNO     IFLT 11
417bMCSR         RECNO     IFLT 3
417bACSR         #LLINE    ANDNE'16'
417bACSR         RECNO     ORLT 10
417bACSR         #LLINE    ANDEQ'16'
     CSR                   ADD  1         RECNO
     CSR                   Z-ADDRECNO     Y
     C*
     C*  SAVE FILE AND UNIQUE KEYS
     C*
     CSR                   MOVE $POFKY    FKEY,Y
     CSR                   MOVE $POUKY    UKEY,Y
     C*
     C*  WRITE DISPLAY LINE TO SUBFILE
     C*
     CSR                   EXSR ZZFILL
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITED16SFL
417bACSR                   OTHER
     CSR                   WRITEDSPSFL
417bACSR                   ENDSL
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLCLR   Clear display subfile
     C*
     CSR         SFLCLR    BEGSR
     C*
     C*  CLEAR DISPLAY SUBFILE
     C*
     CSR                   MOVE '0'       *IN01
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITED16SFC
417bACSR                   OTHER
     CSR                   WRITEDSPSFC
417bACSR                   ENDSL
     CSR                   Z-ADD0         RECNO   40
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLDSP   Display subfile
     C*
     CSR         SFLDSP    BEGSR
     C*
     C*  WRITE OPTION AND COMMAND LINES TO DISPLAY
     C*
411 DC*R                   WRITEOPTREC
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEC16REC
417bACSR                   OTHER
     CSR                   WRITECMDREC
417bACSR                   ENDSL
     C*
     C*  WRITE 'BOTTOM/MORE...' FIELD TO DISPLAY
     C*
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bAC*R                   WRITEMORREC16
417bACSR                   OTHER
411 DC*R                   WRITEMORREC
417bACSR                   ENDSL
     C*
     C*  WRITE POSITION TO FIELD TO DISPLAY
     C*
     CSR                   WRITEPOSTNREC
414cDC*R                   WRITESCANREC
     C*
     C*  GET ANY EXISTING VALUES FOR THE OPTIONS
     C*
     CSR                   EXSR SFLOPT
     C*
     C*  POSITION CURSOR TO FIRST OPTION WHEN NO ERRORS EXIST
     C*
     CSR         ERROR     IFNE '1'
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR         1         CHAIND16SFL               79
417bACSR                   OTHER
     CSR         1         CHAINDSPSFL               79
417bACSR                   ENDSL
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE '1'       *IN20
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   UPDATD16SFL
417bACSR                   OTHER
     CSR                   UPDATDSPSFL
417bACSR                   ENDSL
     CSR                   END
     CSR                   END
     C*
     C*  WRITE SUBFILE TO DISPLAY
     C*
     CSR                   MOVE '1'       *IN01
     CSR                   Z-ADD1         RECNO
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITED16SFC
417bACSR                   OTHER
     CSR                   WRITEDSPSFC
417bACSR                   ENDSL
414cACSR                   WRITESCANREC
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SFLOPT   Initialize options for subfile
     C*
     CSR         SFLOPT    BEGSR
411 DC*R         1         DO   10        X       30
417bDC*R         1         DO   3         X       30
417bMCSR         1         DO   DSPLYD    X       30
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR         X         CHAIND16SFL               79
417bACSR                   OTHER
     CSR         X         CHAINDSPSFL               79
417bACSR                   ENDSL
     CSR         *IN79     IFEQ '0'
     CSR                   MOVE FKEY,X    WKOKYF
     CSR                   MOVE UKEY,X    WKOKYU
     CSR         WKOUNQ    CHAINWORKOPT              78
     CSR         *IN78     IFEQ '0'
     CSR                   MOVE WKOOPT    OPTION
     CSR                   MOVE WKOERR    *IN21
414eACSR                   MOVE WKOERR    *IN85
     CSR                   MOVE WKOERR    *IN20
     CSR                   ELSE
     CSR                   MOVE *BLANKS   OPTION
     CSR                   MOVE '0'       *IN21
     CSR                   MOVE '0'       *IN20
414eACSR                   MOVE '0'       *IN85
     CSR                   END
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   UPDATD16SFL
417bACSR                   OTHER
     CSR                   UPDATDSPSFL
417bACSR                   ENDSL
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  SUBROUTINE ZMxxxx  Control message display subfile
     C*
     C*    ZMCMSG  Clear message record subfile
     C*
     CSR         ZMCMSG    BEGSR
     CSR                   MOVE '0'       *IN97
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEM16CTL
417bACSR                   OTHER
     CSR                   WRITEMSGCTL
417bACSR                   ENDSL
     CSR                   Z-ADD*ZERO     MSGK    40
     CSR                   MOVE '*CLEAR ' #MSGID  7
     CSR                   MOVE '*NULL  ' #MSGTP  7
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*
     C*    ZMDMSG  Display message record subfile
     C*
     CSR         ZMDMSG    BEGSR
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEM16CLR
417bACSR                   OTHER
     CSR                   WRITEMSGCLR
417bACSR                   ENDSL
     CSR                   MOVE '1'       *IN97
     CSR         MSGK      IFGT 0
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEM16CTL
417bACSR                   OTHER
     CSR                   WRITEMSGCTL
417bACSR                   ENDSL
     CSR                   Z-ADD*ZERO     MSGK
     CSR                   END
     CSR                   ENDSR
     C*
     C*    ZMIMSG  Initialization necessary for message subfile
     C*
     CSR         ZMIMSG    BEGSR
     CSR                   MOVE #PROG     #PGMQ  10
     CSR                   EXSR ZMCMSG
     CSR                   ENDSR
     C*
     C*    ZMPMSG  Add message record to subfile
     C*
     CSR         ZMPMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM #PROG     #PGMQ
     CSR                   PARM           #MSGK
     CSR         #MSGID    IFNE '*CLEAR '
     CSR                   ADD  1         MSGK
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEM16REC
417bACSR                   OTHER
     CSR                   WRITEMSGREC
417bACSR                   ENDSL
     CSR                   END
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*
     C*    ZMQMSG  Add message record to subfile from program queue
     C*
     CSR         ZMQMSG    BEGSR
     CSR                   ADD  1         MSGK
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bACSR                   WRITEM16REC
417bACSR                   OTHER
     CSR                   WRITEMSGREC
417bACSR                   ENDSL
     CSR                   ENDSR
     C*
     C*    ZSCLR   Clear screen
     C*
     CSR         ZSCLR     BEGSR
417bACSR                   SELEC
417bACSR         #LLINE    WHEQ '16'
417bAC*R                   WRITECLRSCR
417bACSR                   OTHER
     C*R                   WRITECLRSCR
417bACSR                   ENDSL
     CSR                   MOVE *ON       SCLEAR  1
     CSR                   ENDSR
     C*
     C*    ZMSMSG  Send program message to a different program msgq
     C*
     CSR         ZMSMSG    BEGSR
     CSR         $MSGF     IFEQ *BLANKS
     CSR                   MOVE #MSGF     $MSGF  10
     CSR                   END
     CSR                   CALL 'PUTMSG'
     CSR                   PARM           $MSGF
     CSR                   PARM           #MSGID
     CSR                   PARM           #MSGTP
     CSR                   PARM           #MSGDT
     CSR                   PARM '*PREV'   #PGMQ
     CSR                   PARM           #MSGK
     CSR                   MOVE *BLANKS   #MSGDT
     CSR                   MOVE *BLANKS   $MSGF
     CSR                   ENDSR
     C*
     C*    ZMnnnn  Build and send message nnnn to this program
     C*----------------------------------------------------------------
416gAC*   DRI0001  Interface error.
     C*
     CSR         ZM0001    BEGSR
     CSR                   MOVELDRIMSG    TEMPA2  2
     CSR         TEMPA2    IFEQ 'H:'
     CSR                   MOVE 'DRI0002' #MSGID
     CSR                   MOVE DRIMSG    A58    58
     CSR                   MOVELA58       DRIMSG    P
     CSR                   ELSE
     CSR                   MOVE 'DRI0001' #MSGID
     CSR                   ENDIF
     CSR                   MOVE DRIMSG    ERDMSG
     CSR                   MOVE DRIRTN    ERDRTN
     CSR                   MOVE DRICMD    ERDCMD
     CSR                   MOVE DRISUB    ERDSUB
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0101  Program not found.
     C*
     CSR         ZM0101    BEGSR
     CSR                   MOVE 'PIR0101' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0102  Program not found.
     C*
     CSR         ZM0102    BEGSR
     CSR                   MOVE 'PIR0102' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0103  Program not found while exec. subroutine.
     C*
     CSR         ZM0103    BEGSR
     CSR                   MOVE 'PIR0103' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     C*R                   MOVE CLPRGM    ERRCL1
     C*R                   MOVE CLINFO    ERRCL2
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0104  Pressed an invalid key.
     C*
     CSR         ZM0104    BEGSR
     CSR                   MOVE 'PIR0104' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0105
     C*
     CSR         ZM0105    BEGSR
     CSR                   MOVE 'PIR0105' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0106  Invalid cursor position.
     C*
     CSR         ZM0106    BEGSR
     CSR                   MOVE 'PIR0106' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0107  Invalid value for "position To"
     C*
     CSR         ZM0107    BEGSR
     CSR                   MOVE 'PIR0107' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*      0108  Invalid Option.
     C*
     CSR         ZM0108    BEGSR
     CSR                   MOVE 'PIR0108' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVELOPTION    ERRMSG
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*     ZM04     Slot record does not exist.
     C*
     CSR         ZM04      BEGSR
     CSR                   MOVE 'IT13204' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE W1DISP    ERDISP
     CSR                   MOVEAERRMSG    $MD,1
     CSR                   EXSR ZMPMSG
     CSR                   ENDSR
409 AC*----------------------------------------------------------------
409 AC*   PIR1005  Value must be 'Y' or 'N'
409 AC*
409 ACSR         ZM1005    BEGSR
409 ACSR                   MOVE 'PIR1005' #MSGID
409 ACSR                   MOVE '*DIAG  ' #MSGTP
409 ACSR                   MOVEAERRMSG    $MD
409 ACSR                   EXSR ZMPMSG
409 ACSR                   ENDSR
     C*----------------------------------------------------------------
221 AC*    IT27101  SLOT
221 AC*
221 ACSR         ZM7101    BEGSR
221 ACSR                   MOVE 'IT27101' #MSGID
221 ACSR                   MOVE '*DIAG  ' #MSGTP
221 ACSR                   MOVE *BLANKS   $MD
221 ACSR                   EXSR ZMPMSG
221 ACSR                   ENDSR
AFI AC*----------------------------------------------------------------
AFI AC*     ZM0110   Quantity must be greater than 0.
AFI AC*
AFI ACSR         ZM0110    BEGSR
AFI ACSR                   MOVE 'PIR0110' #MSGID
AFI ACSR                   MOVE '*DIAG  ' #MSGTP
AFI ACSR                   MOVELDESC,1    ERRMSG    P
AFI ACSR                   MOVEAERRMSG    $MD,1
AFI ACSR                   EXSR ZMPMSG
AFI ACSR                   ENDSR
416kAC*----------------------------------------------------------------
416kAC*   PIR2007  Invalid slot, slot inactive.
416kAC*
416kACSR         ZM2007    BEGSR
416kACSR                   MOVE 'PIR2007' #MSGID
416kACSR                   MOVE '*DIAG  ' #MSGTP
416kACSR                   MOVE *BLANKS   $MD
416kACSR                   EXSR ZMPMSG
416kACSR                   ENDSR
     C*----------------------------------------------------------------
     C*   PIR7971  Error in writing a record.
     C*
410 ACSR         ZM71      BEGSR
     CSR                   MOVE 'PIR7971' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE *BLANKS   $MD
     CSR                   EXSR ZMPMSG
410 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*   PIR7972  Error in updating a record.
     C*
410 ACSR         ZM72      BEGSR
     CSR                   MOVE 'PIR7972' #MSGID
     CSR                   MOVE '*DIAG  ' #MSGTP
     CSR                   MOVE *BLANKS   $MD
     CSR                   EXSR ZMPMSG
410 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZCMD    Process non-standard function keys
     C*
     CSR         ZZCMD     BEGSR
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
221 AC*  ZZCHK1   Screen 1 error checking.
221 AC*
221 ACSR         ZZCHK1    BEGSR
221 ACSR                   MOVE *OFF      ERROR
416bACSR                   MOVE '*NO '    RTVSLT
417cACSR                   MOVE *BLANKS   WWLLP#
221 AC*
221 ACSR                   MOVE *OFF      NOSLT   1
221 AC*
221 AC*  SLOT not entered.
221 AC*
221 ACSR         W1DISP    IFEQ *BLANKS
221 ACSR                   MOVE *ON       NOSLT
221 ACSR                   MOVE *BLANKS   WOSLT  12
     CSR                   GOTO ENDCK1
221 ACSR                   ENDIF
414cAC*
414cAC*  Call API for slot.
414cAC*
414cACSR                   CALL @APICS
414cACSR                   PARM           W1DISP
414cACSR                   PARM 1         WOROW
414cACSR                   PARM 27        WOCOL
414cACSR                   PARM           @ARTN   8
414cACSR         @ARTN     IFEQ '*REDSPLY'
414cACSR                   MOVE *ON       REDSPL
414cACSR                   GOTO ENDCK1
414cACSR                   ENDIF
417cAC*
417cACSR                   SELEC
417cAC*    Prompt user to scan lot/license plate for tracking.
417cACSR         LOTTRK    WHEQ '*YES'
417cACSR         LICTRK    OREQ '*YES'
417cACSR                   EXSR ZZLLP
417cACSR         ERROR     IFEQ *ON
417cACSR         CANCEL    OREQ *ON
417cACSR                   GOTO ENDCK1
417cACSR                   ENDIF
417cACSR                   ENDSL
416bAC*
416bACSR                   SELEC
416bAC*    Check only date sensitive items.
416bACSR         ITFLGD    WHEQ 'Y'
416bACSR         OPTION    ANDEQ' 1'
416bAC*
416bACSR         ITFLGD    OREQ 'Y'
416bACSR         OPTION    ANDEQ'  '
416bAC*
416bACSR                   MOVE '*YES'    RTVSLT
416bACSR                   MOVE W1DISP    KYDISP
416bACSR         SLFIKY    CHAINSLOT2               N79
416bACSR         *IN79     IFEQ *ON
416bACSR                   MOVE *ZEROS    SLEXPD
416bACSR                   ENDIF
416bAC*
416bACSR                   Z-ADDSLEXPD    SVEXPD
416bAC*
416bAC*    Retrieve current date in yyyymmdd format.
416bACSR                   MOVE '*CURCMD '$CVCMD
416bACSR                   EXSR ZZCVDT
416bACSR                   Z-ADD$CVD8O    TSTDTE
416bAC*
416bAC*    Check slot selected for expired product.
416bACSR                   SELEC
416bAC*    Replenishment with expired product not allowed. Display msg.
416bACSR         OPRPEX    WHEQ '2'
416bACSR         SVEXPD    ANDLTTSTDTE
416dACSR         SVEXPD    ANDGT0
416bAC*
416bAC*    Replenishment with expired product, warn user. Display msg.
416bACSR         OPRPEX    OREQ '3'
416bACSR         SVEXPD    ANDLTTSTDTE
416dACSR         SVEXPD    ANDGT0
416bAC*
416bACSR                   MOVE '*EXPIRED'MSGTYP
416bACSR                   EXSR ZZWARN
416bACSR         ERROR     IFEQ *ON
416bACSR                   GOTO ENDCK1
416bACSR                   ENDIF
416bAC*
416bACSR                   ENDSL
416bACSR                   ENDSL
416bAC*
416bACSR                   SELEC
416bAC*    Check only date sensitive items.
416bAC*      Check slot to see if taken out of FIFO date rotation.
416bACSR         ITFLGD    WHEQ 'Y'
416bACSR         OPTION    ANDEQ' 1'
416bACSR         OPRPFI    ANDEQ'3'
416bACSR         ERROR     ANDEQ*OFF
416bAC*
416bACSR         ITFLGD    OREQ 'Y'
416bACSR         OPTION    ANDEQ'  '
416bACSR         OPRPFI    ANDEQ'3'
416bACSR         ERROR     ANDEQ*OFF
416bAC*
416bACSR                   MOVE W1DISP    KYDISP
416bACSR                   EXSR ZZCKRT
416bACSR                   SELEC
416bACSR         DSPWIN    WHEQ '*YES'
416bACSR                   MOVE '*FIFO   'MSGTYP
416bACSR                   EXSR ZZWARN
416bACSR         ERROR     IFEQ *ON
416bACSR                   GOTO ENDCK1
416bACSR                   ENDIF
416bAC*
416bACSR                   ENDSL
416bAC*
416bACSR                   ENDSL
     C*
     C*    Get slot record.
     C*
     CSR         SLKEY     CHAINSLOT2                79
     C*
     C*      Not on file.
     C*
     CSR         *IN79     IFEQ *ON
     CSR                   MOVE *ON       ERROR
     CSR                   MOVE *ON       *IN21
     CSR                   MOVE *ON       *IN01
417cACSR                   MOVE *BLANKS   ERRMSG
     CSR                   EXSR ZM04
     CSR                   GOTO ENDCK1
     CSR                   ENDIF
416kAC*
416kAC*    Scanned slot not active. Not eligible for replenishment.
416kACSR         *IN79     IFEQ *OFF
416kACSR         SLSTAT    ANDNE'A '
416kACSR                   MOVE *ON       ERROR
416kACSR                   MOVE *ON       *IN21
416kACSR                   MOVE *ON       *IN01
416kACSR                   EXSR ZM2007
416kACSR                   GOTO ENDCK1
416kACSR                   ENDIF
     C*
     C*     Slot not a replenishment slot for item.
417dAC*     If breakdown replenishment, allow pick slot to be used.
     C*
414dACSR         *IN79     IFEQ *OFF
414dACSR         SLPICK    ANDEQ'Y'
417dACSR         RLTYPE    ANDNE'B'
414dACSR                   MOVE *ON       CANCEL
414dACSR                   MOVE *ON       ERROR
414dACSR                   MOVE *ON       *IN21
414dACSR                   MOVE *ON       *IN85
414dACSR                   MOVE *ON       *IN01
414dACSR                   MOVELDESC,3    ERRMSG    P
414dACSR                   UNLCKSLOT2
414dACSR                   EXSR ZM0105
414dACSR                   ENDIF
     C*R         *IN79     IFEQ *OFF
     C*R         SLSTYP    ORNE 'F'
     C*R         SLPICK    ORNE 'N'
     CSR         SLITEM    IFNE $ITEM
417dACSR         RLTYPE    ANDNE'B'
409 AC*     Look for a virtual slot for item.
409 ACSR                   EXSR ZZVSLT
409 ACSR         FVSLOT    IFNE *ON
     CSR                   MOVE *ON       ERROR
     CSR                   MOVE *ON       *IN21
     CSR                   MOVE *ON       *IN01
     CSR                   MOVE *BLANKS   ERRMSG
AFI ACSR                   UNLCKSLOT2
     CSR                   EXSR ZM7101
409 ACSR                   ENDIF
     CSR                   ENDIF
     C*
     C*     Available qty must be greater than zero.
     C*
     CSR                   CALL 'SLOTQTY'
     CSR                   PARM           SLSTK1
     CSR                   PARM           SLSTK2
     CSR                   PARM           SLSTK3
     C*
     CSR                   PARM           SLALC1
     CSR                   PARM           SLALC2
     CSR                   PARM           SLALC3
     C*
     CSR                   PARM           SLTFR1
     CSR                   PARM           SLTFR2
     CSR                   PARM           SLTFR3
     C*
     CSR                   PARM           SLPCK1
     CSR                   PARM           SLPCK2
     CSR                   PARM           SLPCK3
     C*
     CSR                   PARM           SLRCV1
     CSR                   PARM           SLRCV2
     CSR                   PARM           SLRCV3
     C*
     CSR                   PARM           STOCK1  50
     CSR                   PARM           STOCK2  30
     CSR                   PARM           STOCK3  30
     C*
     CSR                   PARM           AVAIL1  50
     CSR                   PARM           AVAIL2  30
     CSR                   PARM           AVAIL3  30
     C*
     CSR         AVAIL1    IFLE 0
     CSR                   MOVE *ON       ERROR
     CSR                   MOVE *ON       *IN21
     CSR                   MOVE *ON       *IN01
     CSR                   MOVE *BLANKS   ERRMSG
AFI ACSR                   UNLCKSLOT2
     CSR                   EXSR ZM0110
     CSR                   ENDIF
221 AC*
221 ACSR         ENDCK1    ENDSR
411 AC*----------------------------------------------------------------
     C*
411 AC*  ZZCHK3   Screen 3 error checking.
     C*
     CSR         ZZCHK3    BEGSR
     CSR                   MOVE *OFF      ERROR
     CSR                   MOVE *OFF      *IN23
     CSR                   MOVE *OFF      *IN03
     C*
     C*  Quantity can not be greater than available.
     C*
     CSR         W3RQTY    IFGT WOAVL1
     CSR                   MOVE *ON       ERROR
     CSR                   MOVE *ON       *IN23
     CSR                   MOVE *ON       *IN03
     CSR                   MOVE *BLANKS   ERRMSG
     CSR                   EXSR ZM0110
     CSR                   ENDIF
     C*
     C*  Quantity can not be less than 0.
     C*
     CSR         W3RQTY    IFLT 0
     CSR                   MOVE *ON       ERROR
     CSR                   MOVE *ON       *IN23
     CSR                   MOVE *ON       *IN03
     CSR                   MOVE 'XXXXX'   ERRMSG
     CSR                   EXSR ZM0110
     CSR                   ENDIF
     CSR         ENDCK3    ENDSR
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  ZZCHK4   Screen 4 error checking.
409 AC*
409 ACSR         ZZCHK4    BEGSR
409 ACSR                   MOVE *OFF      ERROR
409 AC*
409 AC*  Verify Zero, Y,N
409 AC*
409 ACSR         W4ZERO    IFNE 'Y'
409 ACSR         W4ZERO    ANDNE'N'
409 ACSR                   MOVE *ON       ERROR
409 ACSR                   MOVE *ON       *IN24
409 ACSR                   MOVE *ON       *IN04
409 ACSR                   MOVE *BLANKS   ERRMSG
409 ACSR                   MOVELDESC,2    ERRMSG
409 ACSR                   EXSR ZM1005
409 ACSR                   ENDIF
409 ACSR         ENDCK4    ENDSR
409aAC*----------------------------------------------------------------
409aAC*
409aAC*  ZZCHK    Check if slot has virtual slots tied to it.
409aAC*
409aACSR         ZZCHKV    BEGSR
409aACSR                   MOVE *OFF      ERROR   1
409aACSR                   MOVE *OFF      HASVS   1
409aAC*
409aACSR         SLKEY     SETLLVSLOT2
409aACSR         FOREVR    DOUNEFOREVR
409aACSR         SLKEY     READEVSLOT2                 7879
409aACSR         *IN79     IFEQ *ON
409aACSR                   LEAVE
409aACSR                   ENDIF
409aACSR                   MOVE *ON       HASVS
409aAC***                  MOVE *ON       ERROR
409aACSR                   ENDDO
409aAC*
409aACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGET   Get record with unique key.
     C*
     CSR         ZZFGET    BEGSR
     C*
     C*    Code to use when file key and unique key are the same.
     C*
     C*R         FILUKY    CHAINRECORD               79
     C*
     C*    Code to use when file key and unique key are different.
     C*
     CSR         FILUKY    CHAINRECORDU              79
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGTN   Get next record
     C*
     CSR         ZZFGTN    BEGSR
     CSR         TRY1      TAG
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*R                   READ RECORD                   79
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         PARTKY    READERECORD                   79
     CSR         *IN79     CABEQ*ON       ENDGTN
     CSR         SLSTAT    IFEQ 'Z '
415bDC*R         SLRSRV    ANDEQ'N'
415bMCSR         SLRSRV    ANDNE'Y'
416kAC*
416kAC*    Omit all non-active slots.
416kACSR         SLSTAT    ORNE 'A '
416kAC*
     CSR                   GOTO TRY1
     CSR                   ENDIF
406 DC*R         SLPICK    IFEQ 'Y'
406 DC*R                   GOTO TRY1
406 DC*R                   ENDIF
     C*
     CSR         ENDGTN    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFGTP   Get previous record
     C*
     CSR         ZZFGTP    BEGSR
     CSR         TRY2      TAG
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*R                   READPRECORD                   79
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         PARTKY    REDPERECORD                   79
417aACSR         *IN79     IFEQ *ON
417aACSR                   MOVE *OFF      OFFLAG
     CSR         *IN79     CABEQ*ON       ENDGTP
417aACSR                   ENDIF
417aAC*
     CSR         SLSTAT    IFEQ 'Z '
415bDC*R         SLRSRV    ANDEQ'N'
415bMCSR         SLRSRV    ANDNE'Y'
416kAC*
416kAC*    Omit all non-active slots.
416kACSR         SLSTAT    ORNE 'A '
416kAC*
     CSR                   GOTO TRY2
     CSR                   ENDIF
406 DC*R         SLPICK    IFEQ 'Y'
406 DC*R                   GOTO TRY2
406 DC*R                   ENDIF
     C*
     CSR         ENDGTP    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZFILL   Fill display line with values that need
     C*           to be converted.
     C*
     CSR         ZZFILL    BEGSR
     C*
     CSR                   MOVE *BLANKS   W1DISP
     C*   Change priority from negative to positive.
     C*
     CSR                   Z-SUBSLPRTY    W1PRTY
     C*
     C*   Expiration date
     C*
416bACSR                   Z-ADDSLEXPD    SVEXPD
     CSR         SLEXPD    IFEQ 0
     CSR                   Z-ADD0         W1EXPD
     CSR                   ELSE
     CSR                   MOVE '*CMDMDY '$CVCMD
     CSR                   MOVE SLEXPD    $CVD8I
     CSR                   CALL @CVTDT
     CSR                   PARM           $CVTDT
     CSR                   Z-ADD$CVD6O    W1EXPD
     CSR                   END
     C*
     C*   Entered date
     C*
     CSR         SLENTD    IFEQ 0
     CSR                   Z-ADD0         W1ENTD
     CSR                   ELSE
     CSR                   MOVE '*CMDMDY '$CVCMD
     CSR                   MOVE SLENTD    $CVD8I
     CSR                   CALL @CVTDT
     CSR                   PARM           $CVTDT
     CSR                   Z-ADD$CVD6O    W1ENTD
     CSR                   END
     C*
     C*    Create a quantity string to print.
     C*
     CSR                   CALL 'SLOTQTY'
     CSR                   PARM           SLSTK1
     CSR                   PARM           SLSTK2
     CSR                   PARM           SLSTK3
     C*
     CSR                   PARM           SLALC1
     CSR                   PARM           SLALC2
     CSR                   PARM           SLALC3
     C*
     CSR                   PARM           SLTFR1
     CSR                   PARM           SLTFR2
     CSR                   PARM           SLTFR3
     C*
     CSR                   PARM           SLPCK1
     CSR                   PARM           SLPCK2
     CSR                   PARM           SLPCK3
     C*
     CSR                   PARM           SLRCV1
     CSR                   PARM           SLRCV2
     CSR                   PARM           SLRCV3
     C*
     CSR                   PARM           STOCK1  50
     CSR                   PARM           STOCK2  30
     CSR                   PARM           STOCK3  30
     C*
     CSR                   PARM           AVAIL1  50
     CSR                   PARM           AVAIL2  30
     CSR                   PARM           AVAIL3  30
     C*
     CSR                   MOVE '*QTY2STR'$PCMD
     CSR                   Z-ADDAVAIL1    $PQTY1
     CSR                   Z-ADDAVAIL2    $PQTY2
     CSR                   Z-ADDAVAIL3    $PQTY3
     CSR                   MOVE *BLANKS   $PQSTR
     C*
     CSR                   CALL 'CVTQTY'
     CSR                   PARM           $PCMD   8
     CSR                   PARM           $PPRG  10
     CSR                   PARM           $PQTY1  70
     CSR                   PARM           $PQTY2  70
     CSR                   PARM           $PQTY3  70
     CSR                   PARM           $PUM1   2
     CSR                   PARM           $PUM2   2
     CSR                   PARM           $PUM3   2
     CSR                   PARM           $PQSTR 10
     CSR                   PARM           $PUSTR 17
     CSR                   PARM           $PRTN   8
     CSR                   PARM           $PERM
     C*
     CSR                   MOVE $PQSTR    W1QTY
     C*
     C*   Adjusted date
     C*
     C*R         SLADJD    IFEQ 0
     C*R                   Z-ADD0         W1ADJD
     C*R                   ELSE
     C*R                   MOVE '*CMDMDY '$CVCMD
     C*R                   MOVE IQADJD    $CVD8I
     C*R                   CALL @CVTDT
     C*R                   PARM           $CVTDT
     C*R                   Z-ADD$CVD6O    W1ADJD
     C*R                   END
     C*
     C*   User
     C*
     C*R                   MOVELIQADJB    W1ADJB
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZINZ    Extra program initialization. Called from *INZSR.
     C*
     CSR         ZZINZ     BEGSR
409aAC*
409aACSR                   MOVE *OFF      FOREVR  1
410 ACSR                   Z-ADD0         CURTRN  70
414cACSR                   MOVE *ZEROS    WOROW
414cACSR                   MOVE *ZEROS    WOCOL
410 ACSR                   MOVE *BLANKS   CURTSK  6
410 ACSR                   MOVE *BLANKS   CURTYP  1
410 ACSR                   MOVE *OFF      CURENT  1
416bACSR                   MOVE *BLANKS   MSGTYP  8
416bACSR                   MOVE '*NO '    RTVSLT  4
417dACSR         *LIKE     DEFN ITITEM    KYITEM
417dACSR         *LIKE     DEFN ITTYPE    RLTYPE
417dACSR         *LIKE     DEFN ITCUBE    EACUBE
417dACSR         *LIKE     DEFN ITSWGT    EASWGT
417dACSR         *LIKE     DEFN LBQPCK    RPLQTY
417dACSR         *LIKE     DEFN LBQPCK    REPQTY
410 ACSR         *LIKE     DEFN PTSTIM    ZZSTIM
410 ACSR         *LIKE     DEFN PTETIM    ZZETIM
410 ACSR         *LIKE     DEFN PTSDTE    ZZSDTE
410 ACSR         *LIKE     DEFN PTEDTE    ZZEDTE
410 ACSR         *LIKE     DEFN PTSTIM    STRTIM
410 ACSR         *LIKE     DEFN PTETIM    FINTIM
416bACSR         *LIKE     DEFN TODAY     TSTDTE
416bACSR         *LIKE     DEFN TODAY     CKEXPD
     C*
     C*  Define unique file key.
     C*
     CSR         FILUKY    KLIST
     CSR                   KFLD           UKWHSE
     CSR                   KFLD           UKWHDP
     CSR                   KFLD           UKDISP
     C*
     C*  Define full key for main file.
     C*
     CSR         FILEKY    KLIST
     CSR                   KFLD           SLWHSE
     CSR                   KFLD           SLITEM
     CSR                   KFLD           SLSTAT
     CSR                   KFLD           SLPICK
     CSR                   KFLD           SLPRTY
     CSR                   KFLD           SLEXPD
     CSR                   KFLD           SLENTD
     CSR                   KFLD           SLWHDP
     CSR                   KFLD           SLSTYP
     CSR                   KFLD           SLAISL
     CSR                   KFLD           SLPSEQ
     CSR                   KFLD           SLRLVL
     CSR                   KFLD           SLHAND
     C*
     C*  Define partial key for main file (if needed).
     C*
     CSR         PARTKY    KLIST
     CSR                   KFLD           $WHSE
417dDC*R                   KFLD           $ITEM
417dMCSR                   KFLD           KYITEM
416bAC*
416bAC*  Define key for ITMEXCP file.
416bAC*
416bACSR         EXKEY     KLIST
416bACSR                   KFLD           EXWHSE
416bACSR                   KFLD           EXWHDP
416bACSR                   KFLD           EXSTYP
416bACSR                   KFLD           EXITEM
416bACSR                   KFLD           EXGDTE
416bACSR                   KFLD           EXGTIM
     C*
     C*  Define key for item file.
     C*
     CSR         ITKEY     KLIST
     CSR                   KFLD           $WHSE
     CSR                   KFLD           $ITEM
417dAC*
417dAC*  Define key for item link file.
417dAC*
417dACSR         ILKEY     KLIST
417dACSR                   KFLD           $WHSE
417dACSR                   KFLD           ILITM2
     C*
     C*  Define key for warehouse department.
     C*
     CSR         WDKEY     KLIST
     CSR                   KFLD           $WHSE
     CSR                   KFLD           ITWHDP
     C*
     C*  Define key for SLOT file.
     C*
     CSR         SLKEY     KLIST
     CSR                   KFLD           $WHSE
     CSR                   KFLD           ITWHDP
     CSR                   KFLD           W1DISP
     C*
     C*  Define key for SLOT2 file. (From slot)
     C*
410 ACSR         SLFKEY    KLIST
410 ACSR                   KFLD           $PWHSE
410 ACSR                   KFLD           ITWHDP
410 ACSR                   KFLD           $DISP
     C*
     C*  Define key for SLOT2 file. (To slot)
     C*
     CSR         SLTKEY    KLIST
     CSR                   KFLD           $PWHSE
     CSR                   KFLD           ITWHDP
     CSR                   KFLD           $HOME
409 AC*
409 AC*  Define key for SLOT2 file.
409 AC*
409 ACSR         SLVKEY    KLIST
409 ACSR                   KFLD           $WHSE
409 ACSR                   KFLD           ITWHDP
409 ACSR                   KFLD           VSDISP
416bAC*
416bAC*  Define key for SLOT2 file.
416bACSR         *LIKE     DEFN SLDISP    KYDISP
416bACSR         SLFIKY    KLIST
416bACSR                   KFLD           $WHSE
416bACSR                   KFLD           ITWHDP
416bACSR                   KFLD           KYDISP
416bAC*
416bAC*  Define key for SLOT3 file.
416bACSR         *LIKE     DEFN SLSTAT    KEYSTA
416bACSR         *LIKE     DEFN SLPICK    KYPICK
416bACSR         *LIKE     DEFN SLPRTY    KYPRTY
416bACSR         *LIKE     DEFN SLEXPD    KYEXPD
416bACSR         SLKY3A    KLIST
416bACSR                   KFLD           $WHSE
416bACSR                   KFLD           $ITEM
416bACSR                   KFLD           KEYSTA
416bACSR                   KFLD           KYPICK
416bACSR                   KFLD           KYPRTY
416bACSR                   KFLD           KYEXPD
416bAC*
416bACSR         SLKY3B    KLIST
416bACSR                   KFLD           $WHSE
416bACSR                   KFLD           $ITEM
416bACSR                   KFLD           KEYSTA
416bACSR                   KFLD           KYPICK
500 AC*
500aDC*  Define key for SLOTOUT file.
500aDC*
500aDC*          KEYSO     KLIST
500aDC*                    KFLD           $WHSE
500aDC*                    KFLD           ITWHDP
500aDC*                    KFLD           $HOME
500aDC*                    KFLD           $ITEM
     C*
410 ACSR         *LIKE     DEFN USEMP#    W1EMP#
410 ACSR         *LIKE     DEFN USSTYP    W1STYP
410 ACSR         *LIKE     DEFN USSHFT    W1SHFT
410 ACSR         *LIKE     DEFN USCREW    W1CREW
410 ACSR         USKEY     KLIST
410 ACSR                   KFLD           #USER
410 AC*
410 ACSR         USKEY     CHAINPIRUSER              79
410 ACSR         *IN79     IFEQ *OFF
410 ACSR                   Z-ADDUSEMP#    W1EMP#
410 ACSR                   MOVE USSTYP    W1STYP
410 ACSR                   MOVE USSHFT    W1SHFT
410 ACSR                   MOVE USCREW    W1CREW
410 ACSR                   ELSE
410 ACSR                   Z-ADD0         W1EMP#
410 ACSR                   MOVE *BLANKS   W1STYP
410 ACSR                   MOVE *BLANKS   W1SHFT
410 ACSR                   MOVE *BLANKS   W1CREW
410 ACSR                   ENDIF
     C*
410 ACSR         TKKEY     KLIST
410 ACSR                   KFLD           T#TASK  6
416bAC*
416bAC*  Define key for OPTIONS file.
416bAC*
416bACSR         *LIKE     DEFN OPCODE    KYCODE
416bACSR         OPKEY     KLIST
416bACSR                   KFLD           $WHSE
416bACSR                   KFLD           KYCODE
416aAC*
416aAC*  Define key for PIRTRAN1 file.
416aAC*
416aACSR         *LIKE     DEFN PTSTAT    KYSTAT
416aACSR         PTKEY1    KLIST
416aACSR                   KFLD           W1EMP#
416aACSR                   KFLD           KYSTAT
410 AC*
410 AC*  Define key for PIRTRAN2 file.
410 AC*
410 ACSR         *LIKE     DEFN PTSDTE    STDATE
410 ACSR         *LIKE     DEFN PTSTIM    STTIME
410 ACSR         PTKE22    KLIST
410 ACSR                   KFLD           W1EMP#
410 ACSR                   KFLD           STDATE
410 ACSR                   KFLD           STTIME
     C*
     C*  Define partial key for PIRTRAN2 file.
     C*
410 ACSR         PTKEY2    KLIST
410 ACSR                   KFLD           W1EMP#
410 ACSR                   KFLD           STDATE
     C*
     C*  Define key for PIRTRAN file.
     C*
410 ACSR         *LIKE     DEFN PTTRN#    WOTRN#
410 ACSR         PTKEY     KLIST
410 ACSR                   KFLD           WOTRN#
     C*
     C*  Define key for LABEL file.
     C*
410 ACSR         LBKEY     KLIST
410 ACSR                   KFLD           $LBL#
     C*
     C*  Setup option and command display lines.
     C*
     CSR                   MOVE OPTLN,1   OPTLN1 75
     CSR                   MOVE CMDLN,1   CMDLN1
     C*
     C*  Convert today's date into century format.
     C*
416bAC*  Moved date retrieve code into ZZINZ2 to be done every time
416bAC*  program is called.
416bDC*R                   MOVE '*CURCMD '$CVCMD
416bDC*R                   CALL @CVTDT
416bDC*R                   PARM           $CVTDT
416bDC*R                   Z-ADD$CVD8O    TODAY   80
416iAC*
416iAC*  Dummy read for compiler.
416iAC*
416iACSR         0         IFEQ 1
416iACSR                   READ SLTRPEX                  79
416iACSR                   ENDIF
     C*
     CSR                   MOVE #PROG     $PPRG
     CSR                   MOVE #PROG     $CVPRG
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZINZ2   Initailization for each time program is called.
     C*
     CSR         ZZINZ2    BEGSR
417eACSR                   MOVE $ITEM     KYITEM
416jAC*
416jAC*    Capture date/time user entered program to be used
416jAC*    for starting transaction. This will more accurately
416jAC*    reflect when the process started.
416jACSR                   MOVE '*CURCMD '$CVCMD
416jACSR                   EXSR ZZCVDT
416jACSR                   Z-ADD$CVD8O    TRNDTE  80
416jACSR                   TIME           TRNTIM  60
417bAC*
417bAC*   Get screen size being used.
417bAC*
417bACSR                   CALL 'PIRRFSCR'
417bACSR                   PARM '*GET'    #LCMD   8
417bACSR                   PARM           #LLINE  2
417bACSR                   PARM           #LCOL   3
416bAC*
416bAC*   Get replenishment options from file.
416bAC*
416bACSR                   MOVE '*REPLEN 'KYCODE
416bACSR         OPKEY     CHAINOPTIONS              79
416bACSR         *IN79     IFEQ *ON
416bACSR                   MOVE '3'       OPRPEX
416bACSR                   MOVE '3'       OPRPFI
417aACSR                   MOVE 'N'       OPLMTS
417aACSR                   MOVE 'N'       OPLMTS
416bACSR                   ENDIF
416bAC*
416bACSR                   MOVE '*NO '    DSPWIN  4
417aACSR                   MOVE *OFF      OFFLAG
417cACSR                   MOVE '*NO '    LOTTRK
417cACSR                   MOVE '*NO '    LICTRK
     C*
     C*   Get item description.
     C*
     CSR                   MOVE *BLANKS   W1ITEM
417dACSR                   MOVE *OFF      *IN64
417dACSR                   MOVE *BLANKS   SCANHD
417dACSR                   MOVE *ZEROS    RPLQTY
     CSR         $ITEM     CAT  '-':1     W1ITEM
     CSR         ITKEY     CHAINPIRITEM              79
     CSR                   SELEC
     CSR         *IN79     WHEQ '0'
417dAC*
417dAC*    Breakdown item. Load base item into display.
417dACSR                   MOVE ITTYPE    RLTYPE
417dACSR         ITTYPE    IFEQ 'B'
417dACSR                   MOVE 'Brkdwn'  SCANHD
417dACSR                   MOVE *ON       *IN64
417dACSR         ITKEY     CHAINITEMLNK              79
417dACSR         ILKEY     CHAINPIRITEM              79
417dACSR                   MOVE ILITM2    KYITEM
417dACSR                   MOVELILITM2    W1ITEM    P
417dACSR                   Z-ADDITUMQ2    RPLQTY
417dACSR                   ENDIF
417dAC*
     CSR         W1ITEM    CAT  ITDESC:1  W1ITEM
417cAC*
417cAC*    Retrieve Lot/license plate tracking info.
417cACSR                   MOVE *BLANKS   $LCMD
417cACSR                   MOVE #PROG     $LPRG
417cACSR                   MOVE $WHSE     $LWHSE
417cACSR                   MOVE $ITEM     $LITEM
417cACSR                   CALL 'GETLLP'
417cACSR                   PARM           $LPARM
417cAC*
417cACSR                   SELEC
417cAC*    Lot/license plate tracking values found.
417cACSR         $LRTN     WHEQ '*OK     '
417cACSR         $LLOT     IFEQ 'Y'
417cACSR                   MOVE '*YES'    LOTTRK
417cACSR                   ELSE
417cACSR                   MOVE '*NO '    LOTTRK
417cACSR                   ENDIF
417cACSR         $LLTRK    IFEQ 'Y'
417cACSR                   MOVE '*YES'    LICTRK
417cACSR                   ELSE
417cACSR                   MOVE '*NO '    LICTRK
417cACSR                   ENDIF
417cACSR                   ENDSL
     C*
411 DC*R                   MOVE *BLANKS   WOWHSE
    DC*R         $WHSE     CHAINWAREHS               79
    DC*R         *IN79     IFEQ *OFF
213 DC*R                   MOVE *BLANKS   $CSTR
    DC*R                   MOVE WHCODE    $CSTR
    DC*R                   CALL 'ADJUST'
    DC*R                   PARM '*LEFT   '$CCMD   8
    DC*R                   PARM           $CSTR  30
    DC*R                   MOVEL$CSTR     WOWHSE
    DC*R         WOWHSE    CAT  '-':1     WOWHSE
    DC*R         WOWHSE    CAT  WHDESC:1  WOWHSE
    DC*R                   ENDIF
     C*
    DC*R         WDKEY     CHAINWHDEPT               79
    DC*R         *IN79     IFEQ *ON
    DC*R                   MOVE *BLANKS   WDCODE
    DC*R                   MOVE *BLANKS   WDDESC
    DC*R                   ENDIF
     C*
    DC*R         ITDESG    CHAINDESIG                79
    DC*R         *IN79     IFEQ *ON
    DC*R                   MOVE *BLANKS   DSCODE
    DC*R                   MOVE *BLANKS   DSDESC
    DC*R                   ENDIF
     C*
     CSR                   ENDSL
     C*
416bACSR                   MOVE '*CURCMD '$CVCMD
416bACSR                   EXSR ZZCVDT
416bACSR                   Z-ADD$CVD8O    TODAY   80
416bAC*
     C**                   MOVE $PRTKY    DSKEY
     CSR                   EXSR CLRSCH
     CSR                   EXSR SCR01I
     CSR                   ENDSR
416bAC*----------------------------------------------------------------
416bAC*
416bAC*  ZZCKRT  Check if replenishment is pulled in FIFO order.
416bAC*
416bACSR         ZZCKRT    BEGSR
416bAC*
416bACSR                   MOVE '*NO '    DSPWIN
416bAC*
416bACSR         RTVSLT    IFEQ '*NO '
416bACSR         SLFIKY    CHAINSLOT2               N79
416bACSR                   ENDIF
416bACSR                   SELEC
416bAC*    Slot not found.
416bACSR         *IN79     WHEQ *ON
416bACSR                   MOVE *ON       ERROR
416bAC*
416bAC*    Slot found.
416bACSR         *IN79     WHEQ *OFF
416bAC*
416bACSR                   MOVE 'N'       KYPICK
416bACSR                   MOVE SLSTAT    KEYSTA
416bACSR                   Z-ADDSLEXPD    KYEXPD
416bACSR                   Z-ADDSLPRTY    KYPRTY
416bAC*
416bACSR                   Z-ADDSLEXPD    CKEXPD
416bAC*
416bACSR         SLKY3A    SETLLSLOT3
416bACSR         SLKY3B    REDPESLOT3                    79
416bACSR                   SELEC
416bAC*    No other slots found - slot ok for replenishment.
416bACSR         *IN79     WHEQ *ON
416bACSR                   MOVE *ZEROS    SLSTK1
416bACSR                   MOVE *ZEROS    SLSTK2
416bACSR                   MOVE *ZEROS    SLSTK3
416bACSR                   MOVE *ZEROS    SLEXPD
416bAC*
416bAC*    Older product found, not expired. Display warning.
416bACSR         SLSTAT    WHEQ 'A '
416bACSR         SLEXPD    ANDLTCKEXPD
416bACSR         SLEXPD    ANDGT*ZEROS
416bACSR         SLEXPD    ANDGETSTDTE
416bACSR                   MOVE '*YES'    DSPWIN
416bACSR                   ENDSL
416bAC*
416bACSR                   ENDSL
416bAC*
416bAC*    Retrieve slot to refresh info on slot selected for replen.
416bACSR         SLFIKY    CHAINSLOT2               N79
416bAC*
416bACSR                   ENDSR
416bAC*----------------------------------------------------------------
416bAC*
416bAC*  ZZCVDT  Convert date to proper format.
416bAC*
416bACSR         ZZCVDT    BEGSR
416bAC*
416bAC*    Convert date into proper format.
416bAC*
416bACSR                   CALL @CVTDT
416bACSR                   PARM           $CVTDT
416bAC*
416bACSR         ENDCVD    ENDSR
416bAC*----------------------------------------------------------------
416bAC*
416bAC*  ZZEXCP Write item exception record to file.
416bAC*
416bACSR         ZZEXCP    BEGSR
416bAC*
416bAC*    Write an item exception record.
416bACSR                   Z-ADD$WHSE     EXWHSE
416fDC*R                   MOVE $PWHDP    EXWHDP
416fMCSR                   MOVE SLWHDP    EXWHDP
416bACSR                   MOVE SLSTYP    EXSTYP
416bACSR                   MOVE $ITEM     EXITEM
416bACSR                   MOVE SLDISP    EXFDIS
416bACSR                   MOVE $HOME     EXTDIS
416bACSR                   Z-ADDSLSTK1    EXQTY
416bACSR                   MOVE 'REPL  '  EXTASK
416bAC*    Get todays date.
416bACSR                   MOVE '*CURCMD '$CVCMD
416bACSR                   EXSR ZZCVDT
416bACSR                   Z-ADD$CVD8O    EXGDTE
416bACSR                   TIME           EXGTIM
416bACSR                   MOVE #USER     EXGBY
416bACSR                   MOVE '1 '      EXESTA
416bACSR         EXKEY     SETLLITMEXCP                  79
416bAC*
416bAC*    Loop to generate unique timestamp for item exception.
416bACSR         *IN79     DOWEQ*ON
416bACSR                   ADD  1         EXGTIM
416bACSR         EXKEY     SETLLITMEXCP                  79
416bACSR                   ENDDO
416bAC*
416bACSR                   WRITEEXREC
416bAC*
416bACSR         ENDEXC    ENDSR
416iAC*----------------------------------------------------------------
416iAC*
416iAC*  ZZEXSL Write slot exception record to file.
416iAC*
416iACSR         ZZEXSL    BEGSR
416iAC*
416iAC*    Write a slot exception record. This will prevent slot
416iAC*    from being selected for another letdown transaction.
416iAC*
416iACSR                   Z-ADD$WHSE     SXWHSE
416iACSR                   MOVE SLWHDP    SXWHDP
416iACSR                   MOVE SLDISP    SXDISP
416iACSR                   MOVE $ITEM     SXITEM
416iAC*    Get todays date.
416iACSR                   MOVE '*CURCMD '$CVCMD
416iACSR                   EXSR ZZCVDT
416iACSR                   Z-ADD$CVD8O    SXADTE
416iACSR                   TIME           SXATIM
416iACSR                   MOVE #USER     SXABY
416iACSR                   WRITESEREC                  76
416iAC*
416iACSR         ENDSE     ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZKEYF   Create key for file being used
     C*
     CSR         ZZKEYF    BEGSR
     CSR                   MOVE DSFKEY    $POFKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZKEYI   Initialize keys for files being used.
     C*           Note: You must clear individual field when using
     C*                 partial keys or one of the fields is numeric.
     C*
     CSR         ZZKEYI    BEGSR
     C*
     C*   Initialize file key (DSFKEY)
     C*
     CSR                   CLEARSLWHSE
     CSR                   CLEARSLITEM
     CSR                   CLEARSLSTAT
     CSR                   CLEARSLPICK
     CSR                   CLEARSLPRTY
     CSR                   CLEARSLEXPD
     CSR                   CLEARSLENTD
     CSR                   CLEARSLWHDP
     CSR                   CLEARSLSTYP
     CSR                   CLEARSLAISL
     CSR                   CLEARSLPSEQ
     CSR                   CLEARSLRLVL
     CSR                   CLEARSLHAND
     C*
     C*   Initialize unique key (DSUKEY)
     C*
     CSR                   CLEARUKWHDP
     CSR                   CLEARUKDISP
     CSR                   CLEARUKITEM
     C*
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZKEYU   Create unique key for file
     C*             (to be used in delete and change programs)
     C*
     CSR         ZZKEYU    BEGSR
     CSR                   Z-ADDSLWHSE    UKWHSE
     CSR                   MOVE SLWHDP    UKWHDP
     CSR                   MOVE SLDISP    UKDISP
     CSR                   MOVE SLITEM    UKITEM
     CSR                   MOVE DSUKEY    $POUKY
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZOPT    Process non-standard options.
     C*              Note: Error handling is done in routine OPTNS2.
     C*
     CSR         ZZOPT     BEGSR
     CSR                   ENDSR
500 AC*----------------------------------------------------------------
500 AC*
500 AC*  ZZOUT    User flagged item as having no overflow product to
500 AC*           replenish into pick slot.
500 AC*
500 AC           ZZOUT     BEGSR
500 AC*
500aAC*    Logic for SLOTOUT file moved to RU380.
500aDC*          KEYSO     CHAINSLOTOUT              79
500aDC*          *IN79     IFEQ *ON
500aDC*                    CLEARSOREC
500aDC*
500aDC*                    Z-ADD$WHSE     SOWHSE
500aDC*                    MOVE ITWHDP    SOWHDP
500aDC*                    MOVE $HOME     SODISP
500aDC*                    MOVE $ITEM     SOITEM
500aDC*
500aDC* Update the datestamp field with the current time.
500aDC*                    CALL 'GETTS'
500aDC*                    PARM           SOADTS
500aDC*                    MOVE #USER     SOABY
500aDC*
500aDC*                    WRITESOREC                  78
500aDC*
500aDC*                    ELSE
500aDC*                    UNLCKSLOTOUT
500aDC*
500aDC*                    ENDIF
500 AC*
500 AC*    Change status of all Open Runner Flag entries to U=Out.
500 AC                     MOVE '*CHG2OUT'$LCMD
500 AC                     MOVE #PROG     $LPRG
500 AC                     MOVE $WHSE     $LWHSE
500 AC                     MOVE ITWHDP    $LWHDP
500 AC                     MOVE $HOME     $LDISP
500aAC                     MOVE $ITEM     $LITM2
500aDC*                    MOVE 'C'       $LNWST
500 AC*
500 AC                     CALL 'RU380'
500 AC                     PARM           $LPARM
500 AC*
500 AC                     MOVELDESC,6    ERRMSG    P
500 AC                     EXSR ZM0105
500 AC*
500 AC           ENDOUT    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZPOS    Position to a different record.
     C*
     CSR         ZZPOS     BEGSR
     C*
     C*  See if user is trying to position to a certain spot
     C*
     C*R         PTINP1    IFNE 0
     C*R                   Z-ADDPTINP1    ODDLIN
     C*R                   Z-ADD0         PTINP1
     C*R                   MOVE *ON       REPOS
     C*R                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZPOS2   Position to record
     C*
     CSR         ZZPOS2    BEGSR
     C*
     C*    Code to use when we are not using a partial key.
     C*
     C*R         $POCMD    IFEQ '*TOP'
     C*R         *LOVAL    SETLLRECORD
     C*R                   ELSE
     C*R         $POCMD    IFEQ '*BOTTOM'
     C*R         *HIVAL    SETLLRECORD
     C*R                   END
     C*R                   END
     C*
     C*    Code to use when we do have a partial key to use.
     C*
     CSR         $POCMD    IFEQ '*TOP'
     CSR         PARTKY    SETLLRECORD
     CSR                   ELSE
     CSR         $POCMD    IFEQ '*BOTTOM'
     CSR         PARTKY    SETGTRECORD
     CSR                   END
     CSR                   END
     CSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZABRT   Abort a transaction
     C*
410 ACSR         ZZABRT    BEGSR
     CSR                   MOVE 'REPL  '  @PTASK
     CSR         ITCUBE    MULT TOPICK    @PCUBE
     CSR         ITSWGT    MULT TOPICK    @PSWGT
     CSR                   CALL @ADJTR
     CSR                   PARM '*ABORT  '@PCMD   8
     CSR                   PARM           #JOB
     CSR                   PARM $TRN#     @PTRN#  70
     CSR                   PARM           @PTASK  6
     CSR                   PARM $WHSE     @PWHSE  30
     CSR                   PARM ITWHDP    @PWHDP  5
     CSR                   PARM ITSTYP    @PSTYP  1
     CSR                   PARM           @PCUBE  93
     CSR                   PARM           @PSWGT  92
     CSR                   PARM TOPICK    @PPCS   50
     CSR                   PARM 0         @PAISL  50
     CSR                   PARM 0         @PQTY1  50
     CSR                   PARM 0         @PQTY2  50
     CSR                   PARM 0         @PQTY3  50
     CSR                   PARM '0'       @PRTE   5
     CSR                   PARM ' '       @PPO    9
     CSR                   PARM 'L'       @PGRP1  1
     CSR                   PARM ' '       @PGRP2  1
     CSR                   PARM ' '       @PRTN   8
     CSR                   PARM ' '       @PMSG   4
     C*
     C*  Update slot qty (Decrease TFR qty)
     CSR         SLFKEY    CHAINSLOT2                79
     CSR                   SUB  TOPICK    SLTFR1
     CSR                   UPDATRECORDU
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $DISP     S$DISP
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-SUBTOPICK    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   MOVEL'%TFROUT' DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C*  Update slot qty (Decrease RCV qty)
     CSR         SLTKEY    CHAINSLOT2                79
     CSR                   SUB  TOPICK    SLRCV1
     CSR                   UPDATRECORDU
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $HOME     S$DISP
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-SUBTOPICK    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   MOVEL'%TFRIN'  DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C*  Delete label record.
     CSR         LBKEY     CHAINLABEL                79
     CSR         *IN79     IFEQ *OFF
     CSR                   DELETLBREC
     CSR                   ENDIF
410 AC*    Start an 'IDLE' task.
410 ACSR                   EXSR ZZIDLE
410 ACSR         ENDABR    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZCKU2   Check for overlapping task and update the current
     C*           task just ended, by adjusting the time.
     C*
410 ACSR         ZZCKU2    BEGSR
     CSR         *LIKE     DEFN PTTRN#    SVTRN#
     CSR         *LIKE     DEFN PTDMIN    SVTLEN
     CSR                   Z-ADD0         SVTLEN
     CSR         PTKEY2    SETLLPIRTRAN2
     CSR         FOREVR    DOWEQFOREVR
     CSR                   READ PIRTRAN2                 79
     CSR         *IN79     IFEQ *ON
     CSR         PTSDTE    ORLT ZZSDTE
     CSR                   LEAVE
     CSR                   ENDIF
     C*   Skip the task that just ended.
     CSR         *IN79     IFEQ *OFF
     CSR         PTTRN#    ANDEQSVTRN#
     CSR                   ITER
     CSR                   ENDIF
     C*
     C*   Skip 'IDLE' task
     C*
413 ACSR         PTTASK    IFEQ 'IDLE'
413 ACSR                   ITER
413 ACSR                   ENDIF
413 AC*
413 ACSR                   MOVE PTTASK    T#TASK
413 ACSR         TKKEY     CHAINTASK                 79
413 ACSR         *IN79     IFEQ *ON
413 ACSR                   MOVE ' '       TKTYPE
413 ACSR                   ENDIF
     C*
     C*   Accumulate overlapping minutes.(Same start and end date)
     C*                  Start     Start       End      End    Overlap
     C*           Task    date      time       time     date   Minutes
     C*Auto  (ZZ) CLEAN 1/25/96  10:00:23   11:30:35  1/25/96
     C*Manual(PT) BREAK 1/25/96  10:30:00   10:45:00  1/25/96   (15)
     C*
     C*   Auto    CLEAN 1/25/96  14:50:23    9:30:23  1/26/96
     C*   Manual  BREAK 1/25/96  23:30:00    1:30:00  1/26/96   (120)
     C*
     CSR         *IN79     IFEQ *OFF
     CSR         PTSDTE    ANDEQZZSDTE
     CSR         PTEDTE    ANDEQZZEDTE
     CSR         PTSTIM    ANDGEZZSTIM
     CSR         PTETIM    ANDLEZZETIM
413 ACSR         TKTYPE    ANDEQ'I'
410 DC*R         PTETYP    ANDEQ'M'
     CSR                   Z-ADDPTSTIM    STRTIM
     CSR                   Z-ADDPTETIM    FINTIM
     CSR                   EXSR ZZTIME
     CSR                   ADD  TIMLEN    SVTLEN
     CSR                   ENDIF
     C*   Accumulate overlapping minutes(Diff start date/same end date)
     C*                                  (Past midnight)
     C*                  Start     Start       End      End    Overlap
     C*           Task    date      time       time     date   Minutes
     C*Auto  (ZZ) CLEAN 1/25/96  14:50:23    9:30:23  1/26/96
     C*Manual(PT) BREAK 1/26/96   8:00:00    8:30:00  1/26/96   (30)
     C*
     CSR         *IN79     IFEQ *OFF
     CSR         PTSDTE    ANDGTZZSDTE
     CSR         PTEDTE    ANDEQZZEDTE
     CSR         PTETIM    ANDLEZZETIM
413 ACSR         TKTYPE    ANDEQ'I'
410 DC*R         PTETYP    ANDEQ'M'
     CSR                   Z-ADDPTSTIM    STRTIM
     CSR                   Z-ADDPTETIM    FINTIM
     CSR                   EXSR ZZTIME
     CSR                   ADD  TIMLEN    SVTLEN
     CSR                   ENDIF
     C*   Accumulate overlapping minutes.(Same start date/diff end date)
     C*                  Start     Start       End      End    Overlap
     C*           Task    date      time       time     date   Minutes
     C*Auto  (ZZ) CLEAN 1/25/96  14:50:23    9:30:23  1/26/96
     C*Manual(PT) BREAK 1/25/96  16:00:00   16:30:00  1/25/96   (30)
     C*
     CSR         *IN79     IFEQ *OFF
     CSR         PTSDTE    ANDEQZZSDTE
     CSR         PTEDTE    ANDLTZZEDTE
     CSR         PTSTIM    ANDGEZZSTIM
413 ACSR         TKTYPE    ANDEQ'I'
410 DC*R         PTETYP    ANDEQ'M'
     CSR                   Z-ADDPTSTIM    STRTIM
     CSR                   Z-ADDPTETIM    FINTIM
     CSR                   EXSR ZZTIME
     CSR                   ADD  TIMLEN    SVTLEN
     CSR                   ENDIF
     CSR                   ENDDO
     C*
     C*   Update the task that just ended.
     C*
     CSR         SVTRN#    CHAINPIRTRAN              79
     CSR         *IN79     IFEQ *OFF
     CSR         PTDMIN    IFGT 0
     CSR         PTDMIN    SUB  SVTLEN    PTDMIN
     CSR                   ELSE
     CSR         PTIMIN    SUB  SVTLEN    PTIMIN
     CSR                   ENDIF
     CSR                   UPDATPTREC
     CSR                   ENDIF
410 ACSR         ENDCU2    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZEND  End current task.
     C*
410 ACSR         ZZEND     BEGSR
410 AC*  No current task to end.
410 ACSR         CURTRN    CABEQ0         ENDEND
410 AC*  End current task
410 ACSR                   Z-ADDCURTRN    WOTRN#
410 ACSR         PTKEY     CHAINPIRTRAN              79
410 ACSR         *IN79     IFEQ *OFF
417 AC*
417 AC*    Indirect task started after Direct task. Use
417 AC*    current time to end task. Otherwise, use time
417 AC*    when we entered this program.
417 ACSR         CURTYP    IFEQ 'I'
417 ACSR                   MOVE '*END    '@PCMD
417 ACSR                   ELSE
416jACSR                   Z-ADDTRNDTE    PTEDTE
416jACSR                   Z-ADDTRNTIM    PTETIM
417 ACSR                   MOVE '*END2   '@PCMD
417 ACSR                   ENDIF
417 AC*
410 ACSR         CURTYP    IFEQ 'D'
410 ACSR         CURTSK    ANDNE'IDLE  '
410 ACSR                   MOVE '3'       PTSTAT
410 ACSR                   ELSE
410 ACSR                   MOVE '4'       PTSTAT
410 ACSR                   ENDIF
410 ACSR                   MOVE 'N'       PTETYP
410 ACSR                   ENDIF
410 AC*
410 ACSR                   CALL @ADJTD
416jDC**                   PARM '*END    '@PCMD   8
417 DC*                    PARM '*END2   '@PCMD   8
417 MCSR                   PARM           @PCMD   8
410 ACSR                   PARM '*INTER  '@PTYPE  8
410 ACSR                   PARM           PTPARM
410 ACSR                   PARM ' '       @PRTN   8
410 ACSR                   PARM ' '       @PMSG   4
410 AC*
410 ACSR                   UPDATPTREC                  79
410 ACSR         *IN79     IFEQ '1'
410 ACSR                   MOVE '1'       ERROR
410 ACSR                   EXSR ZM72
410 ACSR                   GOTO ENDEND
410 ACSR                   ENDIF
     C*
417 AC*
417 AC*    Indirect task started after Direct task. Use
417 AC*    current time to end task. Otherwise, use time
417 AC*    when we entered this program.
417 ACSR         CURTYP    IFEQ 'I'
417 ACSR                   Z-ADDPTEDTE    TRNDTE
417 ACSR                   Z-ADDPTETIM    TRNTIM
417 ACSR                   ENDIF
410 ACSR         CURTYP    IFEQ 'D'
     C*
     C*        There is a posibility that a manual task might have
     C*        been added before the current task was ended. Hence
     C*        adjust the current task just ended, if there is
     C*        any overlapping manual task.
     C*
410 ACSR                   Z-ADDPTTRN#    SVTRN#
     C*  Past overnight. (PTEDTE > PTSDTE)
410 ACSR         PTEDTE    IFGT PTSDTE
410 ACSR                   Z-ADDPTEDTE    STDATE
410 ACSR                   ELSE
410 ACSR                   Z-ADDPTSDTE    STDATE
410 ACSR                   ENDIF
410 ACSR                   Z-ADDPTSDTE    ZZSDTE
410 ACSR                   Z-ADDPTEDTE    ZZEDTE
410 ACSR                   Z-ADDPTSTIM    ZZSTIM
410 ACSR                   Z-ADDPTETIM    ZZETIM
410 ACSR                   EXSR ZZCKU2
410 ACSR                   ENDIF
     C*
410 ACSR         ENDEND    ENDSR
417 AC*
417 AC*----------------------------------------------------------------
417 AC*
417 AC*  ZZENDI  End current Indirect task.
417 AC*
417 ACSR         ZZENDI    BEGSR
417 AC*
417 AC*    Send currect Direct transaction number to ensure that this
417 AC*    transaction doesn't get closed by mistake.
417 ACSR                   Z-ADD$TRN#     @PTRN#
417 AC*
417 ACSR                   CALL @ADJTR
417 ACSR                   PARM '*CLOSEI '@PCMD
417 ACSR                   PARM           #JOB
417 ACSR                   PARM           @PTRN#
417 ACSR                   PARM *BLANKS   @PTASK
417 ACSR                   PARM $WHSE     @PWHSE
417 ACSR                   PARM *BLANKS   @PWHDP
417 ACSR                   PARM *BLANKS   @PSTYP
417 ACSR                   PARM 0         @PCUBE
417 ACSR                   PARM 0         @PSWGT
417 ACSR                   PARM 0         @PPCS
417 ACSR                   PARM 0         @PAISL
417 ACSR                   PARM 0         @PQTY1
417 ACSR                   PARM 0         @PQTY2
417 ACSR                   PARM 0         @PQTY3
417 ACSR                   PARM '0'       @PRTE
417 ACSR                   PARM ' '       @PPO
417 ACSR                   PARM ' '       @PGRP1
417 ACSR                   PARM ' '       @PGRP2
417 ACSR                   PARM ' '       @PRTN
417 ACSR                   PARM ' '       @PMSG
417 AC*
417 ACSR                   ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZIDLE   Create and Start an Idle task.
     C*
410 ACSR         ZZIDLE    BEGSR
410 ACSR                   CALL 'PIRTRN#'
410 ACSR                   PARM           PTTRN#
410 ACSR                   MOVE '2'       PTSTAT
410 ACSR                   MOVEL'IDLE  '  PTTASK
410 ACSR                   MOVEL'IDLE  '  T#TASK
410 ACSR         TKKEY     CHAINTASK                 77
410 ACSR                   MOVE TKCAT     PTCAT
410 ACSR                   MOVE TKSUB     PTSUB
410 ACSR                   SELEC
410 ACSR         TKTLVL    WHEQ 'S'
410 ACSR                   Z-ADD$WHSE     PTWHSE
410 ACSR                   MOVE ITWHDP    PTWHDP
410 ACSR                   MOVE ITSTYP    PTSTYP
410 ACSR         TKTLVL    WHEQ 'D'
410 ACSR                   Z-ADD$WHSE     PTWHSE
410 ACSR                   MOVE ITWHDP    PTWHDP
410 ACSR                   MOVE *BLANKS   PTSTYP
410 ACSR                   OTHER
410 ACSR                   Z-ADD$WHSE     PTWHSE
410 ACSR                   MOVE *BLANKS   PTWHDP
410 ACSR                   MOVE *BLANKS   PTSTYP
410 ACSR                   ENDSL
410 ACSR                   MOVE W1SHFT    PTSHFT
410 ACSR                   MOVE W1CREW    PTCREW
410 ACSR                   Z-ADDW1EMP#    PTEMP#
410 ACSR                   Z-ADD0         PTCUBE
410 ACSR                   Z-ADD0         PTSWGT
410 ACSR                   Z-ADD0         PTPCS
410 ACSR                   Z-ADD0         PTAISL
410 ACSR                   Z-ADD0         PTQTY1
410 ACSR                   Z-ADD0         PTQTY2
410 ACSR                   Z-ADD0         PTQTY3
410 ACSR                   MOVE '*CURCMD '$CVCMD
410 ACSR                   CALL @CVTDT
410 ACSR                   PARM           $CVTDT
410 ACSR                   Z-ADD$CVD8O    PTGDTE
410 ACSR                   TIME           PTGTIM
500cDC**                   Z-ADD$CVD8O    PTSDTE
500cDC**                   TIME           PTSTIM
500cMCSR                   Z-ADD$RENDD    PTSDTE
500cMCSR                   Z-ADD$RENDT    PTSTIM
410 ACSR                   Z-ADD0         PTEDTE
410 ACSR                   Z-ADD0         PTETIM
410 ACSR                   MOVE *BLANKS   PTETYP
410 ACSR                   Z-ADD0         PTCDTE
410 ACSR                   Z-ADD0         PTCTIM
410 ACSR                   Z-ADD0         PTDMIN
410 ACSR                   Z-ADD0         PTIMIN
410 ACSR                   MOVE *BLANKS   PTRTPO
410 ACSR                   WRITEPTREC                  79
410 ACSR         *IN79     IFEQ '1'
410 ACSR                   MOVE '1'       ERROR
410 ACSR                   EXSR ZM71
410 ACSR                   GOTO ENDIDL
410 ACSR                   ENDIF
     C*
410 ACSR         ENDIDL    ENDSR
417cAC*
417cAC*----------------------------------------------------------------
417cAC*
417cAC*  ZZLLP    Prompt user to scan Lot/License plate tracking info.
417cAC*
417cACSR         ZZLLP     BEGSR
417cACSR                   SELEC
417cAC*    Scan license plate.
417cACSR         LICTRK    WHEQ '*YES'
417cACSR                   MOVELLLP01     WWTXT
417cAC*    Scan lot number.
417cACSR         LOTTRK    WHEQ '*YES'
417cACSR                   MOVELLLP02     WWTXT
417cACSR                   ENDSL
417cAC*
417cAC*    Display window to capture lot/license plate info.
417cAC*
417cACSR         FOREVR    DOWEQFOREVR
417cACSR                   EXFMTWDWLLP
417cACSR                   SELEC
417cAC*    F3/F12 selected - Cancel selection.
417cACSR         *INKC     WHEQ *ON
417cACSR         *INKL     OREQ *ON
417cACSR                   MOVE *BLANKS   W1DISP
417cACSR                   MOVE *ON       CANCEL
417cACSR                   LEAVE
417cAC*
417cAC*    User did not scan in lot/license plate info.
417cACSR         WWLLP#    WHEQ *BLANKS
417cACSR                   ITER
417cAC*
417cAC*    User scanned in necessary info.
417cACSR                   OTHER
417cAC*
417cAC*     Code to log lot/license info goes here.
417cAC*
417cACSR                   LEAVE
417cAC*
417cACSR                   ENDSL
417cACSR                   ENDDO
417cAC*
417cACSR         ENDLLP    ENDSR
417cAC*
414bAC*----------------------------------------------------------------
414bAC*
414bAC*  ZZSLCT   Select a slot for replenishment.
414bAC*
414bACSR         ZZSLCT    BEGSR
414bAC*
414bDC*R                   MOVELSLDISP    W1DISP
414eMCSR                   MOVELUKDISP    W1DISP
414bACSR                   EXSR ZZCHK1
414bACSR         ERROR     CABEQ*ON       ENDSLC
417cACSR         CANCEL    CABEQ*ON       ENDSLC
414bAC*
414bACSR                   MOVELSLDISP    $DISP
414eDC*R                   MOVE DSUKEY    $PUKY
414bAC*
414bAC*   Get current task.
414bAC*
500bACSR                   Z-ADD0         CURTRN
500bACSR                   MOVE *BLANKS   CURTSK
500bACSR                   MOVE *BLANKS   CURTYP
500bACSR                   MOVE *OFF      CURENT
414bACSR                   EXSR ZZTASK
414bACSR                   SELEC
414bACSR         CURTYP    WHEQ 'D'
414bAC*   End current task.
414bACSR                   EXSR ZZEND
414bACSR         CURTYP    WHEQ 'I'
414bAC*  End current task and any previous open tasks.
414bACSR                   MOVE *ON       FOUND   1
414bACSR         FOUND     DOWEQ*ON
414bACSR                   MOVE *BLANKS   CURTSK
414bACSR                   MOVE *BLANKS   CURTYP
414bACSR                   MOVE *OFF      CURENT
414bACSR                   EXSR ZZTASK
414bACSR         FOUND     IFEQ *OFF
414bACSR                   LEAVE
414bACSR                   ENDIF
414bACSR                   EXSR ZZEND
414bACSR                   ENDDO
414bACSR                   ENDSL
414bAC*
414bACSR                   EXSR ZZSTRT
414bACSR                   MOVEL'*OK     '$RTNCD
414bAC*
414bAC*    If this program was called from LT105, then force pgm end,
414bAC*    otherwise allow pgm to continue.
414bAC*
414bACSR         $PRG      IFEQ 'LT105   '
414bACSR                   MOVE 'EOJ'     NXTSCR
414bAC*
414bACSR                   ELSE
414bACSR                   MOVE '03 '     NXTSCR
414bACSR                   EXSR SCR03I
414aACSR                   ENDIF
414aAC*
414bACSR         ENDSLC    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZSTRT   Start a new transaction
     C*
     CSR         ZZSTRT    BEGSR
     C*
     C*  Get stock quantity in pick slot.
     C*
     C                     CALL 'SLOTQTY'
     C                     PARM           SLSTK1
     C                     PARM           SLSTK2
     C                     PARM           SLSTK3
     C*
     C                     PARM           SLALC1
     C                     PARM           SLALC2
     C                     PARM           SLALC3
     C*
     C                     PARM           SLTFR1
     C                     PARM           SLTFR2
     C                     PARM           SLTFR3
     C*
     C                     PARM           SLPCK1
     C                     PARM           SLPCK2
     C                     PARM           SLPCK3
     C*
     C                     PARM           SLRCV1
     C                     PARM           SLRCV2
     C                     PARM           SLRCV3
     C*
     C                     PARM           STOCK1  50
     C                     PARM           STOCK2  30
     C                     PARM           STOCK3  30
     C*
     C                     PARM           AVAIL1  50
     C                     PARM           AVAIL2  30
     C                     PARM           AVAIL3  30
     C*
     CSR                   Z-ADDAVAIL1    TOPICK  50
     C*
     C*     - Get new batch number.
     C*
     CSR                   CALL 'PIRBAT#'
     CSR                   PARM           BATCH#  70
     CSR                   Z-ADDBATCH#    $BAT#
     C*
     C*     - Create batch control record.
     C*
     CSR                   Z-ADDBATCH#    BTBAT#
     CSR                   Z-ADDSLWHSE    BTWHSE
     CSR                   MOVE '*REPLEN 'BTTYPE
     CSR                   MOVE *BLANKS   BTSTAT
     CSR                   MOVE *BLANKS   BTRTE
     CSR                   Z-ADDTODAY     BTSTRD
     CSR                   TIME           BTSTRT
     CSR                   MOVE #USER     BTSTRB
     CSR                   WRITEBTREC
     C*     - Get new transaction number.
     CSR                   CALL 'PIRTRN#'
     CSR                   PARM           XXTRN#  70
     CSR                   Z-ADDXXTRN#    $TRN#
     C*
417dAC           RLTYPE    IFEQ 'B'
417dAC                     MOVE 'REPLBK'  @PTASK
417dAC                     ELSE
     C                     MOVE 'REPL  '  @PTASK
417dAC                     ENDIF
417dAC*
417dAC*    Convert cube & weight to breakdown unit.
417dAC           RLTYPE    IFEQ 'B'
417dAC           RPLQTY    ANDGT0
417dAC           ITCUBE    DIV  RPLQTY    EACUBE
417dAC           ITSWGT    DIV  RPLQTY    EASWGT
417dAC                     ENDIF
417dAC*
     C           ITCUBE    MULT TOPICK    @PCUBE
     C           ITSWGT    MULT TOPICK    @PSWGT
416jDC**                   CALL @ADDTR
416jMC                     CALL @ADDT2
     C                     PARM '*CRTSTRT'@PCMD   8
     C                     PARM           #JOB
     C                     PARM $TRN#     @PTRN#  70
     C                     PARM           @PTASK  6
     C                     PARM SLWHSE    @PWHSE  30
     C                     PARM SLWHDP    @PWHDP  5
     C                     PARM SLSTYP    @PSTYP  1
     C                     PARM           @PCUBE  93
     C                     PARM           @PSWGT  92
     C                     PARM TOPICK    @PPCS   50
     C                     PARM 0         @PAISL  50
     C                     PARM 0         @PQTY1  50
     C                     PARM 0         @PQTY2  50
     C                     PARM 0         @PQTY3  50
     C                     PARM '0'       @PRTE   5
     C                     PARM ' '       @PPO    9
     C                     PARM 'L'       @PGRP1  1
     C                     PARM ' '       @PGRP2  1
416jAC                     PARM TRNDTE    @PDATE  80
416jAC                     PARM TRNTIM    @PTIME  60
     C                     PARM ' '       @PRTN   8
     C                     PARM ' '       @PMSG   4
     C*
     C*  Create label record.
     C*
     C                     CLEARLBREC
     C                     Z-ADDSLWHSE    LBWHSE
     C                     MOVE SLWHDP    LBWHDP
     C*
     C*  FROM Slot.
     C*
     C                     MOVE SLAISL    LBAISL
     C*  Update slot qty (Increase TFR qty)  **** Already got in ZZCHK1 ****
     C*          SLFKEY    CHAINSLOT2                79
     C*          *IN79     IFEQ *OFF
408 AC                     Z-ADDSLENTD    FMENTD  80
408 AC                     Z-ADDSLEXPD    FMEXPD  80
     C                     ADD  TOPICK    SLTFR1
     C                     UPDATRECORDU
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $DISP     S$DISP
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-ADDTOPICK    A$QTY1
416gACSR                   ADD  W3RQTY    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   Z-ADD$TRN#     A$TRN#
416gACSR                   MOVE @PTASK    A$TASK
416gACSR                   MOVEL'%TFROUT' DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C*                    ENDIF
     C*
     C                     Z-ADDSLLOC     LBLOC
     C                     Z-ADDSLRLVL    LBRLVL
     C                     MOVE SLHAND    LBHAND
     C                     Z-ADDSLPSEQ    LBPSEQ
     C                     MOVE SLSTYP    LBSTYP
     C           LBSTYP    IFEQ 'P'
     C                     Z-ADD1         LBQRYF
     C                     ELSE
     C                     Z-ADD0         LBQRYF
     C                     ENDIF
     C                     MOVE SLDISP    LBDISP
     C                     Z-ADDAVAIL1    LBQAVL
     C* TO Slot.
     C*  Update slot qty (Increase RCV qty)
     C           SLTKEY    CHAINSLOT2                79
     C           *IN79     IFEQ *OFF
417dAC           RLTYPE    IFEQ 'B'
417dAC           TOPICK    MULT RPLQTY    REPQTY
417dAC                     ADD  REPQTY    SLRCV1
417dAC                     ELSE
     C                     ADD  TOPICK    SLRCV1
417dAC                     ENDIF
415aAC*
415aAC*    If this program was called from LT105, then do not update
415aAC*    Entered and Expiration dates. Calling pgm will do update.
415aAC*
415aACSR         $PRG      IFNE 'LT105   '
408 AC                     Z-ADDFMENTD    SLENTD
408 AC                     Z-ADDFMEXPD    SLEXPD
415aACSR                   ENDIF
415aAC*
     C*                    ENDIF
417dAC*
412 ACSR         SLSTAT    IFEQ 'Z '
412 ACSR         SLSTAT    OREQ 'V '
412 ACSR                   MOVE 'A '      SLSTAT
412 ACSR                   Z-ADDTODAY     SLSDTE
412 ACSR                   TIME           SLSTIM
412 ACSR                   Z-ADD0         SLPRTY
412 ACSR                   ENDIF
     C                     UPDATRECORDU
     C                     ENDIF
416gAC*
416gACSR                   EXSR ZZZISF
416gACSR                   EXSR ZZZS2D
416gACSR                   EXSR ZZZFS2
416gACSR                   Z-ADD$PWHSE    S$WHSE
416gACSR                   MOVE ITWHDP    S$WHDP
416gACSR                   MOVE $HOME     S$DISP
416gACSR         $PRG      IFNE 'LT105   '
416gACSR                   MOVE *ON       SUENTD
416gACSR                   Z-ADDFMENTD    S$ENTD
416gACSR                   MOVE *ON       SUEXPD
416gACSR                   Z-ADDFMEXPD    S$EXPD
416gACSR                   ENDIF
416gACSR                   MOVE ITITEM    A$ITEM
416gACSR                   Z-ADDTOPICK    A$QTY1
416gACSR                   Z-ADD0         A$QTY2
416gACSR                   Z-ADD0         A$QTY3
416gACSR                   Z-ADD$TRN#     A$TRN#
416gACSR                   MOVE @PTASK    A$TASK
416gACSR                   MOVEL'%TFRIN'  DRISUB    P
416gACSR                   MOVEL@NOUPD    DRIRTN
416gACSR                   MOVE *OFF      CK4ERR  1
416gACSR                   MOVE *OFF      DRIZM
416gACSR                   EXSR ZZZCOP
416gAC*
     C                     Z-ADDSLWHSE    LBWHS2
     C                     MOVE SLWHDP    LBWHD2
     C                     MOVE SLAISL    LBASL2
     C*
     C                     Z-ADDSLLOC     LBLOC2
     C                     Z-ADDSLRLVL    LBLVL2
     C                     MOVE SLHAND    LBHND2
     C                     MOVE SLDISP    LBDSP2
     C                     MOVE *BLANKS   LBRTE
     C                     MOVE SLITEM    LBITEM
     C                     Z-ADDBATCH#    LBPBAT
     C                     MOVE 'N'       LBUTYP
     C                     MOVE ITUM1     LBUCOD
     C*
     C*  Quantity remaining field is used to contain break down
     C*  quantity for broken case item.
     C*
417dAC           RLTYPE    IFEQ 'B'
417dAC                     Z-ADDREPQTY    LBQRMN
417dAC                     ELSE
     C                     Z-ADD0         LBQRMN
417dAC                     ENDIF
     C*                    Z-ADDLBQRMN    SVQRMN
     C                     Z-ADDTOPICK    LBQALC
     C                     Z-ADDTOPICK    LBQPCK
417dAC           RLTYPE    IFEQ 'B'
417dAC                     Z-ADDEACUBE    LBUCUB
417dAC                     ELSE
     C                     Z-ADDITCUBE    LBUCUB
417dAC                     ENDIF
     C           LBUCUB    MULT TOPICK    LBCUBE
417dAC           RLTYPE    IFEQ 'B'
417dAC                     Z-ADDEASWGT    LBUWGT
417dAC                     ELSE
     C                     Z-ADDITSWGT    LBUWGT
417dAC                     ENDIF
     C           LBUWGT    MULT TOPICK    LBSWGT
     C*          IDKEY     CHAINITEMDEF              79
     C*                    Z-ADDSAVTIE    LBTIE
     C*                    Z-ADDSAVHGH    LBHIGH
     C                     Z-ADD$TRN#     LBTRN#
     C                     Z-ADD0         LBCTR#
     C*     - Get new label number.
     C                     CALL 'PIRLBL#'
     C                     PARM           LBLBL#
     C                     Z-ADDLBLBL#    $LBL#
     C                     MOVE 'L'       LBGRP1
     C                     MOVE ' '       LBGRP2
     C                     MOVE 'R'       LBTYPE
     C                     MOVE 'P'       LBSTAT
     C                     Z-ADDTODAY     LBSDTE
     C                     TIME           LBSTIM
     C                     Z-ADDTODAY     LBRDTE
     C                     WRITELBREC
417dAC*
417dAC*  Adjust warehouse quantity for broken case item.
417dAC*
417dAC           RLTYPE    IFEQ 'B'
417dAC*
417dAC*  Allocate stock.(Full case item) Qty will be reduced in
417dAC*  close program.
417dAC*
417dAC                     MOVE '*ALLOC  '$ACMD
417dAC                     MOVE #PROG     $APRG
417dAC                     MOVE '*BATCH  '$ATYPE
417dAC                     Z-ADD$WHSE     $AWHSE
417dAC                     MOVE ILITM2    $AITEM
417dAC                     Z-ADDTOPICK    $AQTY1
417dAC                     Z-ADD0         $AQTY2
417dAC                     Z-ADD0         $AQTY3
417dAC                     CALL 'ADJQTY'
417dAC                     PARM           $ACMD   8
417dAC                     PARM           $APRG  10
417dAC                     PARM           $ATYPE  8
417dAC                     PARM           $AWHSE  30
417dAC                     PARM           $AITEM 15
417dAC                     PARM           $AQTY1  70
417dAC                     PARM           $AQTY2  70
417dAC                     PARM           $AQTY3  70
417dAC                     PARM           $ARTQ1  70
417dAC                     PARM           $ARTQ2  70
417dAC                     PARM           $ARTQ3  70
417dAC                     PARM           $ARTN   8
417dAC                     PARM           $AERM
417dAC*
417dAC*  Add stock.(Broken case item)
417dAC*
417dAC                     MOVE '*STOCK  '$ACMD
417dAC                     MOVE #PROG     $APRG
417dAC                     MOVE '*BATCH  '$ATYPE
417dAC                     Z-ADD$WHSE     $AWHSE
417dAC                     MOVE LBITEM    $AITEM
417dDC                     Z-ADDREPQTY    $AQTY1
417dAC                     Z-ADD0         $AQTY2
417dAC                     Z-ADD0         $AQTY3
417dAC                     CALL 'ADJQTY'
417dAC                     PARM           $ACMD   8
417dAC                     PARM           $APRG  10
417dAC                     PARM           $ATYPE  8
417dAC                     PARM           $AWHSE  30
417dAC                     PARM           $AITEM 15
417dAC                     PARM           $AQTY1  70
417dAC                     PARM           $AQTY2  70
417dAC                     PARM           $AQTY3  70
417dAC                     PARM           $ARTQ1  70
417dAC                     PARM           $ARTQ2  70
417dAC                     PARM           $ARTQ3  70
417dAC                     PARM           $ARTN   8
417dAC                     PARM           $AERM
417dAC                     ENDIF
417cAC*
417cAC                     MOVE WWLLP#    $PLLP#
417 AC*
417 AC*    Close any open(Inuse) Indirect tasks.
417 ACSR                   EXSR ZZENDI
     C*
     CSR         ENDSTR    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZTASK  Get current task.
     C*
410 ACSR         ZZTASK    BEGSR
410 ACSR                   Z-ADD*HIVAL    STDATE
410 ACSR                   Z-ADD*HIVAL    STTIME
416aAC*
416aACSR                   MOVE '2'       KYSTAT
416aACSR         PTKEY1    SETLLPIRTRAN1
416aACSR         PTKEY1    READEPIRTRAN1                 79
416aACSR         *IN79     IFEQ *ON
416aACSR                   MOVE *OFF      FOUND
416aACSR                   GOTO ENDTSK
416aACSR                   ENDIF
416aAC*
410 ACSR         PTKE22    SETLLPIRTRAN2
410 ACSR         FOREVR    DOWEQFOREVR
410 ACSR                   READ PIRTRAN2                 79
410 ACSR         *IN79     IFEQ *ON
410 ACSR         PTEMP#    ORNE W1EMP#
410 ACSR                   MOVE *OFF      FOUND   1
410 ACSR                   LEAVE
410 ACSR                   ENDIF
410 ACSR         PTSTAT    IFNE '2'
410 ACSR                   ITER
410 ACSR                   ENDIF
410 AC*   Found an active transaction
410 ACSR                   MOVE *ON       CURENT
410 ACSR                   Z-ADDPTTRN#    CURTRN
410 ACSR                   MOVE PTTASK    T#TASK
410 ACSR         TKKEY     CHAINTASK                 79
410 ACSR         *IN79     IFEQ *OFF
410 ACSR                   MOVE TKCODE    CURTSK
410 ACSR                   MOVE TKTYPE    CURTYP
410 ACSR                   ENDIF
410 ACSR                   LEAVE
410 ACSR                   ENDDO
410 ACSR         ENDTSK    ENDSR
     C*----------------------------------------------------------------
     C*
     C*  ZZTIME   Update for screen 1.
     C*
410 ACSR         ZZTIME    BEGSR
     C*
     C*      Calculate length of time in minutes for output.
     C*
     CSR                   Z-ADDSTRTIM    DSHMS
     C*   Round up minute, if the seconds is >= 30
     CSR         DSSS      IFGE 30
     CSR                   ADD  1         DSMM
     CSR                   ENDIF
     CSR         DSHH      MULT 60        TMPBEG  40
     CSR                   ADD  DSMM      TMPBEG
     C*
     CSR                   Z-ADDFINTIM    DSHMS
     C*   Round up minute, if the seconds is >= 30
     CSR         DSSS      IFGE 30
     CSR                   ADD  1         DSMM
     CSR                   ENDIF
     C*
     C*   If the ending time is < starting time, than
     C*   we have gone past the midnight.
     C*
     CSR         FINTIM    IFLT STRTIM
     CSR                   ADD  24        DSHH
     CSR                   ENDIF
     CSR         DSHH      MULT 60        TMPEND  40
     CSR                   ADD  DSMM      TMPEND
     C*
     CSR         *LIKE     DEFN PTDMIN    TIMLEN
     CSR         TMPEND    SUB  TMPBEG    TIMLEN
     CSR         TIMLEN    IFLT 0
     CSR                   Z-ADD0         TIMLEN
     CSR                   ENDIF
     C*
410 ACSR         ENDTIM    ENDSR
409 AC*----------------------------------------------------------------
409 AC*
409 AC*  ZZVSLT   Check if replenish is from a virtual slot.
409 AC*
409 ACSR         ZZVSLT    BEGSR
409 AC*
409 AC*  Try to find virtual slot for physical slot scanned.
409 AC*
     C                     MOVE *OFF      FVSLOT  1
409 AC           SLKEY     SETLLVSLOT2
409 AC           NXTVS     TAG
     CSR         SLKEY     READEVSLOT2                   78
     CSR         *IN78     CABEQ*ON       ENDVSL
     CSR         SLVKEY    CHAINSLOT2                79
     CSR         *IN79     CABEQ*ON       NXTVS
     CSR         SLITEM    CABNE$ITEM     NXTVS
     CSR                   MOVE *ON       FVSLOT
     CSR                   MOVE SLDISP    W1DISP
409 AC*
409 ACSR         ENDVSL    ENDSR
416bAC*----------------------------------------------------------------
416bAC*
416bAC*  ZZWARN   Display Error Message if slot has date/FIFO issues.
416bAC*
416bACSR         ZZWARN    BEGSR
416bACSR                   MOVE *BLANKS   WOTXT1
416bACSR                   MOVE *BLANKS   WOTXT2
416bACSR                   MOVE *BLANKS   WOTXT3
416bACSR                   MOVE *BLANKS   WOTXT4
416bAC*
416bAC*    Load warning message into window text fields.
416bACSR                   SELEC
416bACSR         MSGTYP    WHEQ '*EXPIRED'
416bAC*
416bACSR                   Z-ADDSLEXPD    WKEXPD
416bACSR                   SELEC
416bAC*    User not allowed to select expired product.
416bACSR         OPRPEX    WHEQ '2'
416bAC*    Reply to message not allowed. (40=Off)
416bACSR                   MOVE *OFF      *IN40
416bACSR                   MOVELMSG101    WOTXT1
416bACSR                   MOVELMSG102    WOTXT2
416bACSR         MSG103    CAT  WKMM:1    WOTXT3
416bACSR         WOTXT3    CAT  '/':0     WOTXT3
416bACSR         WOTXT3    CAT  WKDD:0    WOTXT3
416bACSR         WOTXT3    CAT  '/':0     WOTXT3
416bACSR         WOTXT3    CAT  WKYY:0    WOTXT3
416bACSR         WOTXT3    CAT  '.':0     WOTXT3
416bACSR                   MOVELMSG104    WOTXT4
416bAC*
416bAC*    User must be warned when selecting expired product.
416bACSR         OPRPEX    WHEQ '3'
416bAC*    Reply to message allowed. (40=On)
416bACSR                   MOVE *ON       *IN40
416bACSR                   MOVELMSG201    WOTXT2
416bACSR         MSG202    CAT  WKMM:1    WOTXT3
416bACSR         WOTXT3    CAT  '/':0     WOTXT3
416bACSR         WOTXT3    CAT  WKDD:0    WOTXT3
416bACSR         WOTXT3    CAT  '/':0     WOTXT3
416bACSR         WOTXT3    CAT  WKYY:0    WOTXT3
416bACSR         WOTXT3    CAT  '.':0     WOTXT3
416bAC*
416bACSR                   ENDSL
416bAC*
416bACSR         MSGTYP    WHEQ '*FIFO   '
416bAC*
416bACSR                   SELEC
416bAC*
416bAC*   User must be warned when selecting product out of FIFO rotation.
416bACSR         OPRPFI    WHEQ '3'
416bAC*    Reply to message allowed. (40=On)
416bACSR                   MOVE *ON       *IN40
416bACSR                   MOVELMSG301    WOTXT2
416bACSR                   MOVELMSG302    WOTXT3
416bAC*
416bACSR                   ENDSL
416bAC*
416bACSR                   ENDSL
416bAC*
416bAC*    Display warning message to user.
416bAC*
416bACSR                   MOVE 'N'       WOYES
416bACSR         FOREVR    DOWEQFOREVR
416bACSR                   EXFMTWDWMSG
416bACSR                   SELEC
416bAC*    F3/F12 selected - Cancel selection.
416bACSR         *INKC     WHEQ *ON
416bACSR         *INKL     OREQ *ON
416bACSR                   MOVE *BLANKS   W1DISP
416bACSR                   MOVE *ON       ERROR
416bACSR                   LEAVE
416bAC*
416bAC*    Reply to warning is active.
416bACSR         *IN40     WHEQ *ON
416bAC*
416bACSR                   SELEC
416bAC*    User chose to continue and override warning. Log exception.
416bACSR         WOYES     WHEQ 'Y'
416bACSR                   SELEC
416bACSR         MSGTYP    WHEQ '*EXPIRED'
416bACSR                   MOVE 'SLTEXPD' EXERID
416bACSR         MSGTYP    WHEQ '*FIFO   '
416bACSR                   MOVE 'FIFOROT' EXERID
416bACSR                   ENDSL
416bAC*
416bAC*    Write out exception record.
416bACSR                   EXSR ZZEXCP
416bAC*
416bAC*    User chose to NOT to continue. Return to display.
416bACSR         WOYES     WHEQ 'N'
416bACSR                   MOVE *ON       ERROR
416bACSR                   MOVE *BLANKS   W1DISP
416bACSR                   ENDSL
416bAC*
416bACSR                   LEAVE
416bAC*
416bACSR                   ENDSL
416bACSR                   ENDDO
416bAC*
416bACSR         ENDWRN    ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZD2S - Copy data structure fields into slot fields.
416gAC*
416gACSR         ZZZD2S    BEGSR
     C*
     CSR                   Z-ADDS$WHSE    SLWHSE
     CSR                   MOVE S$WHDP    SLWHDP
     CSR                   MOVE S$DISP    SLDISP
     CSR                   MOVE S$AISL    SLAISL
     CSR                   Z-ADDS$LOC     SLLOC
     CSR                   Z-ADDS$RLVL    SLRLVL
     CSR                   MOVE S$HAND    SLHAND
     CSR                   MOVE S$SIDE    SLSIDE
     CSR                   MOVE S$STYP    SLSTYP
     CSR                   MOVE S$STAT    SLSTAT
     CSR                   Z-ADDS$SDTE    SLSDTE
     CSR                   Z-ADDS$STIM    SLSTIM
     CSR                   MOVE S$SDEF    SLSDEF
     CSR                   MOVE S$DESG    SLDESG
     CSR                   MOVE S$ACTV    SLACTV
     CSR                   MOVE S$BLD     SLBLD
     CSR                   MOVE S$PICK    SLPICK
     CSR                   Z-ADDS$PSEQ    SLPSEQ
     CSR                   Z-ADDS$PRTY    SLPRTY
     CSR                   Z-ADDS$ENTD    SLENTD
     CSR                   Z-ADDS$EXPD    SLEXPD
     CSR                   Z-ADDS$SLFD    SLSLFD
     CSR                   MOVE S$RSRV    SLRSRV
     CSR                   MOVE S$ITEM    SLITEM
     CSR                   Z-ADDS$STK1    SLSTK1
     CSR                   Z-ADDS$STK2    SLSTK2
     CSR                   Z-ADDS$STK3    SLSTK3
     CSR                   Z-ADDS$ALC1    SLALC1
     CSR                   Z-ADDS$ALC2    SLALC2
     CSR                   Z-ADDS$ALC3    SLALC3
     CSR                   Z-ADDS$TFR1    SLTFR1
     CSR                   Z-ADDS$TFR2    SLTFR2
     CSR                   Z-ADDS$TFR3    SLTFR3
     CSR                   Z-ADDS$PCK1    SLPCK1
     CSR                   Z-ADDS$PCK2    SLPCK2
     CSR                   Z-ADDS$PCK3    SLPCK3
     CSR                   Z-ADDS$RCV1    SLRCV1
     CSR                   Z-ADDS$RCV2    SLRCV2
     CSR                   Z-ADDS$RCV3    SLRCV3
     C*
     CSR                   ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZCOP - Copy slot fields into data structure fields.
416gAC*
416gACSR         ZZZCOP    BEGSR
     CSR                   MOVE *OFF      DRIERR  1
     C*
     CSR                   MOVEL$SLOT     DRIDT1
     CSR                   MOVE $SLOT     DRIDT2
     C*
     CSR                   CALL 'DRICOPL'
     CSR                   PARM '*SLOT'   DRICMD 10
     CSR                   PARM           DRISUB 10
     CSR                   PARM 'D'       DRISYS  1
     CSR                   PARM #PROG     DRIPGM 10
     CSR                   PARM           DRIRTN 10
     CSR                   PARM ' '       DRIMSG 60
     CSR                   PARM           DRIDT1256
     CSR                   PARM           DRIDT2256
     C*
     CSR                   MOVELDRIDT1    $SLOT
     CSR                   MOVE DRIDT2    $SLOT
     C*
     CSR         CK4ERR    IFEQ *ON
     CSR         DRIRTN    ANDNE'*OK'
     CSR                   MOVE *ON       DRIERR
     CSR         DRIZM     IFEQ *ON
     CSR                   EXSR ZM0001
     CSR                   ENDIF
     CSR                   ENDIF
     C*
     CSR                   MOVE *OFF      CK4ERR  1
     CSR                   MOVE *OFF      DRIZM   1
     CSR                   ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZFS2 - Fill data structure slot fields for Tfrin/out
416gAC*
416gACSR         ZZZFS2    BEGSR
     C*
     CSR                   MOVE *ON       SUWHSE
     CSR                   MOVE *ON       SUWHDP
     CSR                   MOVE *ON       SUDISP
     CSR                   MOVE *ON       AUITEM
     CSR                   MOVE *ON       AUQTY
     C*
     CSR                   MOVE *ON       AUTRN#
     CSR                   MOVE *ON       AUTASK
     CSR                   MOVE *OFF      AULIC#
     C********             Z-ADDW1LCNS    A$LIC#
     C*
     CSR                   ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZFS3 - Fill data structure slot fields for Get
416gAC*
416gACSR         ZZZFS3    BEGSR
     C*
     CSR                   MOVE *ON       SUWHSE
     CSR                   MOVE *ON       SUWHDP
     CSR                   MOVE *ON       SUDISP
     C*
     CSR                   ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZISF - Initialize slot fields.
416gAC*
416gACSR         ZZZISF    BEGSR
     C*
     CSR                   MOVE *OFF      SUWHSE
     CSR                   Z-ADD0         S$WHSE
     C*
     CSR                   MOVE *OFF      SUWHDP
     CSR                   MOVE *BLANKS   S$WHDP
     C*
     CSR                   MOVE *OFF      SUDISP
     CSR                   MOVE *BLANKS   S$DISP
     C*
     CSR                   MOVE *OFF      SUAISL
     CSR                   MOVE *BLANKS   S$AISL
     C*
     CSR                   MOVE *OFF      SULOC
     CSR                   Z-ADD0         S$LOC
     C*
     CSR                   MOVE *OFF      SURLVL
     CSR                   Z-ADD0         S$RLVL
     C*
     CSR                   MOVE *OFF      SUHAND
     CSR                   MOVE *BLANKS   S$HAND
     C*
     CSR                   MOVE *OFF      SUSIDE
     CSR                   MOVE *BLANKS   S$SIDE
     C*
     CSR                   MOVE *OFF      SUSTYP
     CSR                   MOVE *BLANKS   S$STYP
     C*
     CSR                   MOVE *OFF      SUSTAT
     CSR                   MOVE *BLANKS   S$STAT
     C*
     CSR                   MOVE *OFF      SUSDTE
     CSR                   Z-ADD0         S$SDTE
     C*
     CSR                   MOVE *OFF      SUSTIM
     CSR                   Z-ADD0         S$STIM
     C*
     CSR                   MOVE *OFF      SUSDEF
     CSR                   MOVE *BLANKS   S$SDEF
     C*
     CSR                   MOVE *OFF      SUDESG
     CSR                   MOVE *BLANKS   S$DESG
     C*
     CSR                   MOVE *OFF      SUACTV
     CSR                   MOVE *BLANKS   S$ACTV
     C*
     CSR                   MOVE *OFF      SUBLD
     CSR                   MOVE *BLANKS   S$BLD
     C*
     CSR                   MOVE *OFF      SUPICK
     CSR                   MOVE *BLANKS   S$PICK
     C*
     CSR                   MOVE *OFF      SUPSEQ
     CSR                   Z-ADD0         S$PSEQ
     C*
     CSR                   MOVE *OFF      SUPRTY
     CSR                   Z-ADD0         S$PRTY
     C*
     CSR                   MOVE *OFF      SUENTD
     CSR                   Z-ADD0         S$ENTD
     C*
     CSR                   MOVE *OFF      SUEXPD
     CSR                   Z-ADD0         S$EXPD
     C*
     CSR                   MOVE *OFF      SUSLFD
     CSR                   Z-ADD0         S$SLFD
     C*
     CSR                   MOVE *OFF      SURSRV
     CSR                   MOVE 0         S$RSRV
     C*
     CSR                   MOVE *OFF      SUITEM
     CSR                   MOVE 0         S$ITEM
     C*
     CSR                   Z-ADD0         S$STK1
     CSR                   Z-ADD0         S$STK2
     CSR                   Z-ADD0         S$STK3
     CSR                   Z-ADD0         S$ALC1
     CSR                   Z-ADD0         S$ALC2
     CSR                   Z-ADD0         S$ALC3
     CSR                   Z-ADD0         S$TFR1
     CSR                   Z-ADD0         S$TFR2
     CSR                   Z-ADD0         S$TFR3
     CSR                   Z-ADD0         S$PCK1
     CSR                   Z-ADD0         S$PCK2
     CSR                   Z-ADD0         S$PCK3
     CSR                   Z-ADD0         S$RCV1
     CSR                   Z-ADD0         S$RCV2
     CSR                   Z-ADD0         S$RCV3
     CSR                   Z-ADD0         S$PHY1
     CSR                   Z-ADD0         S$PHY2
     CSR                   Z-ADD0         S$PHY3
     CSR                   Z-ADD0         S$AVL1
     CSR                   Z-ADD0         S$AVL2
     CSR                   Z-ADD0         S$AVL3
     CSR                   Z-ADD0         S$ADJ1
     CSR                   Z-ADD0         S$ADJ2
     CSR                   Z-ADD0         S$ADJ3
     C*
     CSR                   MOVE *OFF      AUITEM
     CSR                   MOVE *BLANKS   A$ITEM
     C*
     CSR                   MOVE *OFF      AUQTY
     CSR                   Z-ADD0         A$QTY1
     CSR                   Z-ADD0         A$QTY2
     CSR                   Z-ADD0         A$QTY3
     C*
     CSR                   MOVE *OFF      AUORG
     CSR                   Z-ADD0         A$ORG1
     CSR                   Z-ADD0         A$ORG2
     CSR                   Z-ADD0         A$ORG3
     C*
     CSR                   MOVE *OFF      AUCWTA
     CSR                   Z-ADD0         A$CWTA
     C*
     CSR                   MOVE *OFF      AUCODE
     CSR                   MOVE *BLANKS   A$CODE
     C*
     CSR                   MOVE *OFF      AUMEMO
     CSR                   MOVE *BLANKS   A$MEMO
     C*
     CSR                   MOVE *OFF      AUBY
     CSR                   MOVE *BLANKS   A$BY
     C*
     CSR                   MOVE *OFF      AUDATE
     CSR                   Z-ADD0         A$DATE
     C*
     CSR                   MOVE *OFF      AUTIME
     CSR                   Z-ADD0         A$TIME
     C*
     CSR                   MOVE *OFF      AUVRFY
     CSR                   MOVE *BLANKS   A$VRFY
     C*
     CSR                   MOVE *OFF      AUTRN#
     CSR                   Z-ADD0         A$TRN#
     C*
     CSR                   MOVE *OFF      AULIC#
416hDC**                   Z-ADD0         A$LIC#
416hMCSR                   MOVE *BLANKS   A$LIC#
     C*
     CSR                   MOVE *OFF      AUTASK
     CSR                   MOVE *BLANKS   A$TASK
     C*
     CSR                   MOVE *OFF      AUCDSP
     CSR                   MOVE *BLANKS   A$CDSP
     C*
     CSR                   ENDSR
416gAC*----------------------------------------------------------------
416gAC*     ZZZS2D - Copy slot fields into data structure fields.
416gAC*
416gACSR         ZZZS2D    BEGSR
     C*
     CSR                   Z-ADDSLWHSE    S$WHSE
     CSR                   MOVE SLWHDP    S$WHDP
     CSR                   MOVE SLDISP    S$DISP
     CSR                   MOVE SLAISL    S$AISL
     CSR                   Z-ADDSLLOC     S$LOC
     CSR                   Z-ADDSLRLVL    S$RLVL
     CSR                   MOVE SLHAND    S$HAND
     CSR                   MOVE SLSIDE    S$SIDE
     CSR                   MOVE SLSTYP    S$STYP
     CSR                   MOVE SLSTAT    S$STAT
     CSR                   Z-ADDSLSDTE    S$SDTE
     CSR                   Z-ADDSLSTIM    S$STIM
     CSR                   MOVE SLSDEF    S$SDEF
     CSR                   MOVE SLDESG    S$DESG
     CSR                   MOVE SLACTV    S$ACTV
     CSR                   MOVE SLBLD     S$BLD
     CSR                   MOVE SLPICK    S$PICK
     CSR                   Z-ADDSLPSEQ    S$PSEQ
     CSR                   Z-ADDSLPRTY    S$PRTY
     CSR                   Z-ADDSLENTD    S$ENTD
     CSR                   Z-ADDSLEXPD    S$EXPD
     CSR                   Z-ADDSLSLFD    S$SLFD
     CSR                   MOVE SLRSRV    S$RSRV
     CSR                   MOVE SLITEM    S$ITEM
     CSR                   Z-ADDSLSTK1    S$STK1
     CSR                   Z-ADDSLSTK2    S$STK2
     CSR                   Z-ADDSLSTK3    S$STK3
     CSR                   Z-ADDSLALC1    S$ALC1
     CSR                   Z-ADDSLALC2    S$ALC2
     CSR                   Z-ADDSLALC3    S$ALC3
     CSR                   Z-ADDSLTFR1    S$TFR1
     CSR                   Z-ADDSLTFR2    S$TFR2
     CSR                   Z-ADDSLTFR3    S$TFR3
     CSR                   Z-ADDSLPCK1    S$PCK1
     CSR                   Z-ADDSLPCK2    S$PCK2
     CSR                   Z-ADDSLPCK3    S$PCK3
     CSR                   Z-ADDSLRCV1    S$RCV1
     CSR                   Z-ADDSLRCV2    S$RCV2
     CSR                   Z-ADDSLRCV3    S$RCV3
     CSR                   Z-ADD0         S$PHY1
     CSR                   Z-ADD0         S$PHY2
     CSR                   Z-ADD0         S$PHY3
     CSR                   Z-ADD0         S$AVL1
     CSR                   Z-ADD0         S$AVL2
     CSR                   Z-ADD0         S$AVL3
     CSR                   Z-ADD0         S$ADJ1
     CSR                   Z-ADD0         S$ADJ2
     CSR                   Z-ADD0         S$ADJ3
     C*
     CSR                   ENDSR
     O*----------------------------------------------------------------
     O*
     O*  Compile time tables
     O*
**  ZOPT - Valid options
 1 9 X
**  OPTLN - Option display line
  1=Select  9=View Slot Quantities
**  CMDLN - Command display line
F3/F12=Exit F5=Refresh F8=Lic inf F10=Out
**  DESC - Description
Available Quantity
Verify Zero
Pick slot not allowed for replenishment.
1=Select can be used only once.
Slot error logged for slot:
Item flagged as Out.
